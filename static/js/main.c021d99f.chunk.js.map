{"version":3,"sources":["actions/index.js","sections/texteditor.js","sections/navigation.js","sections/panelcontainer.js","modules/select.js","sections/numberttransform.js","sections/panelmemory.js","sections/panelconsole.js","sections/panellog.js","sections/help.js","developer_list.js","sections/about.js","modules/hotkey.js","sections/settings.js","modules/input.js","../oak/VirtualOS.js","../oak/Enum.js","../oak/Utils.js","../oak/InstructionSet.js","../oak/Assembler.js","../oak/Core.js","../oak/index.js","sections/panelsettings.js","sections/panelconversion.js","sections/panelregisters.js","sections/panelmachinecode.js","../isas/RISCV.js","../isas/MIPS.js","app.js","reducers/tab.js","reducers/selectedtab.js","reducers/globalsettings.js","reducers/projectsettings.js","reducers/setvisibility.js","reducers/index.js","index.js"],"names":["Actions","setSettingsVisible","state","type","setHelpVisible","setAboutVisible","selectTab","id","updateTab","index","tab","setProjectSettings","n","s","i","payload","file_name","memory_size","isa","TextEditor","addTab","props","handleTabChange","tabs","name","core","memorySize","instruction_set","handleTabClose","event","stopPropagation","selected","selectedtab","Math","min","max","length","deleteTab","setEditorValue","val","current_tab","content","this","className","map","onClick","key","mode","theme","onChange","width","height","value","readOnly","is_disabled","editorProps","$blockScrolling","Infinity","Component","connect","dispatch","ownProps","SimulatingStatus","Navigation","assemble_css","runningStatus","console_input_type","handleAddTabRiscv","handleAddTabMips","handleLoadAsm","handleLoadBin","handleDownloadAsm","downloadBin","downloadBinH","downloadRam","showSettings","showHelp","showAbout","assemble","simulate","stepbystep","withLocalize","visible","PanelContainer","renderTabs","React","Children","children","child","display_name","e","handleClickTab","preventDefault","setState","childrenProps","cloneElement","onMouseDown","handleStartDrag","Select","style","backgroundImage","icon","placeholder","padNumber","str","padded","PanelMemory","handleType","register_type","parseInt","target","translateRegister","input","toString","memory","empty","defaultValue","byte","PanelConsole","log","console","running","line","show_input","PanelLog","instruction","Help","handleClose","handleStopClose","options","renderInnerHtml","panel_visibility","help","affiliation","pic","job","link","desc","additional","translators","About","printdev","arr","element","href","src","alt","devs","lang","about","HotkeyInput","handleClick","capturing","window","addEventListener","handleKey","toLowerCase","shift","shiftKey","ctrl","ctrlKey","altKey","key_name","removeEventListener","save","testKey","key_ctrl","key_alt","key_shift","setKey","done","getKey","setKeyStr","upos","indexOf","mods","substr","combo","c","tabIndex","themes","Settings","canhandleinput","cancel","hotkey","comp_new","current","comp_load","comp_save","comp_assemble","comp_step","comp_sim","hotkeyfns","fn_new","fn_load","fn_save","fn_ass","fn_step","fn_sim","setDefaults","setTheme","setDefaultsSave","saveSettings","d","Date","setTime","getTime","exp","toUTCString","document","cookie","continuefn","includes","forEach","getElementById","disabled","handleISA","default_isa","handleTheme","acceptCookies","use_cookies","deleteAllCookies","cookies","split","eqPos","createRef","has_cookies","ca","charAt","substring","eq","display","position","colSpan","ref","settings","Input","VirtualOS","continueInputString","reg","virtualOSArgumentVectorStart","arg","registerFile","read","array","push","charCodeAt","memset","continueInputInt","write","service","virtualOSServiceRegister","start","outputInt","iterator","char","memcpy","outStr","String","fromCharCode","join","outputString","inputInt","inputString","handleHalt","Enum","object","Utils","bits","mutableValue","abs","signExt","bytes","bigEndian","reverse","storage","number","digits","radix","hexadecimal","hexRepresentation","toUpperCase","Parameter","immediate","register","condition","offset","special","fpImmediate","Endianness","little","big","bi","Keyword","directive","comment","label","stringMarker","charMarker","string","numberic","Directive","text","data","cString","_8bit","_16bit","_32bit","_64bit","fixedPoint","floatingPoint","custom","BitRange","field","constant","signed","totalBits","limitStart","limitEnd","parameter","parameterType","parameterDefaultValue","Format","ranges","regex","disassembly","processSpecialParameter","decodeSpecialParameter","Instruction","mnemonic","format","constants","constValues","executor","signatoryOverride","pseudoInstructionFor","computedBits","computedMask","computedTemplate","machineCode","machineCodeMutable","maskBits","mask","bit","count","ceil","range","before","end","addition","pad","after","temp","InstructionSet","formats","instructions","pseudoInstructions","abiNames","keywords","directives","incrementOnFetch","exampleCode","sort","a","b","result","hasPrefix","captures","exec","args","output","replace","prototype","interpretedBytes","hexes","isNaN","needle","Kind","noise","Line","raw","addressThisPass","sensitive","kind","sensitivityList","possibleInstructions","assembler","keywordRegexes","tmp","pieces","processed","RegExp","directiveData","undefined","invalidReason","instructionSet","match","slice","minimum","fill","zeroDelimitedString","elements","generalCharacters","characters","found","character","Assembler","escapedCharacters","isInstruction","lines","address","candidates","testingInstructions","possibleInstruction","template","j","limited","store","process","errorMessage","context","startBit","endBit","smallestPossibleInstruction","filter","pi","stored","assembleText","assembleData","lineByLabel","linesByLabel","sensor","sensorLength","newAssembly","file","endianness","memoryMap","words","numeric","radixList","escapable","escapedCharacterList","instructionLength","registerNo","reference","extraction","radixes","interpretable","rangeCheck","pass","errors","assemblerModeText","initialProcess","asm","list","keyword","o","x","Object","keys","CoreFactory","ISAs","architecture","virtualOS","generator","Core","insts","decoded","arguments","fetched","bitRanges","limit","pc","disassemble","factory","PanelSettings","handleFileName","project_settings","handleMemorySize","test","handleSubmit","submitChanges","isas","OakJS","getCoreList","onSubmit","PanelConversion","calculateOutput","in_type","out_type","onChangeInput","input_type","output_type","out","has_value","onChangeInputType","onChangeOutputType","PanelRegisters","getChangedRegisterClass","registers","physicalFile","register_changed","register_names","cellSpacing","cellPadding","register_dpy","data-info","PanelMachineCode","machinecode","machine_code","RISCVRegisterFile","modifiedRegisters","registerNumber","modReg","getRegisterCount","RISCVCore","virtualOSArgumentVectorEnd","Array","reset","catBytes","opts","parameterized","rType","JSBI","toNumber","bitwiseAnd","add","BigInt","subtract","multiplier","multiplicant","product","multiply","productNumber","signedRightShift","dividend","divisor","equal","divide","remainder","iType","ilSubtype","isSubtype","sType","uType","sbType","ujType","allConstSubtype","ecall","mvPseudo","liPseudo","jrPseudo","MIPSRegisterFile","MIPSCore","rjSubtype","rsSubtype","rcSubtype","ibSubtype","iluiSubtype","ilsSubtype","writeAddress","jType","decode_error_msg","MessageType","App","handleKeyPress","console_input","cursor","cursor_pos","continueAfterConsole","which","keyCode","l","keycode","isNum","addConsoleMessage","msg_type","virtual_os","checkUpdatedTabs","mod_reg","getModifiedRegisters","addTabFull","code","mem_size","get_example_code","getCore","new_tab","from","getDefaultISA","addTabDefault","addTabDefaultRISCV","addTabDefaultMIPS","handleUpload","files","component_input","is_upload_bin","blob","size","fr","FileReader","me","Uint8Array","readAsArrayBuffer","res","readAsText","click","el","createElement","Blob","blobLink","URL","createObjectURL","setAttribute","body","appendChild","removeChild","byteArray","finalFile","padStart","resetUI","uiSimulate","uiAssemble","fetch","decode","execute","uiStepByStep","arrayFromFile","passZero","passCounter","reduce","concat","handleSettingsChange","isa_type","diff_isa","diff_mem","new_isa_found","handleStartDragX","handleDragX","handleStopDragX","handleX","pageX","w","innerWidth","documentElement","clientWidth","panel_x","handleY","y","pageY","h","innerHeight","clientHeight","panel_y","handleStartDragY","handleDragY","handleStopDragY","alert","initialize","languages","renderToStaticMarkup","addTranslationForLanguage","enTranslations","has_tabs","Fragment","gridTemplateColumns","gridTemplateRows","tabReducer","action","t","assign","selectedTabReducer","globalSettingsReducer","projectSettingsReducer","combineReducers","global_settings","localize","localizeReducer","createStore","allReducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render"],"mappings":"8kLAAaA,G,YACG,cADHA,EAEA,UAFAA,EAGG,aAHHA,EAIG,aAJHA,EAKgB,0BALhBA,EAMS,mBANTA,EAOU,oBAPVA,EAQa,uBAGbC,EAAqB,SAACC,GAAD,MAAY,CAC1CC,KAAMH,EACNE,UAGSE,EAAiB,SAACF,GAAD,MAAY,CACtCC,KAAMH,EACNE,UAGSG,EAAkB,SAACH,GAAD,MAAY,CACvCC,KAAMH,EACNE,UAGSI,EAAY,SAACC,GAAD,MAAS,CAC9BJ,KAAMH,EACNO,OAQSC,EAAY,SAACC,EAAOC,GAAR,MAAiB,CACtCP,KAAMH,EACNS,QACAC,QAQSC,EAAqB,SAACC,EAAGC,EAAGC,GAAP,MAAc,CAC5CX,KAAMH,EACNe,QAAS,CACLC,UAAWJ,EACXK,YAAaJ,EACbK,IAAKJ,K,OCtCPK,E,4MACFC,OAAS,WACL,EAAKC,MAAMD,U,EAGfE,gBAAkB,SAACf,GACf,EAAKc,MAAMf,UAAUC,GACrB,IAAIG,EAAM,EAAKW,MAAME,KAAKhB,GAEtBG,GACA,EAAKW,MAAMV,mBACPD,EAAIc,KACJd,EAAIe,KAAKC,WACThB,EAAIiB,kB,EAKhBC,eAAiB,SAACC,EAAOtB,GACrBsB,EAAMC,kBAEN,IAAIC,EAAW,EAAKV,MAAMW,YACtBD,GAAYxB,IAAIwB,GAAY,GAEhCA,EAAWE,KAAKC,IAAID,KAAKE,IAAIJ,EAAU,GAAI,EAAKV,MAAME,KAAKa,OAAS,GAEpE,EAAKf,MAAMf,UAAUyB,GAErB,IAAIrB,EAAM,EAAKW,MAAME,KAAKQ,GAEtBrB,GACA,EAAKW,MAAMV,mBACPD,EAAIc,KACJd,EAAIe,KAAKC,WACThB,EAAIiB,iBAIZ,EAAKN,MAAMgB,UAAU9B,I,EAGzB+B,eAAiB,SAACC,GACd,IAAIC,EAAc,EAAKnB,MAAMW,YACzBtB,EAAM,EAAKW,MAAME,KAAKiB,GAC1B9B,EAAI+B,QAAUF,EACd,EAAKlB,MAAMb,UAAUgC,EAAa9B,I,uDAG5B,IAAD,OACDa,EAAOmB,KAAKrB,MAAME,KAEtB,OACI,0BAAMhB,GAAG,cAAcoC,UAAU,eAC7B,wBAAIA,UAAU,aACTpB,EAAKqB,KAAI,SAAClC,EAAKH,GACZ,OACI,wBACIsC,QAAS,kBAAM,EAAKvB,gBAAgBf,IACpCuC,IAAKvC,EACLoC,UACI,EAAKtB,MAAMW,cAAgBzB,EACrB,WACA,IAGV,8BAAOG,EAAIc,MACX,yBACIqB,QAAS,SAAChB,GAAD,OACL,EAAKD,eAAeC,EAAOtB,UAM/C,wBAAIoC,UAAU,UAAUE,QAASH,KAAKtB,UAGtC,kBAAC,IAAD,CACI2B,KAAK,OACLC,MAAM,SACNC,SAAUP,KAAKJ,eACfY,MAAM,OACNC,OAAO,GACP3B,KAAK,cACLmB,UAAU,cACVS,MAAO7B,EAAKmB,KAAKrB,MAAMW,aAAaS,QACpCY,SAAUX,KAAKrB,MAAMiC,YACrBC,YAAa,CAAEC,gBAAiBC,Y,GAvF/BC,aA6GVC,eAdM,SAACzD,GAClB,MAAO,CACHqB,KAAMrB,EAAMqB,KACZS,YAAa9B,EAAM8B,gBAIH,SAAC4B,EAAUC,GAAX,MAAyB,CAC7CvD,UAAW,SAACC,GAAD,OAAQqD,EAAStD,EAAUC,KACtCC,UAAW,SAACC,EAAOC,GAAR,OAAgBkD,EAASpD,EAAUC,EAAOC,KACrD2B,UAAW,SAAC9B,GAAD,OAAQqD,ED7EE,SAACrD,GAAD,MAAS,CAC9BJ,KAAMH,EACNO,MC2E4B8B,CAAU9B,KACtCI,mBAAoB,SAACC,EAAGC,EAAGC,GAAP,OAAa8C,EAASjD,EAAmBC,EAAGC,EAAGC,QAGxD6C,CAAuCxC,G,OClHhD2C,EACO,EAOPC,E,uKAEE,IAAIC,EAAe,GACbtD,EAAMgC,KAAKrB,MAAME,KAAKmB,KAAKrB,MAAMW,aAYvC,OAVItB,IACIA,EAAIuD,gBAAkBH,IACtBE,EAAe,mBATJ,IAYXtD,EAAIwD,qBACJF,GAAgB,4BAKpB,yBAAKzD,GAAG,aAAaoC,UAAU,cAC3B,4BACI,wBAAIA,UAAU,YACV,wBAAIA,UAAU,aACV,wBAAIE,QAASH,KAAKrB,MAAM8C,mBACpB,kBAAC,IAAD,CAAW5D,GAAG,yBAElB,wBAAIsC,QAASH,KAAKrB,MAAM+C,kBACpB,kBAAC,IAAD,CAAW7D,GAAG,wBAElB,wBAAIsC,QAASH,KAAKrB,MAAMgD,eACpB,kBAAC,IAAD,CAAW9D,GAAG,yBAElB,wBAAIsC,QAASH,KAAKrB,MAAMiD,eACpB,kBAAC,IAAD,CAAW/D,GAAG,uBAElB,wBAAIsC,QAASH,KAAKrB,MAAMkD,mBACpB,kBAAC,IAAD,CAAWhE,GAAG,6BAElB,wBAAIsC,QAASH,KAAKrB,MAAMmD,aACpB,kBAAC,IAAD,CAAWjE,GAAG,2BAElB,wBAAIsC,QAASH,KAAKrB,MAAMoD,cACpB,kBAAC,IAAD,CAAWlE,GAAG,6BAElB,wBAAIsC,QAASH,KAAKrB,MAAMqD,aACpB,kBAAC,IAAD,CAAWnE,GAAG,6BAI1B,wBAAIsC,QAASH,KAAKrB,MAAMsD,cACpB,kBAAC,IAAD,CAAWpE,GAAG,oBAElB,wBAAIsC,QAASH,KAAKrB,MAAMuD,UACpB,kBAAC,IAAD,CAAWrE,GAAG,gBAElB,wBAAIsC,QAASH,KAAKrB,MAAMwD,WACpB,kBAAC,IAAD,CAAWtE,GAAG,kBAItB,yBAAKoC,UAAU,iBACX,4BACIA,UAAS,WACTE,QAASH,KAAKrB,MAAMyD,WAExB,4BACInC,UAAS,kBAAaqB,GACtBnB,QAASH,KAAKrB,MAAM0D,WAExB,4BACIpC,UAAS,uBAAkBqB,GAC3BnB,QAASH,KAAKrB,MAAM2D,mB,GApEnBtB,aAyFVuB,cACXtB,aAdiB,SAACzD,GAClB,MAAO,CACHqB,KAAMrB,EAAMqB,KACZS,YAAa9B,EAAM8B,gBAIA,SAAC4B,EAAUC,GAAX,MAAyB,CAChDe,SAAU,SAACM,GAAD,OAAatB,EAASxD,EAAe8E,KAC/CL,UAAW,SAACK,GAAD,OAAatB,EAASvD,EAAgB6E,KACjDP,aAAc,SAACO,GAAD,OAAatB,EAAS3D,EAAmBiF,QAIvDvB,CAA0CI,ICzGzBoB,E,kDACjB,WAAY9D,GAAQ,IAAD,8BACf,cAAMA,IAYV+D,WAAa,WACT,OACI,wBAAIzC,UAAU,cACT0C,IAAMC,SAAS1C,IAAI,EAAKvB,MAAMkE,UAAU,SAACC,EAAO1E,GAAR,OACrC,wBACI6B,UAAW,EAAKzC,MAAM6B,WAAajB,EAAI,WAAa,GACpDgC,IAAK0C,EAAMrF,KAAKsF,aAChB5C,QAAS,SAAC6C,GAAD,OAAO,EAAKC,eAAeD,EAAG5E,KAEtC0E,EAAMrF,KAAKsF,mBAnB5B,EAAKvF,MAAQ,CACT6B,SAAU,GAJC,E,2DAQJ2D,EAAG5C,GACd4C,EAAEE,iBACFlD,KAAKmD,SAAS,CAAE9D,SAAUe,M,+BAmBpB,IAAD,OACGyC,EAAa7C,KAAKrB,MAAlBkE,SACFO,EAAgBT,IAAMC,SAAS1C,IAAI2C,GAAU,SAACC,EAAOjF,GACvD,OAAO,EAAKL,MAAM6B,WAAaxB,GAAM8E,IAAMU,aAAaP,MAE5D,OACI,yBACIjF,GAAG,kBACHoC,UAAS,0BAAqBD,KAAKrB,MAAMsB,YAEzC,yBACIqD,YAAatD,KAAKrB,MAAM4E,gBACxBtD,UAAU,eAEbD,KAAK0C,aACLU,O,GA7C2BpC,aCAvBwC,E,uKAEb,OACI,yBAAKvD,UAAU,gBACX,4BACIM,SAAUP,KAAKrB,MAAM4B,SACrBG,MAAOV,KAAKrB,MAAM+B,MAClB+C,MAAO,CACHC,gBAAgB,iDAAD,OAAmD1D,KAAKrB,MAAMgF,KAA9D,OAGlB3D,KAAKrB,MAAMkE,UAEhB,2BAAO5C,UAAU,eAAeD,KAAKrB,MAAMiF,kB,GAbvB5C,aCF7B,SAAS6C,EAAUC,EAAKpE,GAE3B,IADA,IAAIqE,EAASD,EACJ1F,EAAI,EAAGA,EAAIsB,EAASoE,EAAIpE,OAAQtB,IACrC2F,EAAS,IAAMA,EAEnB,OAAOA,E,ICALC,E,kDAGF,WAAYrF,GAAQ,IAAD,8BACf,cAAMA,IAMVsF,WAAa,SAAC9E,GACV,EAAKgE,SAAS,CAAEe,cAAeC,SAAShF,EAAMiF,OAAO1D,MAAO,OAR7C,EAWnB2D,kBAAoB,SAACC,GACjB,OAAQ,EAAK9G,MAAM0G,eACf,QACA,KAAK,EACD,OAAOL,GAAWS,IAAU,GAAGC,SAAS,IAAK,GACjD,KAAK,EACD,OAAOV,GAAWS,IAAU,GAAGC,SAAS,IAAK,GACjD,KAAK,EACD,OAAOV,GAAWS,IAAU,GAAGC,SAAS,GAAI,GAChD,KAAK,EACD,OAAOV,GAAWS,IAAU,GAAGC,SAAS,GAAI,KAnBpD,EAAK/G,MAAQ,CACT0G,cAAe,GAHJ,E,qDAyBT,IAAD,OACDrF,EAAOmB,KAAKrB,MAAME,KACtB,GAAoB,IAAhBA,EAAKa,OAAc,OAAO,8BAE9B,IAAI8E,EAAS3F,EAAKmB,KAAKrB,MAAMW,aAAaP,KAAKyF,OAC3CC,EAA0B,IAAlBD,EAAO9E,OACnB,OACI,yBAAK7B,GAAG,eAAeoC,UAAU,sBAC5BwE,GAAS,0BAAMxE,UAAU,eAAhB,iBACRwE,GACE,kBAAC,EAAD,CACIlE,SAAUP,KAAKiE,WACfN,KAAK,8BACLC,YAAY,eACZc,aAAa,KAEb,4BAAQhE,MAAM,KAAd,OACA,4BAAQA,MAAM,KAAd,WACA,4BAAQA,MAAM,KAAd,SACA,4BAAQA,MAAM,KAAd,YAIN+D,GACED,EAAOtE,KAAI,SAACyE,EAAMvG,GACd,IAAIyB,EAAM,EAAKwE,kBAAkBM,GACjC,OAAO,0BAAMvE,IAAKhC,GAAIyB,EAAf,a,GAtDLmB,aAApBgD,EACKjB,aAAe,SA4D1B,IAOe9B,eAPM,SAACzD,GAClB,MAAO,CACHqB,KAAMrB,EAAMqB,KACZS,YAAa9B,EAAM8B,eAIZ2B,CAAsB+C,GCtE/B5C,EACO,EAKPwD,E,uKAIE,IAAI5G,EAAMgC,KAAKrB,MAAME,KAAKmB,KAAKrB,MAAMW,aACrC,IAAKtB,EAAK,OAAO,8BAEjB,IAAI6G,EAAM7G,EAAI8G,QACVL,EAAuB,IAAfI,EAAInF,OAEVqF,EAAU/G,EAAIuD,gBAAkBH,EAEtC,OACI,yBAAKvD,GAAG,gBAAgBoC,UAAU,uBAC7BwE,GAAS,0BAAMxE,UAAU,eAAhB,kBACRwE,GACEI,EAAI3E,KAAI,SAAC8E,EAAM5G,GACX,OAAO,yBAAKgC,IAAKhC,GAAI4G,MAE5BhF,KAAKrB,MAAMsG,YACR,8BACI,0BAAMhF,UAAU,WAAW,MAAa,IACvCD,KAAKrB,MAAM2F,OAGnBS,GACG,yBAAK9E,UAAU,mBAAf,0C,GA1BOe,aAArB4D,EACK7B,aAAe,UAkC1B,IAOe9B,eAPM,SAACzD,GAClB,MAAO,CACHqB,KAAMrB,EAAMqB,KACZS,YAAa9B,EAAM8B,eAIZ2B,CAAsB2D,GChD/BM,E,uKAIE,IAAIT,EAAuC,IAA/BzE,KAAKrB,MAAMI,KAAK8F,IAAInF,OAChC,OACI,yBAAK7B,GAAG,YAAYoC,UAAU,mBACzBwE,GACG,0BAAMxE,UAAU,eAAhB,0BAEFwE,GACEzE,KAAKrB,MAAMI,KAAK8F,IAAI3E,KAAI,SAACiF,EAAa/G,GAClC,OAAO,yBAAKgC,IAAKhC,GAAI+G,W,GAZtBnE,aAAjBkE,EACKnC,aAAe,MAkB1B,IAMe9B,eANM,SAACzD,GAClB,MAAO,CACHuB,KAAMvB,EAAMqB,KAAKrB,EAAM8B,gBAIhB2B,CAAsBiE,GCtB/BE,E,4MACFC,YAAc,SAACrC,GACXA,EAAEE,iBACF,EAAKvE,MAAMjB,gBAAe,I,EAG9B4H,gBAAkB,SAACnG,GACfA,EAAMC,mB,uDAIN,OACI,yBACIvB,GAAG,OACHsC,QAASH,KAAKqF,YACdpF,UAAS,wCACLD,KAAKrB,MAAM6D,QAAU,eAAiB,KAG1C,yBACIvC,UAAU,qBACVE,QAASH,KAAKsF,iBAEd,4BACIrF,UAAU,iBACVE,QAASH,KAAKqF,cAElB,4BACI,kBAAC,IAAD,CAAWxH,GAAG,gBAElB,yBAAKoC,UAAU,oBACX,kBAAC,IAAD,CACIpC,GAAG,YACH0H,QAAS,CAAEC,iBAAiB,KAEhC,4BAAQvF,UAAU,SAASE,QAASH,KAAKqF,aAAzC,gB,GAnCLrE,aAuDJuB,cAAatB,aAVP,SAACzD,GAClB,MAAO,CACHgF,QAAShF,EAAMiI,iBAAiBC,SAIhB,SAACxE,EAAUC,GAAX,MAAyB,CAC7CzD,eAAgB,SAAC8E,GAAD,OAAatB,EAASxD,EAAe8E,QAG7BvB,CAAuCmE,IC7DpD,GACXrG,KAAM,CACF,CACI4G,YAAa,mDACbC,IAAK,WACL9G,KAAM,uBACN+G,IAAK,kCACLC,KAAM,wBACNC,KAAM,yJAEV,CACIJ,YAAa,mDACbC,IAAK,cACL9G,KAAM,oBACN+G,IAAK,kCACLC,KAAM,6BACNC,KAAM,+EAGdC,WAAY,CACR,CACIL,YAAa,mDACbC,IAAK,iBACL9G,KAAM,aACN+G,IAAK,kBACLC,KAAM,4BACNC,KAAM,kFAEV,CACIJ,YAAa,0CACbC,IAAK,aACL9G,KAAM,qBACN+G,IAAK,UACLC,KAAM,4BACNC,KAAM,8DAGdE,YAAa,IC9BXC,E,4MACFb,YAAc,SAACrC,GACXA,EAAEE,iBACF,EAAKvE,MAAMhB,iBAAgB,I,EAG/B2H,gBAAkB,SAACnG,GACfA,EAAMC,mB,EAGV+G,SAAW,SAACC,GACR,OAAOA,EAAIlG,KAAI,SAACmG,EAASjI,GACrB,OACI,uBAAGgC,IAAKhC,EAAGkI,KAAMD,EAAQP,MACrB,yBACIS,IAAG,uBAAkBF,EAAQT,KAC7BY,IAAKH,EAAQvH,OAEjB,4BAAKuH,EAAQvH,MACb,8BAAOuH,EAAQR,KACf,8BAAOQ,EAAQV,aACf,2BAAIU,EAAQN,W,uDAOxB,OACI,yBACIlI,GAAG,QACHsC,QAASH,KAAKqF,YACdpF,UAAS,wCACLD,KAAKrB,MAAM6D,QAAU,eAAiB,KAG1C,yBACIvC,UAAU,qBACVE,QAASH,KAAKsF,iBAEd,4BACIrF,UAAU,iBACVE,QAASH,KAAKqF,cAElB,4BACI,kBAAC,IAAD,CAAWxH,GAAG,iBAElB,yBAAKoC,UAAU,oBACX,yBAAKA,UAAU,WACX,4BACI,kBAAC,IAAD,CAAWpC,GAAG,qBAEjBmC,KAAKmG,SAASM,EAAK1H,OAExB,yBAAKkB,UAAU,WACX,4BACI,kBAAC,IAAD,CAAWpC,GAAG,2BAEjBmC,KAAKmG,SAASM,EAAKT,aAEvBS,EAAKR,YAAYvG,OAAS,GACvB,yBAAKO,UAAU,kBACX,4BACI,kBAAC,IAAD,CAAWpC,GAAG,uBAEjB4I,EAAKR,YAAY/F,KAAI,SAACmG,EAASjI,GAC5B,OACI,uBAAGgC,IAAKhC,EAAGkI,KAAMD,EAAQP,MACrB,4BAAKO,EAAQvH,MACb,8BAAOuH,EAAQK,YAOvC,4BAAQzG,UAAU,SAASE,QAASH,KAAKqF,aAAzC,e,GA5EArE,aA+FLuB,cAAatB,aAVP,SAACzD,GAClB,MAAO,CACHgF,QAAShF,EAAMiI,iBAAiBkB,UAIhB,SAACzF,EAAUC,GAAX,MAAyB,CAC7CxD,gBAAiB,SAAC6E,GAAD,OAAatB,EAASvD,EAAgB6E,QAG/BvB,CAAuCiF,ICpG9CU,E,kDACjB,WAAYjI,GAAQ,IAAD,8BACf,cAAMA,IAYVkI,YAAc,SAAC1H,GACX,EAAKgE,SAAS,CAAE2D,WAAW,IAC3BC,OAAOC,iBAAiB,UAAW,EAAKC,YAfzB,EAkBnBA,UAAY,SAAC9H,GACT,GAAI,EAAK3B,MAAMsJ,UAAW,CACtB3H,EAAMC,kBACND,EAAM+D,iBAEN,IAAI9C,EAAMjB,EAAMiB,IAAI8G,cACpB,GAAY,YAAR9G,GAA6B,UAARA,GAA2B,QAARA,EACxC,OAAO,EAEX,EAAK+C,SAAS,CACVgE,MAAOhI,EAAMiI,SACbC,KAAMlI,EAAMmI,QACZd,IAAKrH,EAAMoI,OACXC,SAAUpH,EACV0G,WAAW,IAGfC,OAAOU,oBAAoB,UAAW,EAAKR,WAC3C,EAAKtI,MAAM+I,SApCA,EAwCnBC,QAAU,SAACC,EAAUC,EAASC,EAAWN,GACrC,OACIM,IAAc,EAAKtK,MAAM2J,OACzBU,IAAY,EAAKrK,MAAMgJ,KACvBoB,IAAa,EAAKpK,MAAM6J,MACxBG,IAAa,EAAKhK,MAAMgK,UA7Cb,EAiDnBO,OAAS,SAACH,EAAUC,EAASC,EAAWN,GAA+B,IAArBQ,EAAoB,uDAAb,aACrD,EAAK7E,SACD,CACIkE,KAAMO,EACNpB,IAAKqB,EACLV,MAAOW,EACPN,SAAUA,GAEdQ,IAzDW,EA6DnBC,OAAS,WACL,IAAI7H,EAAM,IAAM,EAAK5C,MAAMgK,SAO3B,OANI,EAAKhK,MAAM2J,QAAO/G,EAAM,IAAMA,GAE9B,EAAK5C,MAAMgJ,MAAKpG,EAAM,IAAMA,GAE5B,EAAK5C,MAAM6J,OAAMjH,EAAM,IAAMA,GAE1BA,GArEQ,EAwEnB8H,UAAY,SAACpE,GACT,IAAIqE,EAAOrE,EAAIsE,QAAQ,KACnBC,EAAOvE,EAAIwE,OAAO,EAAGH,GAErBhB,GAA+B,IAAvBkB,EAAKD,QAAQ,KACrB5B,GAA6B,IAAvB6B,EAAKD,QAAQ,KACnBf,GAA8B,IAAvBgB,EAAKD,QAAQ,KACpBhI,EAAM0D,EAAIwE,OAAOH,EAAO,GAE5B,EAAKJ,OAAOV,EAAMb,EAAKW,EAAO/G,IA9E9B,EAAK5C,MAAQ,CACTsJ,WAAW,EACXyB,MAAO,QACPpB,OAAO,EACPX,KAAK,EACLa,MAAM,EACNG,SAAU,KATC,E,qDAqFf,IAAIgB,GAAKxI,KAAKxC,MAAMsJ,UACpB,OACI,yBACI7G,UAAS,iBAAYD,KAAKxC,MAAMsJ,UAAY,aAAe,IAC3D3G,QAASH,KAAK6G,YACd4B,SAAU,IAERD,GAAK,2CACNA,GAAKxI,KAAKxC,MAAM6J,MAAQ,sCACxBmB,GAAKxI,KAAKxC,MAAMgJ,KAAO,qCACvBgC,GAAKxI,KAAKxC,MAAM2J,OAAS,uCACzBqB,GAAK,8BAAOxI,KAAKxC,MAAMgK,e,GAjGCxG,aCMnC0H,EAAS,CAAC,cAAe,aAAc,YAAa,gBAEpDC,E,kDACF,WAAYhK,GAAQ,IAAD,uBACf,cAAMA,IAoBV0G,YAAc,SAACrC,GACXA,EAAEE,iBACF,EAAKvE,MAAMpB,oBAAmB,IAvBf,EA0BnB+H,gBAAkB,SAACnG,GACfA,EAAMC,mBA3BS,EA8BnB6H,UAAY,SAAC9H,GACT,GAAI,EAAKR,MAAMiK,eAAgB,CAC3B,IAAIpB,EAAWrI,EAAMiB,IAAI8G,cACzB,GACiB,YAAbM,GACa,UAAbA,GACa,QAAbA,EAEA,OAAO,EAyBX,IAvBA,IAAII,EAAWzI,EAAMmI,QACjBO,EAAU1I,EAAMoI,OAChBO,EAAY3I,EAAMiI,SAClByB,GAAS,EAETC,EAAS,CACT,EAAKC,SAASC,QACd,EAAKC,UAAUD,QACf,EAAKE,UAAUF,QACf,EAAKG,cAAcH,QACnB,EAAKI,UAAUJ,QACf,EAAKK,SAASL,SAGdM,EAAY,CACZ,EAAK3K,MAAM4K,OACX,EAAK5K,MAAM6K,QACX,EAAK7K,MAAM8K,QACX,EAAK9K,MAAM+K,OACX,EAAK/K,MAAMgL,QACX,EAAKhL,MAAMiL,QAGNxL,EAAI,EAAGA,EAAI0K,EAAOpJ,SAAUtB,EAC7B0K,EAAO1K,GAAGuJ,QAAQC,EAAUC,EAASC,EAAWN,KAChD8B,EAAUlL,KACVyK,GAAS,GAIbA,IACA1J,EAAM+D,iBACN/D,EAAMC,qBAxEC,EA6EnByK,YAAc,WAAsB,IAArB7B,EAAoB,uDAAb,aAClB,EAAKe,SAASC,QAAQjB,QAAO,GAAO,GAAM,EAAO,KAAK,WAClD,EAAKkB,UAAUD,QAAQjB,QAAO,GAAM,GAAO,EAAO,KAAK,WACnD,EAAKmB,UAAUF,QAAQjB,QAAO,GAAM,GAAO,EAAO,KAAK,WACnD,EAAKoB,cAAcH,QAAQjB,QACvB,GACA,GACA,EACA,MACA,WACI,EAAKsB,SAASL,QAAQjB,QAClB,GACA,GACA,EACA,MACA,WACI,EAAKqB,UAAUJ,QAAQjB,QACnB,GACA,GACA,EACA,MACA,WACI,EAAK+B,SAAS,cAAe9B,sBAnGlD,EA+GnB+B,gBAAkB,WACd,EAAKF,YAAY,EAAKG,eAhHP,EAkInBA,aAAe,WACX,IAAIC,EAAI,IAAIC,KACZD,EAAEE,QAAQF,EAAEG,UAAY,QACxB,IACIC,EAAM,aADIJ,EAAEK,cACmB,WAEnCC,SAASC,OACL,kBAAoB,EAAKzB,SAASC,QAAQf,SAAWoC,EACzDE,SAASC,OACL,mBAAqB,EAAKvB,UAAUD,QAAQf,SAAWoC,EAC3DE,SAASC,OACL,mBAAqB,EAAKtB,UAAUF,QAAQf,SAAWoC,EAC3DE,SAASC,OACL,kBAAoB,EAAKrB,cAAcH,QAAQf,SAAWoC,EAC9DE,SAASC,OACL,kBAAoB,EAAKnB,SAASL,QAAQf,SAAWoC,EACzDE,SAASC,OACL,mBAAqB,EAAKpB,UAAUJ,QAAQf,SAAWoC,EAC3DE,SAASC,OAAS,aAAe,EAAKhN,MAAM8C,MAAQ+J,GApJrC,EAuJnBP,SAAW,SAACjK,GAAgC,IAA3B4K,EAA0B,uDAAb,aACrB/B,EAAOgC,SAAS7K,KACjBA,EAAM6I,EAAO,IAGjBA,EAAOiC,SAAQ,SAAUtE,GACrBkE,SAASK,eAAevE,GAASwE,SAAWxE,IAAYxG,KAG5D,EAAKsD,SAAS,CAAE7C,MAAOT,GAAO4K,IAhKf,EAgNnBK,UAAY,SAAC3L,GACT,EAAKgE,SAAS,CAAE4H,YAAa5L,EAAMiF,OAAO1D,SAjN3B,EAoNnBsK,YAAc,SAAC7L,GACX,EAAK2K,SAAS3K,EAAMiF,OAAO1D,MAAO,EAAKsJ,eArNxB,EAwNnBiB,cAAgB,SAACjI,GACbA,EAAEE,iBAEF,EAAKC,SAAS,CAAE+H,aAAa,IAC7B,EAAKnB,mBA5NU,EA+NnBoB,iBAAmB,WAGf,IAFA,IAAIC,EAAUb,SAASC,OAAOa,MAAM,MAE3BjN,EAAI,EAAGA,EAAIgN,EAAQ1L,OAAQtB,IAAK,CACrC,IAAIoM,EAASY,EAAQhN,GACjBkN,EAAQd,EAAOpC,QAAQ,KACvBtJ,EAAOwM,GAAS,EAAId,EAAOlC,OAAO,EAAGgD,GAASd,EAEjC,QADF1L,EAAKwJ,OAAO,EAAG,KAE1BiC,SAASC,OACL1L,EAAO,2CAGnB,EAAKqE,SAAS,CAAE+H,aAAa,IAC7B,EAAKrB,eA3OL,EAAKrM,MAAQ,CACTuN,YAAa,SACbzK,MAAO,cACP4K,aAAa,GAGjBnE,OAAOC,iBAAiB,UAAW,EAAKC,WAExC,IAAK,IAAI7I,EAAI,EAAGA,EAAIsK,EAAOhJ,SAAUtB,EACjCmM,SAASK,eAAelC,EAAOtK,IAAIyM,UAAW,EAXnC,OAaf,EAAK9B,SAAWpG,IAAM4I,YACtB,EAAKtC,UAAYtG,IAAM4I,YACvB,EAAKrC,UAAYvG,IAAM4I,YACvB,EAAKpC,cAAgBxG,IAAM4I,YAC3B,EAAKlC,SAAW1G,IAAM4I,YACtB,EAAKnC,UAAYzG,IAAM4I,YAlBR,E,gEAyKf,IALA,IAAIC,GAAc,EAEdC,EAAKlB,SAASC,OAAOa,MAAM,MAE3BjN,EAAI,EACDA,EAAIqN,EAAG/L,OAAQtB,IAAK,CAGvB,IAFA,IAAIoK,EAAIiD,EAAGrN,GAEY,MAAhBoK,EAAEkD,OAAO,IACZlD,EAAIA,EAAEmD,UAAU,GAGpB,IAAIC,EAAKpD,EAAEJ,QAAQ,KACftE,EAAM0E,EAAEF,OAAO,EAAGsD,GAClB/L,EAAM2I,EAAEF,OAAOsD,EAAK,GACZ,mBAAR9H,GACA9D,KAAK+I,SAASC,QAAQd,UAAUrI,GAChC2L,GAAc,GACC,oBAAR1H,GACP9D,KAAKiJ,UAAUD,QAAQd,UAAUrI,GACjC2L,GAAc,GACC,oBAAR1H,GACP9D,KAAKkJ,UAAUF,QAAQd,UAAUrI,GACjC2L,GAAc,GACC,mBAAR1H,GACP9D,KAAKmJ,cAAcH,QAAQd,UAAUrI,GACrC2L,GAAc,GACC,mBAAR1H,GACP9D,KAAKqJ,SAASL,QAAQd,UAAUrI,GAChC2L,GAAc,GACC,oBAAR1H,GACP9D,KAAKoJ,UAAUJ,QAAQd,UAAUrI,GACjC2L,GAAc,GACC,cAAR1H,IACP9D,KAAK8J,SAASjK,GACd2L,GAAc,GAIlBA,GACAxL,KAAKmD,SAAS,CAAE+H,aAAa,M,+BAqCjC,OACI,yBACIrN,GAAG,WACHsC,QAASH,KAAKqF,YACdpF,UAAS,wCACLD,KAAKrB,MAAM6D,QAAU,eAAiB,KAG1C,yBACIvC,UAAU,qBACVE,QAASH,KAAKsF,iBAEd,4BACIrF,UAAU,iBACVE,QAASH,KAAKqF,cAElB,yCACErF,KAAKxC,MAAM0N,aACT,yBAAKjL,UAAU,iBACX,uCACA,kPAOA,4BACIE,QAASH,KAAKiL,cACdhL,UAAU,UAFd,iCAMA,4BACIE,QAASH,KAAKqF,YACdpF,UAAU,oBAFd,iBAQR,yBACIwD,MAAO,CACHoI,QAAS7L,KAAKxC,MAAM0N,YAAc,QAAU,OAC5CY,SAAU,aAGd,+BACI,+BACI,4BACI,wBAAIC,QAAS,GAAb,sBAGR,+BASI,4BACI,wBAAIA,QAAS,GACT,kBAAC,EAAD,CACIxL,SAAUP,KAAKgL,YACfrH,KAAK,8BACLC,YAAY,QACZlD,MAAOV,KAAKxC,MAAM8C,OAElB,4BAAQI,MAAM,eAAd,SAGA,4BAAQA,MAAM,cAAd,QAGA,4BAAQA,MAAM,aAAd,OAGA,4BAAQA,MAAM,gBAAd,gBAOhB,+BACI,4BACI,wBAAIqL,QAAS,GAAb,aAGR,+BACI,4BACI,uCACA,4BACI,kBAAC,EAAD,CACIC,IAAKhM,KAAK+I,SACVrB,KAAM1H,KAAKgK,iBAIvB,4BACI,wCACA,4BACI,kBAAC,EAAD,CACIgC,IAAKhM,KAAKkJ,UACVxB,KAAM1H,KAAKgK,iBAIvB,4BACI,oCACA,4BACI,kBAAC,EAAD,CACIgC,IAAKhM,KAAKiJ,UACVvB,KAAM1H,KAAKgK,iBAIvB,4BACI,wCACA,4BACI,kBAAC,EAAD,CACIgC,IAAKhM,KAAKmJ,cACVzB,KAAM1H,KAAKgK,iBAIvB,4BACI,4CACA,4BACI,kBAAC,EAAD,CACIgC,IAAKhM,KAAKoJ,UACV1B,KAAM1H,KAAKgK,iBAIvB,4BACI,wCACA,4BACI,kBAAC,EAAD,CACIgC,IAAKhM,KAAKqJ,SACV3B,KAAM1H,KAAKgK,mBAM/B,4BAAQ/J,UAAU,SAASE,QAASH,KAAKqF,aAAzC,kBAGA,4BACIpF,UAAU,mBACVE,QAASH,KAAK+J,iBAFlB,oBAMA,4BACI9J,UAAU,mBACVE,QAASH,KAAKmL,kBAFlB,yB,GA/YDnK,aAsaRuB,cAAatB,aAVP,SAACzD,GAClB,MAAO,CACHgF,QAAShF,EAAMiI,iBAAiBwG,aAIhB,SAAC/K,EAAUC,GAAX,MAAyB,CAC7C5D,mBAAoB,SAACiF,GAAD,OAAatB,EAAS3D,EAAmBiF,QAGrCvB,CAAuC0H,IC9a9CuD,G,uKAEb,OACI,yBAAKjM,UAAU,eACX,2BACIM,SAAUP,KAAKrB,MAAM4B,SACrBG,MAAOV,KAAKrB,MAAM+B,MAClB+C,MAAO,CAAEC,gBAAgB,OAAD,OAAS1D,KAAKrB,MAAMgF,KAApB,MACxBlG,KAAMuC,KAAKrB,MAAMlB,KACjBmG,YAAa5D,KAAKrB,MAAMiF,cAE5B,2BAAO3D,UAAU,eAAeD,KAAKrB,MAAMiF,kB,GAXxB5C,aCFtBmL,GAAb,WACI,aAAc,oBACVnM,KAAKoM,oBAAsB,SAACrN,EAAMc,GAI9B,IAHA,IAAIwM,EAAMtN,EAAKuN,6BACXC,EAAMxN,EAAKyN,aAAaC,KAAKJ,GAC7BK,EAAQ,GACHtO,EAAI,EAAGA,EAAIyB,EAAIH,SAAUtB,EAC9BsO,EAAMC,KAAK9M,EAAI+M,WAAWxO,IAE9BW,EAAK8N,OAAON,EAAKG,IAErB1M,KAAK8M,iBAAmB,SAAC/N,EAAMc,GAC3B,IAAIwM,EAAMtN,EAAKuN,6BACfvN,EAAKyN,aAAaO,MAAMV,EAAKxM,IAbzC,kDAgBUd,GACF,IAAIiO,EAAUjO,EAAKyN,aAAaC,KAAK1N,EAAKkO,0BACpCC,EAAQnO,EAAKuN,6BACnB,OAAQU,GACJ,KAAK,EACD,IAAInN,EAAMd,EAAKyN,aAAaC,KAAKS,GACjClN,KAAKmN,UAAUtN,GACf,MAEJ,KAAK,EAID,IAHA,IAAIuN,EAAWrO,EAAKyN,aAAaC,KAAKS,GAClCR,EAAQ,GACRW,EAAO,KACqC,KAAxCA,EAAOtO,EAAKuO,OAAOF,EAAU,GAAG,KACpCV,EAAMC,KAAKU,GACXD,GAAY,EAEhB,IAAIG,EAASb,EAAMxM,KAAI,SAACsI,GAAD,OAAOgF,OAAOC,aAAajF,MAAIkF,KAAK,IAE3D,OADA1N,KAAK2N,aAAaJ,GACX,KAEX,KAAK,EAED,OADAvN,KAAK4N,WACE,OAEX,KAAK,EAED,OADA5N,KAAK6N,cACE,OAEX,KAAK,GAED,OADA7N,KAAK8N,aACE,OACX,QACI,MAAO,YAEf,OAAO,SAnDf,KCAaC,GACT,WAAYC,GACR,IAAK,IAAI5N,KADO,oBACA4N,EACZhO,KAAKI,GAAO4N,EAAO5N,GACnBJ,KAAKgO,EAAO5N,IAAQA,GCJnB6N,GAAb,qGAMmBvN,EAAOwN,GAClB,IAAIC,EAAezN,EAInB,OAH2C,KAAtCyN,EAAgB,GAAMD,EAAO,KAC9BC,GAAiB,IAAOD,GAASA,EAAQxN,GAEtCyN,IAXf,iCAmBsBzN,EAAOwN,GACrB,GAAIA,GAAQ,GACR,OAAO,KAEX,GAAI3O,KAAK6O,IAAI1N,GAAO6D,SAAS,GAAG7E,OAASwO,EACrC,OAAO,EAEX,IACIzO,GAAO,GAAMyO,EAAO,GAAM,EAE9B,QAHY,GAAMA,EAAO,KAEzBxN,EAAQV,KAAKqO,QAAQ3N,EAAOwN,KACR,GAAKxN,GAAS,GAAKjB,IA7B/C,+BAwCoB6O,GAA0B,IAAnBC,EAAmB,wDACtC,GAAID,EAAM5O,OAAS,EACf,OAAO,KAEP6O,GACAD,EAAME,UAGV,IADA,IAAIC,EAAU,EACLrQ,EAAI,EAAGA,EAAIkQ,EAAM5O,OAAQtB,IAC9BqQ,GAAqBH,EAAMlQ,IAAO,EAAIA,EAE1C,OAAOqQ,IAnDf,0BA2DeC,EAAQC,EAAQC,GAEvB,IADA,IAAI7K,EAAS2K,EAAOnK,SAASqK,GACtBD,EAAS5K,EAAOrE,QACnBqE,EAAS,IAAMA,EAEnB,OAAOA,IAhEf,0BAmEe2I,GAEP,IADA,IAAImC,EAAc,GACTzQ,EAAI,EAAGA,EAAIsO,EAAMhN,OAAQtB,IAAK,CACnC,IAAI0Q,EAAoBpC,EAAMtO,GAAGmG,SAAS,IAAIwK,cACb,IAA7BD,EAAkBpP,SAClBoP,EAAoB,IAAMA,GAE9BD,GAAeC,EAAoB,IAEvC,OAAOD,MA5Ef,KCGaG,GAAY,IAAIjB,GAAK,CAC9BkB,UAAW,EACXC,SAAU,EACVC,UAAW,EACXC,OAAQ,EACRC,QAAS,EACTC,YAAa,IAGJC,GAAa,IAAIxB,GAAK,CAC/ByB,OAAQ,EACRC,IAAK,EACLC,GAAI,IAGKC,GAAU,IAAI5B,GAAK,CAC5B6B,UAAW,EACXC,QAAS,EACTC,MAAO,EACPC,aAAc,EACdC,WAAY,EACZd,SAAU,EAEVe,OAAQ,EACR5C,KAAM,EACN6C,SAAU,IAGDC,GAAY,IAAIpC,GAAK,CAC9BqC,KAAM,EACNC,KAAM,EACNJ,OAAQ,EACRK,QAAS,EAETC,MAAO,EACPC,OAAQ,EACRC,OAAQ,EACRC,OAAQ,EAERC,WAAY,EACZC,cAAe,EAEfC,OAAQ,KAGCC,GAAb,WACI,WAAYC,EAAO7D,EAAOgB,GAAuC,IAAjC8C,EAAiC,uDAAtB,KAAMC,EAAgB,4EAC7DjR,KAAK+Q,MAAQA,EACb/Q,KAAKkN,MAAQA,EACblN,KAAKkO,KAAOA,EACZlO,KAAKgR,SAAWA,EAChBhR,KAAKiR,OAASA,EANtB,oDAWYC,GAA+C,IAApCC,EAAoC,uDAAvB,KAAMC,EAAiB,uDAAN,KAI7C,OAHApR,KAAKkR,UAAYA,EACjBlR,KAAKmR,WAAaA,EAClBnR,KAAKoR,SAAWA,EACTpR,OAff,oCAiBkBqR,EAAWC,GAA6C,IAA9BC,EAA8B,uDAAN,KAI5D,OAHAvR,KAAKqR,UAAYA,EACjBrR,KAAKuR,sBAAwBA,EAC7BvR,KAAKsR,cAAgBA,EACdtR,OArBf,0BASQ,OAAOA,KAAKkN,MAAQlN,KAAKkO,KAAO,MATxC,KAyBasD,GACT,WACIC,EACAC,EACAC,GAGF,IAFEC,EAEF,uDAF4B,KAC1BC,EACF,uDAD2B,KAC3B,oBACE7R,KAAKyR,OAASA,EACdzR,KAAK0R,MAAQA,EACb1R,KAAK2R,YAAcA,EACnB3R,KAAK4R,wBAA0BA,EAC/B5R,KAAK6R,uBAAyBA,GAIzBC,GAAb,WACI,WACIC,EACAC,EACAC,EACAC,EACAC,GAGF,IAFEC,EAEF,uDAFsB,KACpBC,EACF,uDADyB,GAcvB,IAAK,IAAIjU,KAbX,oBACE4B,KAAKsS,aAAe,KAOpBtS,KAAKuS,aAAe,KACpBvS,KAAKwS,iBAAmB,KACxBxS,KAAK+R,SAAWA,EAChB/R,KAAKgS,OAASA,EACdhS,KAAKiS,UAAY,GACHA,EACVjS,KAAKiS,UAAUA,EAAU7T,IAAM8T,EAAY9T,GAE/C4B,KAAKmS,SAAWA,EAChBnS,KAAKoS,kBAAoBA,EACzBpS,KAAKqS,qBAAuBA,EA3BpC,gDA6BQvO,EAAKpE,GAEL,IADA,IAAIqE,EAASD,EACJ1F,EAAI,EAAGA,EAAIsB,EAASoE,EAAIpE,OAAQtB,IACrC2F,EAAS,IAAMA,EAEnB,OAAOA,IAlCf,4BA2EU0O,GAGF,IAFA,IAAIC,EAAqBD,IAAgB,EACrCE,EAAW3S,KAAK4S,KAAKvH,MAAM,IACtBjN,EAAI4B,KAAKkO,KAAO,EAAG9P,GAAK,EAAGA,IAAK,CACrC,IAAIyU,EAA2B,EAArBH,EAEV,GADAA,IAAuB,EACH,MAAhBC,EAASvU,IAGT+F,SAASwO,EAASvU,GAAI,MAAQyU,EAC9B,OAAO,EAGf,OAAO,IAxFf,2BAqCQ,GAA0B,OAAtB7S,KAAKsS,aACL,OAAOtS,KAAKsS,aAEhB,IAAIQ,EAAQ,EACZ,IAAK,IAAI1U,KAAK4B,KAAKgS,OAAOP,OACtBqB,GAAS9S,KAAKgS,OAAOP,OAAOrT,GAAG8P,KAGnC,OADAlO,KAAKsS,aAAeQ,EACb9S,KAAKsS,eA7CpB,4BAgDQ,OAAO/S,KAAKwT,KAAK/S,KAAKkO,KAAO,KAhDrC,2BAmDQ,GAA0B,OAAtBlO,KAAKuS,aACL,OAAOvS,KAAKuS,aAGhB,IADA,IAAItC,EAAS,GACJ7R,EAAI,EAAGA,EAAI4B,KAAKkO,KAAM9P,GAAK,EAChC6R,GAAU,IAEd,IAAK,IAAI7R,KAAK4B,KAAKgS,OAAOP,OAAQ,CAC9B,IAAIuB,EAAQhT,KAAKgS,OAAOP,OAAOrT,GAC3B4S,EAAWhR,KAAKiS,UAAUe,EAAMjC,OAIpC,GAHiB,OAAbC,IACAA,EAAWgC,EAAMhC,UAEL,MAAZA,EAAkB,CAClB,IAAIiC,EAAShD,EAAO3H,OAAO,EAAGtI,KAAKkO,KAAO8E,EAAME,IAAM,GAClDC,EAAWlF,GAAMmF,IAAIpC,EAAUgC,EAAM9E,KAAM,GAC3CmF,EACgB,IAAhBL,EAAM9F,MAAc,GAAK+C,EAAO3H,QAAQ0K,EAAM9F,OAClD+C,EAASgD,EAASE,EAAWE,GAIrC,OADArT,KAAKuS,aAAetC,EACbjQ,KAAKuS,eAzEpB,+BA2FQ,GAA6B,MAAzBvS,KAAKwS,iBACL,OAAOxS,KAAKwS,iBAEhB,IAAIc,EAAO,EACX,IAAK,IAAIlV,KAAK4B,KAAKgS,OAAOP,OAAQ,CAC9B,IAAIuB,EAAQhT,KAAKgS,OAAOP,OAAOrT,GAC3B4S,EAAWhR,KAAKiS,UAAUe,EAAMjC,OACnB,OAAbC,IACAA,EAAWgC,EAAMhC,UAEL,MAAZA,IACAsC,GAAQtC,GAAYgC,EAAM9F,OAIlC,OADAlN,KAAKwS,iBAAmBc,EACjBA,MA1Gf,KAgHaC,GAAb,WAII,WACIrF,EACAsF,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GACF,oBACE/T,KAAKkO,KAAOA,EACZlO,KAAKwT,QAAUA,EACfxT,KAAKyT,aAAeA,EACpBA,EAAaO,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE3F,MAAQ4F,EAAE5F,SACxCtO,KAAK0T,mBAAqBA,EAC1B1T,KAAK2T,SAAWA,EAChB3T,KAAK4T,SAAWA,EAChB5T,KAAK6T,WAAaA,EAClB7T,KAAK8T,iBAAmBA,EACxB9T,KAAK+T,YAAcA,EAxB3B,iEA2ByBhC,GACjB,OAAQ,IA5BhB,qCA+BmBA,GACX,IAAK,IAAI3T,EAAI,EAAGA,EAAI4B,KAAKyT,aAAa/T,OAAQtB,IAC1C,GAAI4B,KAAKyT,aAAarV,GAAG2T,WAAaA,EAClC,OAAO3T,EAGf,OAAQ,IArChB,4CAuC0B4G,GAClB,IAAImP,EAAS,GACb,IAAK,IAAI/V,KAAK4B,KAAKyT,aAAc,CAC7B,IAAItO,EAAcnF,KAAKyT,aAAarV,GACpC,GAAI4G,EAAK+J,cAAcqF,UAAUjP,EAAY4M,UAAW,CACpD,IAAIsC,EAAWlP,EAAY6M,OAAON,MAAM4C,KAAKtP,GAEzCqP,GACAA,EAAS,GAAGtF,gBAAkB5J,EAAY4M,UAE1CoC,EAAOxH,KAAKxH,IAIxB,OAAOgP,IArDf,kCAuDgBhP,EAAaoP,GACrB,IAAIC,EAASrP,EAAY6M,OAAOL,YAChC6C,EAASA,EAAOC,QAAQ,QAAStP,EAAY4M,UAC7C,IAAK,IAAI3T,EAAI,EAAGA,EAAI+G,EAAY6M,OAAOP,OAAO/R,OAAQtB,IAAK,CACvD,IAAI4U,EAAQ7N,EAAY6M,OAAOP,OAAOrT,GAClCiT,EAAY2B,EAAM3B,UACL,MAAbA,IACAmD,EAASA,EAAOC,QACZ,OAASzB,EAAM3B,UACf2B,EAAM1B,gBAAkBtC,GAAUE,SAC5BlP,KAAK2T,SAASY,EAAKlD,IACnBkD,EAAKlD,GAAW9M,aAIlC,OAAOiQ,MAtEf,KCpMAhH,OAAOkH,UAAUC,iBAAmB,WAGhC,IAFA,IAAIC,EAAQ5U,KAAKqL,MAAM,KACnBiD,EAAQ,GACHlQ,EAAI,EAAGA,EAAIwW,EAAMlV,OAAQtB,IAAK,CACnC,IAAIsC,EAAQyD,SAASyQ,EAAMxW,GAAI,IAC1ByW,MAAMnU,IACP4N,EAAM3B,KAAKjM,GAGnB,OAAO4N,GAIXd,OAAOkH,UAAUN,UAAY,SAAUU,GACnC,OAAO9U,KAAKsI,OAAO,EAAGwM,EAAOpV,UAAYoV,GAGtC,IAAMC,GAAO,IAAIhH,GAAK,CACzB5I,YAAa,EACbkL,KAAM,EACNT,UAAW,EACXoF,MAAO,IAGEC,GAAb,WACI,WAAYC,EAAKxG,GAAQ,oBACrB1O,KAAKmV,gBAAkB,KACvBnV,KAAKoV,WAAY,EACjBpV,KAAKyS,YAAc,GACnBzS,KAAKkV,IAAMA,EACXlV,KAAK0O,OAASA,EACd1O,KAAKqV,KAAON,GAAKC,MACjBhV,KAAKsV,gBAAkB,GACvBtV,KAAKuV,qBAAuB,GATpC,2DAcmBC,GAAwB,WAAbpF,IAAa,yDAC/BP,EAAU2F,EAAUC,eAAe9F,GAAQE,SAC3C6F,EAAM7F,EAAQyE,KAAKtU,KAAKkV,KAAK,GAC7BpF,EAAQ0F,EAAUC,eAAe9F,GAAQG,OACzC6F,EAAS7F,EAAMwE,KAAKoB,GAGxB,GAFA1V,KAAK8P,MAAQ6F,EAAO,GACpB3V,KAAK4V,UAAYD,EAAO,IAAM,GACM,OAAhC,OAAOrB,KAAKtU,KAAK4V,WACjB,OAAOxF,EAEX,GAAmD,MAA/CoF,EAAUC,eAAe9F,GAAQC,WAAoB,CACrD,IAAIyE,EAAWwB,OACXL,EAAUC,eAAe9F,GAAQC,YACnC0E,KAAKtU,KAAK4V,WACK,OAAbvB,IACArU,KAAK4P,UAAY4F,EAAU3B,WAAWQ,EAAS,IAC/CrU,KAAK8V,cAAgBzB,EAAS,IAGtC,GAAIjE,EAAM,CACN,QAAuB2F,IAAnB/V,KAAK4P,UAAyB,CAC9B,OAAQ5P,KAAK4P,WACT,KAAKO,GAAUE,KAEX,OADArQ,KAAKqV,KAAON,GAAKnF,WACV,EACX,KAAKO,GAAUC,KACXpQ,KAAKqV,KAAON,GAAKnF,UACjB,MACJ,QACI5P,KAAKgW,cAAL,yBAER,OAAO,EAkBX,GAhBAhW,KAAKqV,KAAON,GAAK5P,YACjBqQ,EAAUS,eAAexC,aAAa9I,SAAQ,SAACxF,GAC3C,IAAI+Q,EAAQ/Q,EAAY6M,OAAON,MAAM4C,KAAK,EAAKsB,WAY/C,OAVc,OAAVM,GACAA,EAAM,GAAGnH,gBAAkB5J,EAAY4M,UAEvC,EAAKwD,qBAAqB5I,KAAK,CAC3BxH,EACA+Q,EAAMC,MAAM,GACZ,GACA,OAGS,OAAVD,KAE8B,IAArClW,KAAKuV,qBAAqB7V,OAE1B,OADAM,KAAKgW,cAAL,6CACO,EAEX,IAAII,EAAUpW,KAAKuV,qBAAqB,GAAG,GAAGjH,MAG9C,OAFCtO,KAAKyS,YAAc,IAAI/S,OAAS0W,EACjCpW,KAAKyS,YAAY4D,KAAK,IACf,EAEP,IAAIvD,EAAQ,KACRwD,EAAsB,EAC1B,QAAuBP,IAAnB/V,KAAK4P,UAEL,OADA5P,KAAKqV,KAAON,GAAK1E,KACTrQ,KAAK4P,WACT,KAAKO,GAAUE,KACXrQ,KAAKqV,KAAON,GAAKnF,UACjB,MACJ,KAAKO,GAAUC,KAEX,OADApQ,KAAKqV,KAAON,GAAKnF,WACV,EACX,KAAKO,GAAUM,OACXqC,EAAQA,GAAS,EAErB,KAAK3C,GAAUK,OACXsC,EAAQA,GAAS,EAErB,KAAK3C,GAAUI,MACXuC,EAAQA,GAAS,EACjB,IAAIyD,EAAWvW,KAAK8V,cAAczK,MAAM,YACvCrL,KAAKyS,YAAc,IAAI/S,OACpB6W,EAAS7W,OAASoT,EACtB9S,KAAKyS,YAAY4D,KAAK,GACtBrW,KAAKqV,KAAON,GAAK1E,KACjB,MACJ,KAAKF,GAAUG,QACXgG,EAAsB,EAE1B,KAAKnG,GAAUF,OACsC,OAA7CuF,EAAUC,eAAe9F,GAAQM,UACjCjQ,KAAKgW,cAAL,0DAEJ,IAAIE,EAAQV,EAAUC,eAClB9F,GAAQM,QACVqE,KAAKtU,KAAK8V,eACZ,GAAc,OAAVI,EACAlW,KAAKgW,cAAL,0BAAwChW,KAAK8V,cAA7C,UACG,CAOH,IANA,IAAIpE,EAAQmE,OACRL,EAAUgB,kBACV,KAEAC,EAAa,GACbC,EAAQ,KACJA,EAAQhF,EAAM4C,KAAK4B,EAAM,KAC7BO,EAAW9J,KAAK+J,GAIpB,IAAK,IAAIlO,KAFRxI,KAAKyS,YAAc,IAAI/S,OACpB+W,EAAW/W,OAAS4W,EACVG,EAAY,CACtB,IAAIE,EAAYnJ,OAAOiJ,EAAWjO,IAC9B9H,EAAQiW,EAAU/J,WAAW,GAC7B+J,EAAUjX,OAAS,IACnBgB,EACIkW,GAAUC,kBACNF,EAAU,KAGtB3W,KAAKyS,YAAYjK,GAAK9H,EAEE,IAAxB4V,IACAtW,KAAKyS,YACDzS,KAAKyS,YAAY/S,OAAS,GAC1B,GAGZM,KAAKqV,KAAON,GAAK1E,KACjB,MACJ,QACIrQ,KAAKgW,cAAL,8BAEL,CACH,IAAIc,GAAgB,EACpBtB,EAAUS,eAAexC,aAAa9I,SAAQ,SAACxF,GAC3C,IAAI+Q,EAAQ/Q,EAAY6M,OAAON,MAAM4C,KAAK,EAAKsB,WAEjC,OAAVM,GACAA,EAAM,GAAGnH,gBAAkB5J,EAAY4M,WAEvC+E,GAAgB,MAIpB9W,KAAKgW,cADLc,EACA,uCAEA,qCAGR,OAAO,IAhKnB,mCAmKiBtB,EAAWuB,EAAOC,GAC3B,IAAIC,GAAa,EACjBC,EAAqB,IAAK,IAAI9Y,KAAK4B,KAAKuV,qBAAsB,CAC1D,IAAI4B,EAAsBnX,KAAKuV,qBAAqBnX,GAChD+G,EAAcgS,EAAoB,GAClC5C,EAAO4C,EAAoB,GAC3B1E,EAActN,EAAYiS,SAC9B,IAAK,IAAIC,KAAKlS,EAAY6M,OAAOP,OAAQ,CACrC,IAAIuB,EAAQ7N,EAAY6M,OAAOP,OAAO4F,GACtC,QAAwBtB,IAApB/C,EAAM3B,UAAV,CAGA,IAAIiG,EAAUtE,EAAM9B,UAChBhD,EAAOoJ,GAAWtE,EAAM9E,KACxBqJ,EAAQ,KAkBZ,GAA2B,QAhBvBA,EADAvE,EAAM1B,eAAiBtC,GAAUK,QACzBlK,EAAY6M,OAAOJ,wBACvB2C,EAAKvB,EAAM3B,WACXrC,GAAUK,QACVnB,EACA8I,EACAxB,GAGIA,EAAUgC,QACdjD,EAAKvB,EAAM3B,WACX2B,EAAM1B,cACNpD,EACA8I,EACA7R,EAAYmJ,QAGVmJ,aAAuB,CAC7BN,EAAoB,GAAKI,EAAME,aAC/B,SAASP,EACN,GAAsB,OAAlBK,EAAMG,SAAoC,OAAhBH,EAAM7W,MAAgB,CACvD6W,EAAMG,QAAQpC,gBAAgB3I,KAAK3M,MACnCA,KAAKoV,WAAY,EACjB,MAAM8B,EAEN,IAAIhI,EAAWqI,EAAM7W,MACjBiX,EAAW3E,EAAM7B,WACjByG,EAAS5E,EAAM5B,cAEH2E,IAAZuB,QACavB,IAAb4B,QACW5B,IAAX6B,IAEA1I,IAAayI,EAEbzI,IAAa,GADF0I,EAASD,EAAW,GACL,GAG9BlF,IADavD,GAAa,GAAKhB,GAAQ,IACd8E,EAAM9F,OAGvC,IAAK,IAAI9O,EAAI,EAAGA,EAAI+G,EAAYmJ,MAAOlQ,GAAK,EACxC+Y,EAAoB,GAAGxK,KAAmB,IAAd8F,GAC5BA,KAAiB,EAErBwE,GAAa,EAEjB,GAAIA,EAAY,CAEZ,IAAIY,EAA8B7X,KAAKuV,qBAAqBuC,QACxD,SAACC,GAAD,OAAkB,OAAVA,EAAG,MACb,GACF/X,KAAKyS,YAAcoF,EAA4B,GAGnD,IAAIJ,EAAe,KAQnB,QAPsBR,GAAcjX,KAAKoV,aAErCqC,EACIzX,KAAKuV,qBACDvV,KAAKuV,qBAAqB7V,OAAS,GACrC,IAEH+X,IAjPf,mCAmPiBjC,EAAWuB,EAAOC,GAC3B,IAAIS,EAAe,KACf3E,EAAQ,KACZ,OAAQ9S,KAAK4P,WACT,KAAKO,GAAUM,OACXqC,EAAQA,GAAS,EAErB,KAAK3C,GAAUK,OACXsC,EAAQA,GAAS,EAErB,KAAK3C,GAAUI,MACXuC,EAAQA,GAAS,EAEjB,IADA,IAAIyD,EAAWvW,KAAK8V,cAAczK,MAAM,WAC/BjN,EAAI,EAAGA,EAAImY,EAAS7W,OAAQtB,GAAK,EAAG,CACzC,IAAIiI,EAAUkQ,EAASnY,GACnB8P,EAAO4E,GAAS,EAChByE,EAAQ/B,EAAUgC,QAClBnR,EACA2I,GAAUC,UACVf,EACA8I,EACA,GAEJ,GAA2B,OAAvBO,EAAME,aAAuB,CAC7BA,EAAeF,EAAME,aACrB,MACG,GAAsB,OAAlBF,EAAMG,SAAoC,OAAhBH,EAAM7W,MAAgB,CACvD6W,EAAMG,QAAQpC,gBAAgB3I,KAAK3M,MACnCA,KAAKoV,WAAY,EACjB,MAGA,IADA,IAAI4C,EAAST,EAAM7W,MACV2W,EAAI,EAAGA,EAAIvE,EAAOuE,GAAK,EAAG,CAC/B,IAAIjI,EAAS0D,EAAQ1U,EACrB4B,KAAKyS,YAAY4E,EAAIjI,GAAmB,IAAT4I,EAC/BA,KAAY,GAIxB,MACJ,KAAK7H,GAAUG,QACf,KAAKH,GAAUF,OAEX,MACJ,QACIjQ,KAAKgW,cAAL,0BAER,OAAOyB,IAlSf,+BAoSajC,EAAWuB,EAAOC,GACvBhX,KAAKoV,WAAY,EACjB,IAAIjB,EAAS,CAAC,MAAM,GACpB,OAAQnU,KAAKqV,MACT,KAAKN,GAAK5P,YACNgP,EAAO,GAAKnU,KAAKiY,aAAazC,EAAWuB,EAAOC,GAChD,MACJ,KAAKjC,GAAK1E,KACN8D,EAAO,GAAKnU,KAAKkY,aAAa1C,EAAWuB,EAAOC,GAKxD,IAAImB,EAAc3C,EAAU4C,aAAapY,KAAK8P,OAI9C,QAHoBiG,IAAhBoC,IACAA,EAAY,GAAKnB,GAEH,OAAd7C,EAAO,GACP,IAAK,IAAI/V,KAAK4B,KAAKsV,gBAAiB,CAChC,IAAI+C,EAASrY,KAAKsV,gBAAgBlX,GAClC,GAA+B,OAA3Bia,EAAOlD,gBAA0B,CACjC,IAAImD,EAAeD,EAAO5F,YAAY/S,OAClC6Y,EAAcF,EAAOjW,SACrBoT,EACAuB,EACAsB,EAAOlD,iBAEX,GAAIkD,EAAOjD,eAEJ,CACH,GAAImD,EAAY,GAAI,CAChBpE,EAAO,IAAK,EACZ,MAEJ,GAAIkE,EAAO5F,YAAY/S,SAAW4Y,EAAc,CAC5CnE,EAAO,IAAK,EACZ,cAMhBnU,KAAKgW,cAAgB7B,EAAO,GAEhC,OAAOA,KAhVf,qCAWyBqE,GACjB,OAAOA,EAAKnN,MAAM,MAAMnL,KAAI,SAAC8E,EAAMjH,GAAP,OAAiB,IAAIkX,EAAKjQ,EAAMjH,UAZpE,KAoVa6Y,GAAb,WACI,WAAYX,EAAgBwC,GAA8B,IAAlBC,EAAkB,uDAAN,KAKhD,GALsD,oBACtD1Y,KAAKoY,aAAe,GACpBpY,KAAK8T,iBAAmBmC,EAAenC,iBACvC9T,KAAKyV,eAAiB,GACtBzV,KAAK0Y,UAAYA,EACbzC,EAAeR,eACfzV,KAAKyV,eAAiBQ,EAAeR,oBAClC,GAAIQ,EAAerC,SAAU,CAChC,IAAI+E,EAAQ1C,EAAerC,SAE3B,GADA5T,KAAKyV,eAAiB,GAClBkD,EAAMhJ,GAAQC,WAAY,CAC1B,IAAIrK,EAAUqR,EAAUrR,QACpB0Q,EAAerC,SAASjE,GAAQC,YAEhCrK,IACAvF,KAAKyV,eAAe9F,GAAQC,WAAaiG,OACrCtQ,EAAU,uBAItB,GAAIoT,EAAMhJ,GAAQE,SAAU,CACxB,IAAItK,EAAUqR,EAAUrR,QAAQoT,EAAMhJ,GAAQE,UAC1CtK,IACAvF,KAAKyV,eAAe9F,GAAQE,SAAWgG,OACnC,UAAYtQ,EAAU,UAIlC,GAAIoT,EAAMhJ,GAAQG,OAAQ,CACtB,IAAIvK,EAAUqR,EAAUrR,QAAQoT,EAAMhJ,GAAQG,QAC1CvK,IACAvF,KAAKyV,eAAe9F,GAAQG,OAAS+F,OACjC,+BACItQ,EACA,iBAIhB,GAAIoT,EAAMhJ,GAAQT,UAAW,CACzB,IAAI3J,EAAUqR,EAAUrR,QAAQoT,EAAMhJ,GAAQT,WAC1C3J,IACAvF,KAAKyV,eAAe9F,GAAQT,UAAY2G,OACpCtQ,EAAU,aAOtB,GAHAvF,KAAKyV,eAAe9F,GAAQiJ,SAAW/C,OACnC,YAAce,EAAUiC,UAAY,kBAEpCF,EAAMhJ,GAAQK,YAAa,CAC3B,IAAIzK,EAAUqR,EAAUrR,QAAQoT,EAAMhJ,GAAQK,aAC9C,GAAIzK,EAAS,CACT,IAAIuT,EAAYvT,EAAQ7F,OAAS,EAAI,GAAK,KAAO6F,EAEjDvF,KAAKwW,kBACD,kBACAI,EAAUmC,qBACVD,EACA,mCACJ9Y,KAAKyV,eAAe9F,GAAQtC,MAAQwI,OAChCtQ,EAAU,IAAMvF,KAAKwW,kBAAoB,IAAMjR,SAIvDvF,KAAKwW,kBACD,kBACAI,EAAUmC,qBACV,mCAER,GAAIJ,EAAMhJ,GAAQI,cAAe,CAC7B,IAAIxK,EAAUqR,EAAUrR,QAAQoT,EAAMhJ,GAAQI,eAC1CxK,IACAvF,KAAKyV,eAAe9F,GAAQM,QAAU4F,OAClCtQ,EAAU,IAAMvF,KAAKwW,kBAAoB,KAAOjR,UAK5DT,QAAQD,IACJ,8EAGR7E,KAAK6T,WAAaoC,EAAepC,WACjC7T,KAAKyY,WAAaA,GAA0BxC,EAAewC,WAC3DzY,KAAKiW,eAAiBA,EArF9B,oDAwFY7F,EAAM3S,EAAMyQ,EAAM8I,EAASgC,GAC/B,IAAI7E,EAAS,CACTsD,aAAc,KACd/W,MAAO,KACPgX,QAAS,MAEb,OAAQja,GACJ,KAAKuR,GAAUE,SACX,IAAInR,EAAQiC,KAAKiW,eAAetC,SAASvL,QAAQgI,GACjD,IAAe,IAAXrS,EAEA,OADAoW,EAAOzT,MAAQ3C,EACRoW,EAEX,IAAI8E,EAAa,KACjB,GAAIjZ,KAAKyV,eAAe9F,GAAQT,UAAW,CACvC,IAAIgH,EACAlW,KAAKyV,eAAe9F,GAAQT,UAAUoF,KAAKlE,GACjC,OAAV8F,IACA+C,EAAa/C,EAAM,IAG3B,OAAmB,OAAf+C,GAKgC,MADpCA,EAAa9U,SAAS8U,EAAY,MACf,GAAM/K,IAJrBiG,EAAOsD,aAAP,oCAAmDrH,EAAnD,KACO+D,IAOXA,EAAOzT,MAAQuY,EACR9E,GACX,KAAKnF,GAAUI,OACf,KAAKJ,GAAUC,UAEX,IAAIvO,EAAQ,KACRwY,EAAYlZ,KAAKoY,aAAahI,GAClC,QAAkB2F,IAAdmD,EAAyB,CAEzB,GADA/E,EAAOuD,QAAUwB,EAAU,GACN,OAAjBA,EAAU,GACV,OAAO/E,EAEXzT,EAAQwY,EAAU,GAEtB,GAAc,OAAVxY,GAAkBV,KAAKyV,eAAe9F,GAAQtC,MAAO,CACrD,IAAI8L,EAAatD,OACb7V,KAAKyV,eAAe9F,GAAQtC,OAC9BiH,KAAKlE,GACP,GAAmB,OAAf+I,QAAyCpD,IAAlBoD,EAAW,KAClCzY,EAAQyY,EAAW,GAAGvM,WAAW,IACrB,IAKR,OAJAuH,EAAOsD,aACH,uBACA0B,EAAW,GACX,gBACGhF,EAInB,GACc,OAAVzT,QACyCqV,IAAzC/V,KAAKyV,eAAe9F,GAAQiJ,SAC9B,CACE,IAAIlM,EAAQmJ,OACR7V,KAAKyV,eAAe9F,GAAQiJ,UAC9BtE,KAAKlE,GACP,GAAc,OAAV1D,EAAgB,CAChB,IAAIkC,EAAQgI,EAAUwC,QAAQ1M,EAAM,KAAO,GACvC2M,EAAgB3M,EAAM,GAC1BhM,EAAQyD,SAASkV,EAAezK,IASxC,OANc,OAAVlO,GAAkBjD,IAASuR,GAAUI,SACrC1O,GAASsW,EACLhX,KAAK8T,mBACLpT,GAASsY,IAGH,OAAVtY,GAAkBmU,MAAMnU,IACxByT,EAAOsD,aAAP,iCAAgDrH,EAAhD,KACO+D,IACkC,IAAlClG,GAAMqL,WAAW5Y,EAAOwN,IAC/BiG,EAAOsD,aAAP,0BAAyCrH,EAAzC,KACO+D,IAEXA,EAAOzT,MAAQA,EACRyT,GACX,QAEI,OADAA,EAAOsD,aAAP,iDAAgEzI,GAAUvR,GAA1E,MACO0W,KAjLvB,+BA0Ma4C,EAAOwC,GACZxC,EAAM7W,KAAI,SAAC8E,GAAD,OAAWA,EAAKmQ,gBAAkB,QAC5C,IAAIqE,EAAS,GACTC,GAAoB,EACpBzC,EAAU,EACd,IAAK,IAAI5Y,KAAK2Y,EAAO,CACjB,IAAI/R,EAAO+R,EAAM3Y,GACjB,OAAQmb,GACJ,KAAK,EACDE,EAAoBzU,EAAK0U,eACrB1Z,KACAyZ,QAEuB1D,IAAvB/Q,EAAKgR,eACLwD,EAAO7M,KAAK3H,QAEG+Q,IAAf/Q,EAAK8K,QACL9P,KAAKoY,aAAapT,EAAK8K,OAAS,CAAC9K,EAAM,OAE3C,MACJ,QACIA,EAAKmQ,gBAAkB6B,EACvB,IAAI2C,EAAM3U,EAAK5C,SAASpC,KAAM+W,EAAOC,GAIrC,GAHe,OAAX2C,EAAI,IACJH,EAAO7M,KAAK3H,GAEZ2U,EAAI,GACJ,OAAO,KAEX3C,GAAWhS,EAAKyN,YAAY/S,QAGxC,OAAO8Z,KA1Of,+BAoLmBI,GACX,GAAoB,IAAhBA,EAAKla,OACL,OAAO,KAGX,IADA,IAAI6F,EAAU,GACLnH,EAAI,EAAGA,EAAIwb,EAAKla,OAAQtB,IAAK,CAClC,IAAIyb,EAAUD,EAAKxb,GACnB,GAAgB,OAAZyb,EAIA,OAHA/U,QAAQD,IACJ,8EAEG,KAEK,KAAZU,EACAA,EAAU,MAEVA,GAAW,IAEfA,GAAWsU,EAEf,OAAOtU,EAAU,QAxMzB,KA8OAqR,GAAUwC,QAAU,CAChBlF,EAAG,EACH4F,EAAG,EACH7P,EAAG,GACH8P,EAAG,IAEPnD,GAAUiC,UAAYmB,OAAOC,KAAKrD,GAAUwC,SAAS1L,KAAK,IAE1DkJ,GAAUC,kBAAoB,CAC1B,EAAK,EACL,EAAK,EACL,EAAK,GACL,EAAK,GACL,IAAK,GACL,IAAK,IAGTD,GAAUmC,qBAAuBiB,OAAOC,KAAKrD,GAAUC,mBAAmBnJ,KACtE,IC9mBG,IAAMwM,GAAb,WACI,aAAc,oBACVla,KAAKma,KAAO,GAFpB,0DAMQ,OAAOH,OAAOC,KAAKja,KAAKma,QANhC,8BASYC,EAAcpb,EAAYqb,GAA2B,IAAhB9U,EAAgB,uDAAN,KAC/C/G,EAAMwB,KAAKma,KAAKC,GACpB,QAAYrE,IAARvX,EACA,oBAAc4b,EAAd,gBAKJ,IAAK,IAAIha,KAHO,OAAZmF,IACAA,EAAU/G,EAAI+G,SAEFA,EACZ,QAAyBwQ,IAArBvX,EAAI+G,QAAQnF,GACZ,uBAAiBA,EAAjB,qBAAiCga,EAAjC,oBAGR,IAAInE,EAAiBzX,EAAI8b,UAAU/U,GACnC,OAAO,IAAI/G,EAAIO,KAAKC,EAAYqb,EAAWpE,OAvBnD,KA2BasE,GAAb,+FAEWvD,EAAS1I,GACZ,GAAK0I,EAAU1I,IAAW,EAAItO,KAAKhB,WAC/B,OAAO,KAGX,IADA,IAAImV,EAAS,GACJ/V,EAAI,EAAGA,EAAIkQ,EAAOlQ,IACvB+V,EAAOxH,KAAK3M,KAAKwE,OAAOwS,EAAU5Y,IAEtC,OAAO+V,IAVf,6BAcW6C,EAAS1I,GACZ,GAAI0I,EAAU,EACV,OAAO,EAEX,GAAIA,EAAU1I,EAAM5O,OAASM,KAAKhB,WAC9B,OAAO,EAEX,IAAK,IAAIZ,EAAI,EAAGA,EAAIkQ,EAAM5O,OAAQtB,IAC9B4B,KAAKwE,OAAOwS,EAAU5Y,GAAKkQ,EAAMlQ,GAErC,OAAO,IAxBf,+BA2BQ,IAAIoc,EAAQxa,KAAKiW,eAAexC,aAChCzT,KAAKya,QAAU,KACfza,KAAK0a,UAAY,GACjB,IAAK,IAAItc,EAAI,EAAGA,EAAIoc,EAAM9a,OAAQtB,IAC9B,GAAIoc,EAAMpc,GAAG8X,MAAMlW,KAAK2a,SAAU,CAC9B3a,KAAKya,QAAUD,EAAMpc,GACrB,MAGR,GAAqB,OAAjB4B,KAAKya,QACL,OAAO,KAEX,IAAIG,EAAY5a,KAAKya,QAAQzI,OAAOP,OACpC,IAAK,IAAIrT,KAAKwc,EAAW,CACrB,IAAI5H,EAAQ4H,EAAUxc,GACtB,GAAuB,MAAnB4U,EAAM3B,UAAmB,CACzB,IAAIwJ,EAAQ7H,EAAM7B,WACdzQ,GACEV,KAAK2a,UAAY3H,EAAM9F,OACnB,GAAK8F,EAAM9E,MAAQ,IACzB2M,EACA7H,EAAM1B,gBAAkBtC,GAAUK,UAClC3O,EAAQV,KAAKya,QAAQzI,OAAOH,uBACxBnR,EACAV,KAAK8a,KAGb9a,KAAK0a,UAAU1H,EAAM3B,WACjBrR,KAAK0a,UAAU1H,EAAM3B,YAAc,EACvCrR,KAAK0a,UAAU1H,EAAM3B,WACjBrR,KAAK0a,UAAU1H,EAAM3B,WAAa3Q,EAElCV,KAAKya,QAAQzI,OAAOP,OAAOrT,GAAG6S,QAC9B+B,EAAM1B,gBAAkBtC,GAAUE,WAElClP,KAAK0a,UAAU1H,EAAM3B,WAAapD,GAAMI,QACpCrO,KAAK0a,UAAU1H,EAAM3B,WACrB2B,EAAM9B,UAAY8B,EAAM9B,UAAY8B,EAAM9E,QAK1D,OAAOlO,KAAKiW,eAAe8E,YAAY/a,KAAKya,QAASza,KAAK0a,aArElE,gCAyEQ,OAAO1a,KAAKya,QAAQtI,SAASnS,UAzErC,KA6EAua,GAAKS,QAAU,IAAId,GCtGJ,QACX/N,UAAWA,GACXoD,WAAYA,GACZqH,UAAWA,GACX3B,KAAMA,GACNsF,KAAMA,ICDJU,G,4MAGFC,eAAiB,SAAC/b,GACd,EAAKR,MAAMV,mBACPkB,EAAMiF,OAAO1D,MACb,EAAK/B,MAAMwc,iBAAiB5c,YAC5B,EAAKI,MAAMwc,iBAAiB3c,M,EAIpCsM,UAAY,SAAC3L,GACT,EAAKR,MAAMV,mBACP,EAAKU,MAAMwc,iBAAiB7c,UAC5B,EAAKK,MAAMwc,iBAAiB5c,YAC5BY,EAAMiF,OAAO1D,Q,EAIrB0a,iBAAmB,SAACjc,IAGW,KAAvBA,EAAMiF,OAAO1D,OAFN,aAEyB2a,KAAKlc,EAAMiF,OAAO1D,SAClD,EAAK/B,MAAMV,mBACP,EAAKU,MAAMwc,iBAAiB7c,UAC5Ba,EAAMiF,OAAO1D,MACb,EAAK/B,MAAMwc,iBAAiB3c,M,EAKxC8c,aAAe,SAACnc,GACZA,EAAM+D,iBACN,EAAKvE,MAAM4c,iB,uDAIX,IAAIC,EAAOC,GAAMlB,KAAKS,QAAQU,cAE9B,OACI,yBAAK7d,GAAG,iBAAiBoC,UAAU,wBAC/B,0BAAM0b,SAAU3b,KAAKsb,cACjB,kBAAC,GAAD,CACI/a,SAAUP,KAAKkb,eACfxa,MAAOV,KAAKrB,MAAMwc,iBAAiB7c,UACnCqF,KAAK,8BACLC,YAAY,YACZ/F,GAAG,aAEP,kBAAC,EAAD,CACI0C,SAAUP,KAAK8K,UACfpK,MAAOV,KAAKrB,MAAMwc,iBAAiB3c,IACnCmF,KAAK,8BACLC,YAAY,mBAEX4X,EAAKtb,KAAI,SAAC1B,EAAKJ,GACZ,OACI,4BAAQgC,IAAK5B,EAAKkC,MAAOlC,GACpBA,OAKjB,kBAAC,GAAD,CACI+B,SAAUP,KAAKob,iBACf1a,MAAOV,KAAKrB,MAAMwc,iBAAiB5c,YACnCoF,KAAK,gCACLC,YAAY,sBACZnG,KAAK,WAGT,2BACIwC,UAAU,SACVS,MAAM,iBACNjD,KAAK,iB,GA1EDuD,aAAtBia,GACKlY,aAAe,WAiF1B,IAYeR,eACXtB,aAboB,SAACzD,GACrB,MAAO,CACHqB,KAAMrB,EAAMqB,KACZS,YAAa9B,EAAM8B,YACnB6b,iBAAkB3d,EAAM2d,qBAIL,SAACja,EAAUC,GAAX,MAAyB,CAChDlD,mBAAoB,SAACC,EAAGC,EAAGC,GAAP,OAAa8C,EAASjD,EAAmBC,EAAGC,EAAGC,QAInE6C,CAA6Cga,KCnG5BW,G,kDAGjB,WAAYjd,GAAQ,IAAD,8BACf,cAAMA,IAUVkd,gBAAkB,SAAChc,EAAKic,EAASC,GAC7B,IAoBIvH,EApBAlQ,EAAQzE,EACZ,OAAQic,GACJ,KAAK,EACDxX,EAAQH,SAASG,EAAO,IACxB,MACJ,QACA,KAAK,EACL,KAAK,EACDA,EAAQH,SAASG,EAAO,IACxB,MACJ,KAAK,EACDA,EAAQH,SAASG,EAAO,GACxB,MACJ,KAAK,EACDA,EAAoBA,EAI5B,GAAyB,QAArBA,EAAMC,WAAsB,MAAO,GAGvC,OAAQwX,GACJ,KAAK,EACDvH,EAAS,KAAO3Q,GAAWS,IAAU,GAAGC,SAAS,IAAK,GACtD,MACJ,KAAK,EACDiQ,GAAUlQ,IAAU,GAAGC,SAAS,IAChC,MACJ,QACA,KAAK,GACDiQ,EAASlQ,EAAMC,SAAS,KACX,aACTiQ,GAAkB,YAEtB,MACJ,KAAK,EACDA,EAAS,KAAO3Q,GAAWS,IAAU,GAAGC,SAAS,GAAI,IACrD,MACJ,KAAK,EACDiQ,EAAsBlQ,EAI9B,OAAOkQ,GAvDQ,EA0DnBwH,cAAgB,SAAC7c,GACb,IAAIU,EAAMV,EAAMiF,OAAO1D,MACnBob,EAAU,EAAKte,MAAMye,WACrBF,EAAW,EAAKve,MAAM0e,YACtBC,EAAM,EAAKN,gBAAgBhc,EAAKic,EAASC,GAC7C,EAAK5Y,SAAS,CAAEmB,MAAOzE,EAAKuc,UAAmB,KAARvc,EAAY2U,OAAQ2H,KA/D5C,EAkEnBE,kBAAoB,SAACld,GACjB,IAAIU,EAAM,EAAKrC,MAAM8G,MACjBwX,EAAU3X,SAAShF,EAAMiF,OAAO1D,MAAO,IACvCqb,EAAW,EAAKve,MAAM0e,YACtBC,EAAM,EAAKN,gBAAgBhc,EAAKic,EAASC,GAC7C,EAAK5Y,SAAS,CACVmB,MAAOzE,EACPoc,WAAYH,EACZM,UAAmB,KAARvc,EACX2U,OAAQ2H,KA3EG,EA+EnBG,mBAAqB,SAACnd,GAClB,IAAIU,EAAM,EAAKrC,MAAM8G,MACjBwX,EAAU,EAAKte,MAAMye,WACrBF,EAAW5X,SAAShF,EAAMiF,OAAO1D,MAAO,IACxCyb,EAAM,EAAKN,gBAAgBhc,EAAKic,EAASC,GAC7C,EAAK5Y,SAAS,CACVmB,MAAOzE,EACPqc,YAAaH,EACbK,UAAmB,KAARvc,EACX2U,OAAQ2H,KAtFZ,EAAK3e,MAAQ,CACT8G,MAAO,EACP2X,WAAY,EACZC,YAAa,EACb1H,OAAQ,GACR4H,WAAW,GAPA,E,qDA6Ff,OACI,yBAAKve,GAAG,mBAAmBoC,UAAU,0BACjC,kBAAC,GAAD,CACIM,SAAUP,KAAKgc,cACfrY,KAAK,4BACLC,YAAY,QACZnG,KAAK,SAET,kBAAC,EAAD,CACI8C,SAAUP,KAAKqc,kBACf1Y,KAAK,8BACLC,YAAY,cAEZ,4BAAQlD,MAAM,KAAd,OACA,4BAAQA,MAAM,KAAd,WACA,4BAAQA,MAAM,KAAd,WAGJ,6BACA,kBAAC,EAAD,CACIH,SAAUP,KAAKsc,mBACf3Y,KAAK,8BACLC,YAAY,eAEZ,4BAAQlD,MAAM,KAAd,OACA,4BAAQA,MAAM,KAAd,oBACA,4BAAQA,MAAM,KAAd,kBACA,4BAAQA,MAAM,KAAd,WAGJ,0BAAMT,UAAU,qBACW,KAAtBD,KAAKxC,MAAMgX,OAAgBxU,KAAKxC,MAAMgX,OAAS,iB,GA/HvBxT,aAAxB4a,GACV7Y,aAAe,aCD1B,IAIMwZ,G,kDAGF,WAAY5d,GAAQ,IAAD,8BACf,cAAMA,IAMVsF,WAAa,SAAC9E,GACV,EAAKgE,SAAS,CAAEe,cAAeC,SAAShF,EAAMiF,OAAO1D,MAAO,OAR7C,EAWnB2D,kBAAoB,SAACC,GACjB,OAAQ,EAAK9G,MAAM0G,eACf,KAAK,EACD,MAAO,KAAOL,GAAWS,IAAU,GAAGC,SAAS,IAAK,GACxD,KAAK,EACD,OAAQD,IAAU,GAAGC,SAAS,IAClC,QACA,KAAK,EACD,IAAIiQ,EAASlQ,EAAMC,SAAS,IAI5B,OAHIiQ,EAAS,aACTA,GAAkB,YAEfA,EACX,KAAK,EACD,MAAO,KAAO3Q,GAAWS,IAAU,GAAGC,SAAS,GAAI,IACvD,KAAK,EACD,OAA8BD,IA3BvB,EA+BnBkY,wBAA0B,SAAC3c,GACvB,OAAQA,GACJ,QACA,KAzCgB,EA0CZ,MAAO,aACX,KA1Cc,EA2CV,MAAO,eACX,KA3CiB,EA4Cb,MAAO,YArCf,EAAKrC,MAAQ,CACT0G,cAAe,GAHJ,E,qDA2CT,IAAD,OACDlG,EAAMgC,KAAKrB,MAAME,KAAKmB,KAAKrB,MAAMW,aACrC,IAAMtB,IAAOA,EAAIe,KAAO,OAAO,8BAE/B,IAAIA,EAAOf,EAAIe,KACX0d,EAAY1d,EAAKyN,aAAakQ,aAC9BC,EAAmB3e,EAAI2e,iBACvBC,EAAiB7d,EAAKyN,aAAamH,SAEvC,OACI,yBAAK9V,GAAG,kBAAkBoC,UAAU,yBAChC,kBAAC,EAAD,CACIM,SAAUP,KAAKiE,WACfN,KAAK,8BACLC,YAAY,eACZc,aAAa,KAEb,4BAAQhE,MAAM,KAAd,OACA,4BAAQA,MAAM,KAAd,oBACA,4BAAQA,MAAM,KAAd,kBACA,4BAAQA,MAAM,KAAd,UACA,4BAAQA,MAAM,KAAd,UAEJ,2BAAOmc,YAAY,IAAIC,YAAY,KAC/B,+BACI,4BACI,mCACA,uCAGR,+BACKL,EAAUvc,KAAI,SAACgP,EAAU9Q,GACtB,IAAI2e,EAAe,EAAK1Y,kBAAkB6K,GAC1C,OACI,wBACI9O,IAAKhC,EACL6B,UAAW,EAAKuc,wBACZG,EAAiBve,KAGrB,4BAAKwe,EAAexe,IACpB,wBAAI4e,YAAW9N,GAAW6N,c,GAvFjC/b,aAAvBub,GACKxZ,aAAe,YAiG1B,IAOe9B,gBAPM,SAACzD,GAClB,MAAO,CACHqB,KAAMrB,EAAMqB,KACZS,YAAa9B,EAAM8B,eAIZ2B,CAAsBsb,IC5G/BU,G,kDAGF,WAAYte,GAAQ,IAAD,8BACf,cAAMA,IAMVsF,WAAa,SAAC9E,GACV,EAAKgE,SAAS,CAAEe,cAAeC,SAAShF,EAAMiF,OAAO1D,MAAO,OAR7C,EAWnB2D,kBAAoB,SAACC,GACjB,OAAQ,EAAK9G,MAAM0G,eACf,QACA,KAAK,EACD,OAAOL,GAAWS,IAAU,GAAGC,SAAS,IAAK,GACjD,KAAK,EACD,OAAOV,GAAWS,IAAU,GAAGC,SAAS,IAAK,GACjD,KAAK,EACD,OAAOV,GAAWS,IAAU,GAAGC,SAAS,GAAI,GAChD,KAAK,EACD,OAAOV,GAAWS,IAAU,GAAGC,SAAS,GAAI,KAnBpD,EAAK/G,MAAQ,CACT0G,cAAe,GAHJ,E,qDAyBT,IAAD,OACDrF,EAAOmB,KAAKrB,MAAME,KACtB,GAAoB,IAAhBA,EAAKa,OAAc,OAAO,8BAE9B,IAAIwd,EAAcre,EAAKmB,KAAKrB,MAAMW,aAAa6d,aAC3C1Y,EAA+B,IAAvByY,EAAYxd,OACxB,OACI,yBAAK7B,GAAG,qBAAqBoC,UAAU,4BAClCwE,GACG,0BAAMxE,UAAU,eAAhB,uBAEFwE,GACE,kBAAC,EAAD,CACIlE,SAAUP,KAAKiE,WACfN,KAAK,8BACLC,YAAY,eACZc,aAAa,KAEb,4BAAQhE,MAAM,KAAd,OACA,4BAAQA,MAAM,KAAd,WACA,4BAAQA,MAAM,KAAd,SACA,4BAAQA,MAAM,KAAd,YAIN+D,GACEyY,EAAYhd,KAAI,SAACyE,EAAMvG,GACnB,IAAIyB,EAAM,EAAKwE,kBAAkBM,GACjC,OAAO,0BAAMvE,IAAKhC,GAAIyB,EAAf,a,GAxDAmB,aAAzBic,GACKla,aAAe,eA8D1B,IAOe9B,gBAPM,SAACzD,GAClB,MAAO,CACHqB,KAAMrB,EAAMqB,KACZS,YAAa9B,EAAM8B,eAIZ2B,CAAsBgc,I,uBCyvC/BG,G,WACF,WAAYpe,EAAY2U,GAAU,oBAC9B3T,KAAK0c,aAAe,GACpB1c,KAAKqd,kBAAoB,GACzB,IAAK,IAAIjf,EAAI,EAAGA,EAAI,GAAIA,IACpB4B,KAAK0c,aAAa/P,KAAK,GACvB3M,KAAKqd,kBAAkB1Q,MAAK,GAEhC3M,KAAKhB,WAAaA,EAClBgB,KAAK0c,aAAa,GAAK1d,EACvBgB,KAAK2T,SAAWA,E,oDAGhB7O,QAAQD,IAAI,qBACZ,IAAK,IAAIzG,EAAI,EAAGA,EAAI,GAAIA,IACpB0G,QAAQD,IACJ,IAAMzG,EAAEmG,WACRvE,KAAK2T,SAASvV,GACd4B,KAAK0c,aAAate,GAAGmG,YACpBvE,KAAK0c,aAAate,KAAO,GAAGmG,SAAS,IAAIwK,eAGlDjK,QAAQD,IAAI,Y,2BAEXyY,GACD,OAAuB,IAAnBA,EACO,EAEAtd,KAAK0c,aAAaY,K,4BAG3BA,EAAgB5c,GAClBV,KAAK0c,aAAaY,GAAmB5c,IAAU,EAAK,WACpDV,KAAKqd,kBAAkBC,IAAkB,I,yCAGzC,OAAO,K,6CAIP,IADA,IAAIC,EAASvd,KAAKqd,kBAAkBlH,QAC3B/X,EAAI,EAAGA,EAAI4B,KAAKwd,mBAAoBpf,IACzC4B,KAAKqd,kBAAkBjf,IAAK,EAEhC,OAAOmf,I,8BAGP,IAAK,IAAInf,EAAI,EAAGA,EAAI,GAAIA,IACpB4B,KAAK0c,aAAate,GAAK,EACvB4B,KAAKqd,kBAAkBjf,IAAK,EAEhC4B,KAAK0c,aAAa,GAAK1c,KAAKhB,e,KAG9Bye,G,kDAiBF,WAAYze,EAAYqb,EAAWpE,GAAgB,2BAC/C,gBACKhJ,yBAA2B,GAChC,EAAKX,6BAA+B,GACpC,EAAKoR,2BAA6B,GAClC,EAAK5C,GAAK,EACV,EAAK9b,WAAaA,EAClB,EAAKqb,UAAYA,EACjB,EAAKpE,eAAiBA,EACtB,EAAKzJ,aAAe,IAAI4Q,GACpBpe,EACAiX,EAAetC,UAEnB,EAAKnP,OAAS,IAAImZ,MAAM3e,GACxB,IAAK,IAAIZ,EAAI,EAAGA,EAAIY,EAAYZ,IAC5B,EAAKoG,OAAOpG,GAAK,EAf0B,S,oDAf/C4B,KAAK8a,GAAK,EACV9a,KAAKwE,OAAS,GACd,IAAK,IAAIpG,EAAI,EAAGA,EAAI4B,KAAKhB,WAAYZ,IACjC4B,KAAKwE,OAAOpG,GAAK,EAErB4B,KAAKwM,aAAaoR,U,8BAGlB,IAAIxX,EAAMpG,KAAKsN,OAAOtN,KAAK8a,KAAO,EAAG,GACrC,OAAY,OAAR1U,EACA,2DAA2DpG,KAAK8a,KAEpE9a,KAAK2a,QAAU1M,GAAM4P,SAASzX,GACvB,U,GAfSmU,IAoCxBA,GAAKS,QAAQb,KAAb,MAA6B,CACzBG,UAh5CJ,SAAe/U,GAEX,IAAIuY,EAAOvY,GAAW,GAClBiO,EAAU,GACVC,EAAe,GAGnBD,EAAQ7G,KACJ,IAAI6E,GACA,CACI,IAAIV,GAAS,SAAU,GAAI,GAC3B,IAAIA,GAAS,MAAO,GAAI,GAAGiN,cAAc,EAAG/O,GAAUE,UACtD,IAAI4B,GAAS,MAAO,GAAI,GAAGiN,cAAc,EAAG/O,GAAUE,UACtD,IAAI4B,GAAS,SAAU,GAAI,GAC3B,IAAIA,GAAS,KAAM,EAAG,GAAGiN,cAAc,EAAG/O,GAAUE,UACpD,IAAI4B,GAAS,SAAU,EAAG,IAE9B,iFACA,8BAGR,IAAIkN,EAAQxK,EAAQA,EAAQ9T,OAAS,GACrC+T,EAAa9G,KACT,IAAImF,GACA,MACAkM,EACA,CAAC,SAAU,SAAU,UACrB,CAAC,GAAW,EAAO,IACnB,SAAUjf,GAkBN,OAjBAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACfuD,KAAKC,SACDD,KAAKE,WACDF,KAAKG,IACDH,KAAKI,OACDtf,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAE1CuD,KAAKI,OACDtf,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAG9CuD,KAAKI,OAAO,iBAIxBtf,EAAK+b,IAAM,EACJ,SAInBrH,EAAa9G,KACT,IAAImF,GACA,MACAkM,EACA,CAAC,SAAU,SAAU,UACrB,CAAC,GAAW,EAAO,KACnB,SAAUjf,GAkBN,OAjBAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACfuD,KAAKC,SACDD,KAAKE,WACDF,KAAKK,SACDL,KAAKI,OACDtf,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAE1CuD,KAAKI,OACDtf,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAG9CuD,KAAKI,OAAO,iBAIxBtf,EAAK+b,IAAM,EACJ,SAInBrH,EAAa9G,KACT,IAAImF,GACA,MACAkM,EACA,CAAC,SAAU,SAAU,UACrB,CAAC,GAAW,EAAO,IACnB,SAAUjf,GAON,OANAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACf3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAClC3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAE9C3b,EAAK+b,IAAM,EACJ,SAInBrH,EAAa9G,KACT,IAAImF,GACA,MACAkM,EACA,CAAC,SAAU,SAAU,UACrB,CAAC,GAAW,EAAO,IACnB,SAAUjf,GASN,OARAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACf3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAClC3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IACpC,EACA,GAEV3b,EAAK+b,IAAM,EACJ,SAInBrH,EAAa9G,KACT,IAAImF,GACA,OACAkM,EACA,CAAC,SAAU,SAAU,UACrB,CAAC,GAAW,EAAO,IACnB,SAAUjf,GASN,OARAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACf3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAAQ,EAC1C3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAAQ,EAC5C,EACA,GAEV3b,EAAK+b,IAAM,EACJ,SAInBrH,EAAa9G,KACT,IAAImF,GACA,MACAkM,EACA,CAAC,SAAU,SAAU,UACrB,CAAC,GAAW,EAAO,IACnB,SAAUjf,GAQN,OANAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACf3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAClC3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAE9C3b,EAAK+b,IAAM,EACJ,SAInBrH,EAAa9G,KACT,IAAImF,GACA,MACAkM,EACA,CAAC,SAAU,SAAU,UACrB,CAAC,GAAW,EAAO,IACnB,SAAUjf,GAON,OANAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACf3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAClC3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAE9C3b,EAAK+b,IAAM,EACJ,SAInBrH,EAAa9G,KACT,IAAImF,GACA,MACAkM,EACA,CAAC,SAAU,SAAU,UACrB,CAAC,GAAW,EAAO,KACnB,SAAUjf,GAON,OANAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACf3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAClC3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAE9C3b,EAAK+b,IAAM,EACJ,SAInBrH,EAAa9G,KACT,IAAImF,GACA,KACAkM,EACA,CAAC,SAAU,SAAU,UACrB,CAAC,GAAW,EAAO,IACnB,SAAUjf,GAON,OANAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACf3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAClC3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAE9C3b,EAAK+b,IAAM,EACJ,SAInBrH,EAAa9G,KACT,IAAImF,GACA,MACAkM,EACA,CAAC,SAAU,SAAU,UACrB,CAAC,GAAW,EAAO,IACnB,SAAUjf,GAON,OANAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACf3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAClC3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAE9C3b,EAAK+b,IAAM,EACJ,SAIfgD,EAAKpT,SAAS,OACd+I,EAAa9G,KACT,IAAImF,GACA,MACAkM,EACA,CAAC,SAAU,SAAU,UACrB,CAAC,GAAW,EAAO,IACnB,SAAUjf,GACN,IAAIwf,EAAaN,KAAKI,OAClBtf,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAAO,GAE7C8D,EAAeP,KAAKI,OACpBtf,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAAO,GAE7C+D,EAAUR,KAAKS,SAASH,EAAYC,GACpCG,EAAgBV,KAAKC,SACrBD,KAAKE,WAAWM,EAASR,KAAKI,OAAO,gBAIzC,OAFAtf,EAAKyN,aAAaO,MAAMhO,EAAK2b,UAAU,GAAIiE,GAC3C5f,EAAK+b,IAAM,EACJ,SAInBrH,EAAa9G,KACT,IAAImF,GACA,OACAkM,EACA,CAAC,SAAU,SAAU,UACrB,CAAC,GAAW,EAAO,IACnB,SAAUjf,GACN+F,QAAQD,MACR,IAAI0Z,EAAaN,KAAKI,OAClBtf,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAAO,GAE7C8D,EAAeP,KAAKI,OACpBtf,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAAO,GAE7C+D,EAAUR,KAAKS,SAASH,EAAYC,GACpCG,EAAgBV,KAAKC,SACrBD,KAAKE,WACDF,KAAKW,iBAAiBH,EAASR,KAAKI,OAAO,OAC3CJ,KAAKI,OAAO,gBAKpB,OAFAtf,EAAKyN,aAAaO,MAAMhO,EAAK2b,UAAU,GAAIiE,GAC3C5f,EAAK+b,IAAM,EACJ,SAInBrH,EAAa9G,KACT,IAAImF,GACA,QACAkM,EACA,CAAC,SAAU,SAAU,UACrB,CAAC,GAAW,EAAO,IACnB,SAAUjf,GACN,IAAIwf,EAAaN,KAAKI,OAClBtf,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAAQ,GAE9C8D,EAAeP,KAAKI,OACpBtf,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAAQ,GAE9C+D,EAAUR,KAAKS,SAASH,EAAYC,GACpCG,EAAgBV,KAAKC,SACrBD,KAAKE,WACDF,KAAKW,iBAAiBH,EAASR,KAAKI,OAAO,OAC3CJ,KAAKI,OAAO,gBAKpB,OAFAtf,EAAKyN,aAAaO,MAAMhO,EAAK2b,UAAU,GAAIiE,GAC3C5f,EAAK+b,IAAM,EACJ,SAInBrH,EAAa9G,KACT,IAAImF,GACA,SACAkM,EACA,CAAC,SAAU,SAAU,UACrB,CAAC,GAAW,EAAO,IACnB,SAAUjf,GACN,IAAIwf,EAAaN,KAAKI,OAClBtf,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAAO,GAE7C8D,EAAeP,KAAKI,OACpBtf,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAAQ,GAE9C+D,EAAUR,KAAKS,SAASH,EAAYC,GACpCG,EAAgBV,KAAKC,SACrBD,KAAKE,WACDF,KAAKW,iBAAiBH,EAASR,KAAKI,OAAO,OAC3CJ,KAAKI,OAAO,gBAKpB,OAFAtf,EAAKyN,aAAaO,MAAMhO,EAAK2b,UAAU,GAAIiE,GAC3C5f,EAAK+b,IAAM,EACJ,SAInBrH,EAAa9G,KACT,IAAImF,GACA,MACAkM,EACA,CAAC,SAAU,SAAU,UACrB,CAAC,GAAW,EAAO,IACnB,SAAUjf,GACN,IAAI8f,EAAWZ,KAAKI,OAChBtf,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAAO,GAE7CoE,EAAUb,KAAKI,OACftf,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAAO,GAG7C+D,EAAU,KAEVA,EADAR,KAAKc,MAAMD,EAASb,KAAKI,OAAO,MACtBJ,KAAKI,OAAO,MAEtBJ,KAAKc,MACDd,KAAKE,WACDU,EACAZ,KAAKI,OAAO,eAEhBJ,KAAKI,OAAO,gBAEhBJ,KAAKc,MAAMD,EAASb,KAAKI,OAAO,OAEtBJ,KAAKI,OAAO,cAEZJ,KAAKe,OAAOH,EAAUC,GAEpC,IAAIH,EAAgBV,KAAKC,SACrBD,KAAKE,WAAWM,EAASR,KAAKI,OAAO,gBAIzC,OAFAtf,EAAKyN,aAAaO,MAAMhO,EAAK2b,UAAU,GAAIiE,GAC3C5f,EAAK+b,IAAM,EACJ,SAInBrH,EAAa9G,KACT,IAAImF,GACA,OACAkM,EACA,CAAC,SAAU,SAAU,UACrB,CAAC,GAAW,EAAO,IACnB,SAAUjf,GACN,IAAI8f,EAAWZ,KAAKI,OAChBtf,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAAQ,GAE9CoE,EAAUb,KAAKI,OACftf,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAAQ,GAG9C+D,EAAU,KAEVA,EADAR,KAAKc,MAAMD,EAASb,KAAKI,OAAO,MACtBJ,KAAKI,OAAO,MAEZJ,KAAKe,OAAOH,EAAUC,GAEpC,IAAIH,EAAgBV,KAAKC,SACrBD,KAAKE,WAAWM,EAASR,KAAKI,OAAO,gBAIzC,OAFAtf,EAAKyN,aAAaO,MAAMhO,EAAK2b,UAAU,GAAIiE,GAC3C5f,EAAK+b,IAAM,EACJ,SAInBrH,EAAa9G,KACT,IAAImF,GACA,MACAkM,EACA,CAAC,SAAU,SAAU,UACrB,CAAC,GAAW,EAAO,IACnB,SAAUjf,GACN,IAAI8f,EAAWZ,KAAKI,OAChBtf,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAAO,GAE7CoE,EAAUb,KAAKI,OACftf,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAAO,GAG7CuE,EAAY,KAEZA,EADAhB,KAAKc,MAAMD,EAASb,KAAKI,OAAO,MACpBQ,EAEZZ,KAAKc,MACDd,KAAKE,WACDU,EACAZ,KAAKI,OAAO,eAEhBJ,KAAKI,OAAO,gBAEhBJ,KAAKc,MAAMD,EAASb,KAAKI,OAAO,OAEpBJ,KAAKI,OAAO,KAEZJ,KAAKgB,UAAUJ,EAAUC,GAEzC,IAAIH,EAAgBV,KAAKC,SACrBD,KAAKE,WAAWc,EAAWhB,KAAKI,OAAO,gBAI3C,OAFAtf,EAAKyN,aAAaO,MAAMhO,EAAK2b,UAAU,GAAIiE,GAC3C5f,EAAK+b,IAAM,EACJ,SAInBrH,EAAa9G,KACT,IAAImF,GACA,OACAkM,EACA,CAAC,SAAU,SAAU,UACrB,CAAC,GAAW,EAAO,IACnB,SAAUjf,GACN,IAAI8f,EAAWZ,KAAKI,OAChBtf,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAAQ,GAE9CoE,EAAUb,KAAKI,OACftf,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAAQ,GAG9CuE,EAAY,KAEZA,EADAhB,KAAKc,MAAMD,EAASb,KAAKI,OAAO,MACpBQ,EAEAZ,KAAKgB,UAAUJ,EAAUC,GAEzC,IAAIH,EAAgBV,KAAKC,SACrBD,KAAKE,WAAWc,EAAWhB,KAAKI,OAAO,gBAI3C,OAFAtf,EAAKyN,aAAaO,MAAMhO,EAAK2b,UAAU,GAAIiE,GAC3C5f,EAAK+b,IAAM,EACJ,UAMvBtH,EAAQ7G,KACJ,IAAI6E,GACA,CACI,IAAIV,GAAS,MAAO,GAAI,GAAI,MAAM,GAAMiN,cACpC,EACA/O,GAAUC,WAEd,IAAI6B,GAAS,MAAO,GAAI,GAAGiN,cAAc,EAAG/O,GAAUE,UACtD,IAAI4B,GAAS,SAAU,GAAI,GAC3B,IAAIA,GAAS,KAAM,EAAG,GAAGiN,cAAc,EAAG/O,GAAUE,UACpD,IAAI4B,GAAS,SAAU,EAAG,IAE9B,iFACA,8BAGR,IAAIoO,EAAQ1L,EAAQA,EAAQ9T,OAAS,GACrC+T,EAAa9G,KACT,IAAImF,GACA,OACAoN,EACA,CAAC,SAAU,UACX,CAAC,IAAW,IACZ,SAAUngB,GAKN,OAJAA,EAAKyN,aAAaO,MAAMhO,EAAK2b,UAAU,GAAI3b,EAAK+b,GAAK,GACrD/b,EAAK+b,GACD/b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IACtCzM,GAAMI,QAAQtP,EAAK2b,UAAU,GAAI,IAC9B,SAInBjH,EAAa9G,KACT,IAAImF,GACA,OACAoN,EACA,CAAC,SAAU,UACX,CAAC,GAAW,IACZ,SAAUngB,GAON,OANAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACf3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAClC3b,EAAK2b,UAAU,IAEvB3b,EAAK+b,IAAM,EACJ,SAInBrH,EAAa9G,KACT,IAAImF,GACA,OACAoN,EACA,CAAC,SAAU,UACX,CAAC,GAAW,IACZ,SAAUngB,GASN,OARAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACf3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAClC3b,EAAK2b,UAAU,GACb,EACA,GAEV3b,EAAK+b,IAAM,EACJ,SAInBrH,EAAa9G,KACT,IAAImF,GACA,QACAoN,EACA,CAAC,SAAU,UACX,CAAC,GAAW,IACZ,SAAUngB,GASN,OARAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACf3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAAQ,EAC1C3b,EAAK2b,UAAU,KAAO,EACpB,EACA,GAEV3b,EAAK+b,IAAM,EACJ,QAEX,IAGRrH,EAAa9G,KACT,IAAImF,GACA,OACAoN,EACA,CAAC,SAAU,UACX,CAAC,GAAW,IACZ,SAAUngB,GAON,OANAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACd3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAAQ,EAC3C3b,EAAK2b,UAAU,IAEvB3b,EAAK+b,IAAM,EACJ,SAInBrH,EAAa9G,KACT,IAAImF,GACA,MACAoN,EACA,CAAC,SAAU,UACX,CAAC,GAAW,IACZ,SAAUngB,GAON,OANAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACd3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAAQ,EAC3C3b,EAAK2b,UAAU,IAEvB3b,EAAK+b,IAAM,EACJ,SAInBrH,EAAa9G,KACT,IAAImF,GACA,OACAoN,EACA,CAAC,SAAU,UACX,CAAC,GAAW,IACZ,SAAUngB,GAON,OANAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACd3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAAQ,EAC3C3b,EAAK2b,UAAU,IAEvB3b,EAAK+b,IAAM,EACJ,SAKnBtH,EAAQ7G,KACJ,IAAI6E,GACA,CACI,IAAIV,GAAS,MAAO,GAAI,GAAI,MAAM,GAAMiN,cACpC,EACA/O,GAAUC,WAEd,IAAI6B,GAAS,MAAO,GAAI,GAAGiN,cAAc,EAAG/O,GAAUE,UACtD,IAAI4B,GAAS,SAAU,GAAI,GAC3B,IAAIA,GAAS,KAAM,EAAG,GAAGiN,cAAc,EAAG/O,GAAUE,UACpD,IAAI4B,GAAS,SAAU,EAAG,IAE9B,+FACA,8BAGR,IAAIqO,EAAY3L,EAAQA,EAAQ9T,OAAS,GACzC+T,EAAa9G,KACT,IAAImF,GACA,KACAqN,EACA,CAAC,SAAU,UACX,CAAC,EAAW,IACZ,SAAUpgB,GACN,IAAIuP,EAAQvP,EAAKuO,OACbvO,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAClC3b,EAAK2b,UAAU,GACnB,GAEJ,OAAc,OAAVpM,EACO,0BAEXvP,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACfzM,GAAMI,QAAQC,EAAM,GAAI,IAE5BvP,EAAK+b,IAAM,EACJ,UAInBrH,EAAa9G,KACT,IAAImF,GACA,KACAqN,EACA,CAAC,SAAU,UACX,CAAC,EAAW,IACZ,SAAUpgB,GACN,IAAIuP,EAAQvP,EAAKuO,OACbvO,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAClC3b,EAAK2b,UAAU,GACnB,GAEJ,OAAc,OAAVpM,EACO,0BAEXvP,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACfzM,GAAMI,QAAQJ,GAAM4P,SAASvP,GAAQ,KAEzCvP,EAAK+b,IAAM,EACJ,UAInBrH,EAAa9G,KACT,IAAImF,GACA,KACAqN,EACA,CAAC,SAAU,UACX,CAAC,EAAW,IACZ,SAAUpgB,GACN,IAAIuP,EAAQvP,EAAKuO,OACbvO,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAClC3b,EAAK2b,UAAU,GACnB,GAEJ,OAAc,OAAVpM,EACO,0BAEXvP,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACfzM,GAAM4P,SAASvP,IAEnBvP,EAAK+b,IAAM,EACJ,UAInBrH,EAAa9G,KACT,IAAImF,GACA,MACAqN,EACA,CAAC,SAAU,UACX,CAAC,EAAW,IACZ,SAAUpgB,GACN,IAAIuP,EAAQvP,EAAKuO,OACbvO,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAClC3b,EAAK2b,UAAU,GACnB,GAEJ,OAAc,OAAVpM,EACO,0BAEXvP,EAAKyN,aAAaO,MAAMhO,EAAK2b,UAAU,GAAIpM,EAAM,IACjDvP,EAAK+b,IAAM,EACJ,UAInBrH,EAAa9G,KACT,IAAImF,GACA,MACAqN,EACA,CAAC,SAAU,UACX,CAAC,EAAW,IACZ,SAAUpgB,GACN,IAAIuP,EAAQvP,EAAKuO,OACbvO,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAClC3b,EAAK2b,UAAU,GACnB,GAEJ,OAAc,OAAVpM,EACO,0BAEXvP,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACfzM,GAAM4P,SAASvP,IAEnBvP,EAAK+b,IAAM,EACJ,UAKnBtH,EAAQ7G,KACJ,IAAI6E,GACA,CACI,IAAIV,GAAS,SAAU,GAAI,GAC3B,IAAIA,GAAS,QAAS,GAAI,GAAGiN,cACzB,EACA/O,GAAUC,WAEd,IAAI6B,GAAS,MAAO,GAAI,GAAGiN,cAAc,EAAG/O,GAAUE,UACtD,IAAI4B,GAAS,SAAU,GAAI,GAC3B,IAAIA,GAAS,KAAM,EAAG,GAAGiN,cAAc,EAAG/O,GAAUE,UACpD,IAAI4B,GAAS,SAAU,EAAG,IAE9B,sFACA,8BAGR,IAAIsO,EAAY5L,EAAQA,EAAQ9T,OAAS,GACzC+T,EAAa9G,KACT,IAAImF,GACA,OACAsN,EACA,CAAC,SAAU,SAAU,UACrB,CAAC,GAAW,EAAO,IACnB,SAAUrgB,GAON,OANAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACf3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAClC3b,EAAK2b,UAAU,IAEvB3b,EAAK+b,IAAM,EACJ,SAInBrH,EAAa9G,KACT,IAAImF,GACA,OACAsN,EACA,CAAC,SAAU,SAAU,UACrB,CAAC,GAAW,EAAO,IACnB,SAAUrgB,GAON,OANAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACf3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAClC3b,EAAK2b,UAAU,IAEvB3b,EAAK+b,IAAM,EACJ,SAInBrH,EAAa9G,KACT,IAAImF,GACA,OACAsN,EACA,CAAC,SAAU,SAAU,UACrB,CAAC,GAAW,EAAO,KACnB,SAAUrgB,GAON,OANAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACf3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAClC3b,EAAK2b,UAAU,IAEvB3b,EAAK+b,IAAM,EACJ,SAKnBtH,EAAQ7G,KACJ,IAAI6E,GACA,CACI,IAAIV,GAAS,MAAO,GAAI,EAAG,MAAM,GAC5BiN,cAAc,EAAG/O,GAAUC,WAC3BqI,QAAQ,GAAI,EAAG,IACpB,IAAIxG,GAAS,MAAO,GAAI,GAAGiN,cAAc,EAAG/O,GAAUE,UACtD,IAAI4B,GAAS,MAAO,GAAI,GAAGiN,cAAc,EAAG/O,GAAUE,UACtD,IAAI4B,GAAS,SAAU,GAAI,GAC3B,IAAIA,GAAS,MAAO,EAAG,EAAG,MAAM,GAC3BiN,cAAc,EAAG/O,GAAUC,WAC3BqI,QAAQ,GAAI,EAAG,GACpB,IAAIxG,GAAS,SAAU,EAAG,IAE9B,4FACA,8BAGR,IAAIuO,EAAQ7L,EAAQA,EAAQ9T,OAAS,GACrC+T,EAAa9G,KACT,IAAImF,GACA,KACAuN,EACA,CAAC,SAAU,UACX,CAAC,GAAW,IACZ,SAAUtgB,GACN,IAAIuP,EAAQ,GAEZ,OADAA,EAAM3B,KAAiD,IAA5C5N,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAE7C3b,EAAK8N,OACD9N,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAClC3b,EAAK2b,UAAU,GACnBpM,IAGJvP,EAAK+b,IAAM,EACJ,MAEJ,6BAInBrH,EAAa9G,KACT,IAAImF,GACA,KACAuN,EACA,CAAC,SAAU,UACX,CAAC,GAAW,IACZ,SAAUtgB,GACN,IAAIuP,EAAQ,GACR5N,EAAQ3B,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAIlD,OAHApM,EAAM3B,KAAa,IAARjM,GACXA,KAAkB,EAClB4N,EAAM3B,KAAa,IAARjM,GAEP3B,EAAK8N,OACD9N,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAClC3b,EAAK2b,UAAU,GACnBpM,IAGJvP,EAAK+b,IAAM,EACJ,MAEJ,6BAInBrH,EAAa9G,KACT,IAAImF,GACA,KACAuN,EACA,CAAC,SAAU,UACX,CAAC,GAAW,IACZ,SAAUtgB,GACN,IAAIuP,EAAQ,GACR5N,EAAQ3B,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAQlD,OAPApM,EAAM3B,KAAa,IAARjM,GACXA,KAAkB,EAClB4N,EAAM3B,KAAa,IAARjM,GACXA,KAAkB,EAClB4N,EAAM3B,KAAa,IAARjM,GACXA,KAAkB,EAClB4N,EAAM3B,KAAa,IAARjM,GAEP3B,EAAK8N,OACD9N,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAClC3b,EAAK2b,UAAU,GACnBpM,IAGJvP,EAAK+b,IAAM,EACJ,MAEJ,6BAKnBtH,EAAQ7G,KACJ,IAAI6E,GACA,CACI,IAAIV,GAAS,MAAO,GAAI,GAAI,MAAM,GAAMiN,cACpC,EACA/O,GAAUC,WAEd,IAAI6B,GAAS,KAAM,EAAG,GAAGiN,cAAc,EAAG/O,GAAUE,UACpD,IAAI4B,GAAS,SAAU,EAAG,IAE9B,6DACA,uBAGR,IAAIwO,EAAQ9L,EAAQA,EAAQ9T,OAAS,GACrC+T,EAAa9G,KACT,IAAImF,GAAY,MAAOwN,EAAO,CAAC,UAAW,CAAC,KAAY,SAAUvgB,GAG7D,OAFAA,EAAKyN,aAAaO,MAAMhO,EAAK2b,UAAU,GAAI3b,EAAK2b,UAAU,IAAM,IAChE3b,EAAK+b,IAAM,EACJ,SAGfrH,EAAa9G,KACT,IAAImF,GAAY,QAASwN,EAAO,CAAC,UAAW,CAAC,KAAY,SACrDvgB,GAOA,OALAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,IACd3b,EAAK2b,UAAU,IAAM,IAAM3b,EAAK+b,IAErC/b,EAAK+b,IAAM,EACJ,SAIftH,EAAQ7G,KACJ,IAAI6E,GACA,CACI,IAAIV,GAAS,MAAO,GAAI,EAAG,MAAM,GAC5BiN,cAAc,EAAG/O,GAAUI,QAC3BkI,QAAQ,GAAI,GAAI,IACrB,IAAIxG,GAAS,MAAO,GAAI,EAAG,MAAM,GAC5BiN,cAAc,EAAG/O,GAAUI,QAC3BkI,QAAQ,GAAI,EAAG,IACpB,IAAIxG,GAAS,MAAO,GAAI,GAAGiN,cAAc,EAAG/O,GAAUE,UACtD,IAAI4B,GAAS,MAAO,GAAI,GAAGiN,cAAc,EAAG/O,GAAUE,UACtD,IAAI4B,GAAS,SAAU,GAAI,GAC3B,IAAIA,GAAS,MAAO,EAAG,EAAG,MAAM,GAC3BiN,cAAc,EAAG/O,GAAUI,QAC3BkI,QAAQ,GAAI,EAAG,GACpB,IAAIxG,GAAS,MAAO,EAAG,EAAG,MAAM,GAC3BiN,cAAc,EAAG/O,GAAUI,QAC3BkI,QAAQ,GAAI,GAAI,IACrB,IAAIxG,GAAS,SAAU,EAAG,IAE9B,kFACA,8BAGR,IAAIyO,EAAS/L,EAAQA,EAAQ9T,OAAS,GACtC+T,EAAa9G,KACT,IAAImF,GACA,MACAyN,EACA,CAAC,SAAU,UACX,CAAC,GAAW,IACZ,SAAUxgB,GASN,OAPIA,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MACtC3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAEtC3b,EAAK+b,IAAM/b,EAAK2b,UAAU,GAE1B3b,EAAK+b,IAAM,EAER,SAInBrH,EAAa9G,KACT,IAAImF,GACA,MACAyN,EACA,CAAC,SAAU,UACX,CAAC,GAAW,IACZ,SAAUxgB,GASN,OAPIA,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MACtC3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAEtC3b,EAAK+b,IAAM/b,EAAK2b,UAAU,GAE1B3b,EAAK+b,IAAM,EAER,SAInBrH,EAAa9G,KACT,IAAImF,GACA,MACAyN,EACA,CAAC,SAAU,UACX,CAAC,GAAW,IACZ,SAAUxgB,GASN,OAPIA,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IACtC3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAEtC3b,EAAK+b,IAAM/b,EAAK2b,UAAU,GAE1B3b,EAAK+b,IAAM,EAER,SAInBrH,EAAa9G,KACT,IAAImF,GACA,MACAyN,EACA,CAAC,SAAU,UACX,CAAC,GAAW,IACZ,SAAUxgB,GASN,OAPIA,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KACtC3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAEtC3b,EAAK+b,IAAM/b,EAAK2b,UAAU,GAE1B3b,EAAK+b,IAAM,EAER,SAInBrH,EAAa9G,KACT,IAAImF,GACA,OACAyN,EACA,CAAC,SAAU,UACX,CAAC,GAAW,IACZ,SAAUxgB,GASN,OAPIA,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAAQ,EAC9C3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAAQ,EAE9C3b,EAAK+b,IAAM/b,EAAK2b,UAAU,GAE1B3b,EAAK+b,IAAM,EAER,SAInBrH,EAAa9G,KACT,IAAImF,GACA,OACAyN,EACA,CAAC,SAAU,UACX,CAAC,GAAW,IACZ,SAAUxgB,GASN,OAPIA,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAAQ,GAC9C3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAAQ,EAE9C3b,EAAK+b,IAAM/b,EAAK2b,UAAU,GAE1B3b,EAAK+b,IAAM,EAER,SAKnBtH,EAAQ7G,KACJ,IAAI6E,GACA,CACI,IAAIV,GAAS,MAAO,GAAI,EAAG,MAAM,GAC5BiN,cAAc,EAAG/O,GAAUI,QAC3BkI,QAAQ,GAAI,GAAI,IACrB,IAAIxG,GAAS,MAAO,GAAI,GAAI,MAAM,GAC7BiN,cAAc,EAAG/O,GAAUI,QAC3BkI,QAAQ,GAAI,EAAG,IACpB,IAAIxG,GAAS,MAAO,GAAI,EAAG,MAAM,GAC5BiN,cAAc,EAAG/O,GAAUI,QAC3BkI,QAAQ,GAAI,GAAI,IACrB,IAAIxG,GAAS,MAAO,GAAI,EAAG,MAAM,GAC5BiN,cAAc,EAAG/O,GAAUI,QAC3BkI,QAAQ,GAAI,GAAI,IACrB,IAAIxG,GAAS,KAAM,EAAG,GAAGiN,cAAc,EAAG/O,GAAUE,UACpD,IAAI4B,GAAS,SAAU,EAAG,IAE9B,6DACA,uBAGR,IAAI0O,EAAShM,EAAQA,EAAQ9T,OAAS,GACtC+T,EAAa9G,KACT,IAAImF,GAAY,MAAO0N,EAAQ,CAAC,UAAW,CAAC,MAAY,SACpDzgB,GAMA,OAJAA,EAAKyN,aAAaO,MAAMhO,EAAK2b,UAAU,GAAI3b,EAAK+b,GAAK,GAErD/b,EAAK+b,IAAM7M,GAAMI,QAAQtP,EAAK2b,UAAU,GAAI,IAErC,SAKflH,EAAQ7G,KACJ,IAAI6E,GACA,CAAC,IAAIV,GAAS,QAAS,EAAG,KAC1B,sBACA,UAGR,IAAI2O,EAAkBjM,EAAQA,EAAQ9T,OAAS,GAC/C+T,EAAa9G,KACT,IAAImF,GACA,QACA2N,EACA,CAAC,SACD,CAAC,MACD,SAAC1gB,GACG,IAAIoV,EAASpV,EAAKsb,UAAUqF,MAAM3gB,GAElC,OADAA,EAAK+b,IAAM,EACJ3G,MAOnBX,EAAQ7G,KACJ,IAAI6E,GACA,CACI,IAAIV,GAAS,SAAU,GAAI,GAC3B,IAAIA,GAAS,MAAO,GAAI,GAAGiN,cAAc,EAAG/O,GAAUE,UACtD,IAAI4B,GAAS,MAAO,GAAI,GACxB,IAAIA,GAAS,SAAU,GAAI,GAC3B,IAAIA,GAAS,KAAM,EAAG,GAAGiN,cAAc,EAAG/O,GAAUE,UACpD,IAAI4B,GAAS,SAAU,EAAG,IAE9B,4DACA,uBAGR,IAAI6O,EAAWnM,EAAQA,EAAQ9T,OAAS,GACxC+T,EAAa9G,KACT,IAAImF,GACA,KACA6N,EACA,CAAC,SAAU,SAAU,MAAO,UAC5B,CAAC,GAAW,EAAO,EAAS,IAC5B,SAAU5gB,GACN,OAAO,QAEX,EACA,CAAC,SAITyU,EAAQ7G,KACJ,IAAI6E,GACA,CACI,IAAIV,GAAS,MAAO,GAAI,GAAI,MAAM,GAAMiN,cACpC,EACA/O,GAAUC,WAEd,IAAI6B,GAAS,MAAO,GAAI,GACxB,IAAIA,GAAS,SAAU,GAAI,GAC3B,IAAIA,GAAS,KAAM,EAAG,GAAGiN,cAAc,EAAG/O,GAAUE,UACpD,IAAI4B,GAAS,SAAU,EAAG,IAE9B,+DACA,uBAGR,IAAI8O,EAAWpM,EAAQA,EAAQ9T,OAAS,GACxC+T,EAAa9G,KACT,IAAImF,GACA,KACA8N,EACA,CAAC,SAAU,SAAU,OACrB,CAAC,GAAW,EAAO,IACnB,SAAU7gB,GACN,OAAO,QAEX,EACA,CAAC,UAGT0U,EAAa9G,KACT,IAAImF,GACA,KACA8N,EACA,CAAC,SAAU,SAAU,OACrB,CAAC,GAAW,EAAO,IACnB,SAAU7gB,GACN,OAAO,QAEX,EACA,CAAC,UAITyU,EAAQ7G,KACJ,IAAI6E,GACA,CACI,IAAIV,GAAS,MAAO,GAAI,GAAI,MAAM,GAClC,IAAIA,GAAS,MAAO,GAAI,GAAGiN,cAAc,EAAG/O,GAAUE,UACtD,IAAI4B,GAAS,SAAU,GAAI,GAC3B,IAAIA,GAAS,KAAM,EAAG,GACtB,IAAIA,GAAS,SAAU,EAAG,IAE9B,uCACA,gBAGR,IAAI+O,EAAWrM,EAAQA,EAAQ9T,OAAS,GACxC+T,EAAa9G,KACT,IAAImF,GACA,KACA+N,EACA,CAAC,SAAU,KAAM,SAAU,OAC3B,CAAC,IAAW,EAAS,EAAO,IAC5B,SAAU9gB,GACN,OAAO,QAEX,EACA,CAAC,UAIT0U,EAAa9G,KACT,IAAImF,GACA,QACA2N,EACA,CAAC,SACD,CAAC,MACD,SAAU1gB,GACN,OAAO,QAEX,EACA,CAAC,WAGT0U,EAAa9G,KACT,IAAImF,GACA,UACA2N,EACA,CAAC,SACD,CAAC,MACD,SAAU1gB,GACN,OAAO,QAEX,EACA,CAAC,WAGT,IAkCI6U,EAAW,GACfA,EAASjE,GAAQC,WAAa,CAAC,OAC/BgE,EAASjE,GAAQE,SAAW,CAAC,KAC7B+D,EAASjE,GAAQG,OAAS,CAAC,OAC3B8D,EAASjE,GAAQI,cAAgB,CAAC,OAClC6D,EAASjE,GAAQK,YAAc,CAAC,OAChC4D,EAASjE,GAAQT,UAAY,CAAC,KAC9B,IAAI2E,EAAa,GAOjB,OANAA,EAAU,KAAW1D,GAAUC,KAC/ByD,EAAU,KAAW1D,GAAUE,KAC/BwD,EAAU,OAAa1D,GAAUG,QACjCuD,EAAU,KAAW1D,GAAUI,MAC/BsD,EAAU,KAAW1D,GAAUK,OAC/BqD,EAAU,KAAW1D,GAAUM,OACxB,IAAI8C,GACP,GACAC,EACAC,EAlyCqB,GA+uCV,CACX,OACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,KACA,KACA,KACA,MAsBAG,EACAC,GACA,EARG,6MA6GP9U,KAAM0e,GACNlY,QAAS,CAAC,M,ICjiBRua,G,WACF,WAAY9gB,EAAY2U,GAAU,oBAC9B3T,KAAK0c,aAAe,GACpB1c,KAAKqd,kBAAoB,GACzB,IAAK,IAAIjf,EAAI,EAAGA,EAAI,GAAIA,IACpB4B,KAAK0c,aAAa/P,KAAK,GACvB3M,KAAKqd,kBAAkB1Q,MAAK,GAEhC3M,KAAKhB,WAAaA,EAClBgB,KAAK0c,aAAa,IAAM1d,EACxBgB,KAAK2T,SAAWA,E,oDAGhB7O,QAAQD,IAAI,qBACZ,IAAK,IAAIzG,EAAI,EAAGA,EAAI,GAAIA,IACpB0G,QAAQD,IACJ,IAAMzG,EAAEmG,WACRvE,KAAK2T,SAASvV,GACd4B,KAAK0c,aAAate,GAAGmG,YACpBvE,KAAK0c,aAAate,KAAO,GAAGmG,SAAS,IAAIwK,eAGlDjK,QAAQD,IAAI,Y,2BAEXyY,GACD,OAAuB,IAAnBA,EACO,EAEAtd,KAAK0c,aAAaY,K,4BAG3BA,EAAgB5c,GAClBV,KAAK0c,aAAaY,GAAkB5c,EACpCV,KAAKqd,kBAAkBC,IAAkB,I,yCAGzC,OAAO,K,6CAIP,IADA,IAAIC,EAASvd,KAAKqd,kBAAkBlH,QAC3B/X,EAAI,EAAGA,EAAI4B,KAAKwd,mBAAoBpf,IACzC4B,KAAKqd,kBAAkBjf,IAAK,EAEhC,OAAOmf,I,8BAGP,IAAK,IAAInf,EAAI,EAAGA,EAAI,GAAIA,IACpB4B,KAAK0c,aAAate,GAAK,EACvB4B,KAAKqd,kBAAkBjf,IAAK,EAEhC4B,KAAK0c,aAAa,IAAM1c,KAAKhB,e,KAG/B+gB,G,kDAkBF,WAAY/gB,EAAYqb,EAAWpE,GAAgB,2BAC/C,gBACKhJ,yBAA2B,EAChC,EAAKX,6BAA+B,EACpC,EAAKoR,2BAA6B,EAClC,EAAKzH,eAAiBA,EACtB,EAAK6E,GAAK,EACV,EAAK9b,WAAaA,EAClB,EAAKqb,UAAYA,EACjB,EAAK7N,aAAe,IAAIsT,GACpB9gB,EACAiX,EAAetC,UAEnB,EAAKnP,OAAS,IAAImZ,MAAM3e,GACxB,IAAK,IAAIZ,EAAI,EAAGA,EAAIY,EAAYZ,IAC5B,EAAKoG,OAAOpG,GAAK,EAf0B,S,oDAhB/C4B,KAAK8a,GAAK,EACV9a,KAAKwE,OAAS,GACd,IAAK,IAAIpG,EAAI,EAAGA,EAAI4B,KAAKhB,WAAYZ,IACjC4B,KAAKwE,OAAOpG,GAAK,EAErB4B,KAAKwM,aAAaoR,U,8BAGlB,IAAIxX,EAAMpG,KAAKsN,OAAOtN,KAAK8a,KAAO,EAAG,GACrC,OAAY,OAAR1U,EACA,2DAA2DpG,KAAK8a,KAEpE9a,KAAK8a,IAAM,EACX9a,KAAK2a,QAAU1M,GAAM4P,SAASzX,GACvB,U,GAhBQmU,IAqCvBA,GAAKS,QAAQb,KAAb,KAA4B,CACxBG,UA58BJ,SAAc/U,GACV,IAEIiO,EAAU,GACVC,EAAe,GAGnBD,EAAQ7G,KACJ,IAAI6E,GACA,CACI,IAAIV,GAAS,SAAU,GAAI,GAC3B,IAAIA,GAAS,KAAM,GAAI,GAAGiN,cAAc,EAAG/O,GAAUE,UACrD,IAAI4B,GAAS,KAAM,GAAI,GAAGiN,cAAc,EAAG/O,GAAUE,UACrD,IAAI4B,GAAS,KAAM,GAAI,GAAGiN,cAAc,EAAG/O,GAAUE,UACrD,IAAI4B,GAAS,QAAS,EAAG,EAAG,GAC5B,IAAIA,GAAS,QAAS,EAAG,IAE7B,uFACA,8BAGR,IAAIkN,EAAQxK,EAAQA,EAAQ9T,OAAS,GACrC+T,EAAa9G,KACT,IAAImF,GACA,MACAkM,EACA,CAAC,SAAU,SACX,CAAC,EAAK,KACN,SAAUjf,GAiBN,OAhBAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACfuD,KAAKC,SACDD,KAAKE,WACDF,KAAKG,IACDH,KAAKI,OACDtf,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAE1CuD,KAAKI,OACDtf,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAG9CuD,KAAKI,OAAO,iBAIjB,SAInB5K,EAAa9G,KACT,IAAImF,GACA,OACAkM,EACA,CAAC,SAAU,SACX,CAAC,EAAK,KACN,SAAUjf,GAiBN,OAhBAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACfuD,KAAKC,SACDD,KAAKE,WACDF,KAAKG,IACDH,KAAKI,OACDtf,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAE1CuD,KAAKI,OACDtf,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAG9CuD,KAAKI,OAAO,iBAIjB,SAInB5K,EAAa9G,KACT,IAAImF,GACA,MACAkM,EACA,CAAC,SAAU,SACX,CAAC,EAAK,KACN,SAAUjf,GAiBN,OAhBAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACfuD,KAAKC,SACDD,KAAKE,WACDF,KAAKK,SACDL,KAAKI,OACDtf,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAE1CuD,KAAKI,OACDtf,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAG9CuD,KAAKI,OAAO,iBAIjB,SAInB5K,EAAa9G,KACT,IAAImF,GACA,OACAkM,EACA,CAAC,SAAU,SACX,CAAC,EAAK,KACN,SAAUjf,GAiBN,OAhBAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACfuD,KAAKC,SACDD,KAAKE,WACDF,KAAKK,SACDL,KAAKI,OACDtf,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAE1CuD,KAAKI,OACDtf,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAG9CuD,KAAKI,OAAO,iBAIjB,SAInB5K,EAAa9G,KACT,IAAImF,GACA,MACAkM,EACA,CAAC,SAAU,SACX,CAAC,EAAK,KACN,SAAUjf,GAMN,OALAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACf3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IACtC3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAEnC,SAInBjH,EAAa9G,KACT,IAAImF,GACA,KACAkM,EACA,CAAC,SAAU,SACX,CAAC,EAAK,KACN,SAAUjf,GAMN,OALAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACf3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IACtC3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAEnC,SAInBjH,EAAa9G,KACT,IAAImF,GACA,MACAkM,EACA,CAAC,SAAU,SACX,CAAC,EAAK,KACN,SAAUjf,GAQN,OAPAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,KAEX3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IACtC3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAGvC,SAInBjH,EAAa9G,KACT,IAAImF,GACA,MACAkM,EACA,CAAC,SAAU,SACX,CAAC,EAAK,KACN,SAAUjf,GAMN,OALAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACf3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IACtC3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAEnC,SAInBjH,EAAa9G,KACT,IAAImF,GACA,MACAkM,EACA,CAAC,SAAU,SACX,CAAC,EAAK,KACN,SAAUjf,GAQN,OAPAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACf3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAClC3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IACpC,EACA,GAEH,SAInBjH,EAAa9G,KACT,IAAImF,GACA,OACAkM,EACA,CAAC,SAAU,SACX,CAAC,EAAK,IACN,SAAUjf,GAMN,OALAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACf3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KACtC3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAEnC,SAInBjH,EAAa9G,KACT,IAAImF,GACA,OACAkM,EACA,CAAC,SAAU,SACX,CAAC,EAAK,IACN,SAAUjf,GAMN,OALAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACf3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MACtC3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAEnC,SAInBjH,EAAa9G,KACT,IAAImF,GACA,OACAkM,EACA,CAAC,SAAU,SACX,CAAC,EAAK,IACN,SAAUjf,GAMN,OALAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACf3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KACtC3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KAEnC,SAKnBlH,EAAQ7G,KACJ,IAAI6E,GACA,CACI,IAAIV,GAAS,SAAU,GAAI,GAC3B,IAAIA,GAAS,KAAM,GAAI,GAAGiN,cAAc,EAAG/O,GAAUE,UACrD,IAAI4B,GAAS,KAAM,GAAI,EAAG,GAC1B,IAAIA,GAAS,KAAM,GAAI,EAAG,GAC1B,IAAIA,GAAS,QAAS,EAAG,EAAG,GAC5B,IAAIA,GAAS,QAAS,EAAG,IAE7B,yCACA,gBAGR,IAAIkP,EAAYxM,EAAQA,EAAQ9T,OAAS,GACzC+T,EAAa9G,KACT,IAAImF,GACA,KACAkO,EACA,CAAC,SAAU,SACX,CAAC,EAAK,IACN,SAAUjhB,GAEN,OADAA,EAAK+b,GAAK/b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IACzC,SAKnBlH,EAAQ7G,KACJ,IAAI6E,GACA,CACI,IAAIV,GAAS,SAAU,GAAI,GAC3B,IAAIA,GAAS,KAAM,GAAI,EAAG,GAC1B,IAAIA,GAAS,KAAM,GAAI,GAAGiN,cAAc,EAAG/O,GAAUE,UACrD,IAAI4B,GAAS,KAAM,GAAI,GAAGiN,cAAc,EAAG/O,GAAUE,UACrD,IAAI4B,GAAS,QAAS,EAAG,GAAGiN,cACxB,EACA/O,GAAUC,WAEd,IAAI6B,GAAS,QAAS,EAAG,IAE7B,+EACA,8BAGR,IAAImP,EAAYzM,EAAQA,EAAQ9T,OAAS,GACzC+T,EAAa9G,KACT,IAAImF,GACA,MACAmO,EACA,CAAC,SAAU,SACX,CAAC,EAAK,IACN,SAAUlhB,GAMN,OALAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACf3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KACtC3b,EAAK2b,UAAU,IAEZ,SAInBjH,EAAa9G,KACT,IAAImF,GACA,MACAmO,EACA,CAAC,SAAU,SACX,CAAC,EAAK,IACN,SAAUlhB,GAMN,OALAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACf3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MACtC3b,EAAK2b,UAAU,IAEZ,SAInBjH,EAAa9G,KACT,IAAImF,GACA,MACAmO,EACA,CAAC,SAAU,SACX,CAAC,EAAK,IACN,SAAUlhB,GAMN,OALAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACf3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KACtC3b,EAAK2b,UAAU,IAEZ,SAKnBlH,EAAQ7G,KACJ,IAAI6E,GACA,CAAC,IAAIV,GAAS,QAAS,EAAG,KAC1B,sBACA,UAGR,IAAIoP,EAAY1M,EAAQA,EAAQ9T,OAAS,GACzC+T,EAAa9G,KACT,IAAImF,GAAY,UAAWoO,EAAW,CAAC,SAAU,CAAC,KAAM,SACpDnhB,GAEA,OAAOA,EAAKsb,UAAUqF,MAAM3gB,OAIpCyU,EAAQ7G,KACJ,IAAI6E,GACA,CACI,IAAIV,GAAS,SAAU,GAAI,GAC3B,IAAIA,GAAS,KAAM,GAAI,GAAGiN,cAAc,EAAG/O,GAAUE,UACrD,IAAI4B,GAAS,KAAM,GAAI,GAAGiN,cAAc,EAAG/O,GAAUE,UACrD,IAAI4B,GAAS,MAAO,EAAG,GAAI,MAAM,GAAMiN,cACnC,EACA/O,GAAUC,YAGlB,wFACA,8BAGR,IAAIiQ,EAAQ1L,EAAQA,EAAQ9T,OAAS,GAErC+T,EAAa9G,KACT,IAAImF,GAAY,OAAQoN,EAAO,CAAC,UAAW,CAAC,IAAM,SAAUngB,GAKxD,OAJAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACf3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAAM3b,EAAK2b,UAAU,IAExD,SAGfjH,EAAa9G,KACT,IAAImF,GAAY,QAASoN,EAAO,CAAC,UAAW,CAAC,IAAM,SAAUngB,GAKzD,OAJAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACf3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAAM3b,EAAK2b,UAAU,IAExD,SAGfjH,EAAa9G,KACT,IAAImF,GAAY,OAAQoN,EAAO,CAAC,UAAW,CAAC,KAAO,SAAUngB,GAOzD,OANAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACf3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAAM3b,EAAK2b,UAAU,GACrD,EACA,GAEH,SAGfjH,EAAa9G,KACT,IAAImF,GAAY,QAASoN,EAAO,CAAC,UAAW,CAAC,KAAO,SAAUngB,GAQ1D,OAPAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACf3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAAQ,EAC1C3b,EAAK2b,UAAU,KAAO,EACpB,EACA,GAEH,SAGfjH,EAAa9G,KACT,IAAImF,GAAY,OAAQoN,EAAO,CAAC,UAAW,CAAC,KAAO,SAAUngB,GAMzD,OALAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACd3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAAQ,EAC/C3b,EAAK2b,UAAU,IAEZ,SAGfjH,EAAa9G,KACT,IAAImF,GAAY,MAAOoN,EAAO,CAAC,UAAW,CAAC,KAAO,SAAUngB,GAMxD,OALAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACd3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAAQ,EAC/C3b,EAAK2b,UAAU,IAEZ,SAGfjH,EAAa9G,KACT,IAAImF,GAAY,OAAQoN,EAAO,CAAC,UAAW,CAAC,KAAO,SAAUngB,GAMzD,OALAA,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACd3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAAQ,EAC/C3b,EAAK2b,UAAU,IAEZ,SAIflH,EAAQ7G,KACJ,IAAI6E,GACA,CACI,IAAIV,GAAS,SAAU,GAAI,GAC3B,IAAIA,GAAS,KAAM,GAAI,GAAGiN,cAAc,EAAG/O,GAAUE,UACrD,IAAI4B,GAAS,KAAM,GAAI,GAAGiN,cAAc,EAAG/O,GAAUE,UACrD,IAAI4B,GAAS,MAAO,EAAG,GAAI,MAAM,GAC5BiN,cAAc,EAAG/O,GAAUI,QAC3BkI,QAAQ,GAAI,EAAG,KAExB,wFACA,8BAGR,IAAI6I,EAAY3M,EAAQA,EAAQ9T,OAAS,GACzC+T,EAAa9G,KACT,IAAImF,GAAY,MAAOqO,EAAW,CAAC,UAAW,CAAC,IAAO,SAAUphB,GAO5D,OALIA,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MACtC3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAEtC3b,EAAK+b,IAAM/b,EAAK2b,UAAU,IAEvB,SAGfjH,EAAa9G,KACT,IAAImF,GAAY,MAAOqO,EAAW,CAAC,UAAW,CAAC,IAAO,SAAUphB,GAO5D,OALIA,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MACtC3b,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,MAEtC3b,EAAK+b,IAAM/b,EAAK2b,UAAU,IAEvB,SAIflH,EAAQ7G,KACJ,IAAI6E,GACA,CACI,IAAIV,GAAS,SAAU,GAAI,GAC3B,IAAIA,GAAS,KAAM,GAAI,EAAG,GAC1B,IAAIA,GAAS,KAAM,GAAI,GAAGiN,cAAc,EAAG/O,GAAUE,UACrD,IAAI4B,GAAS,MAAO,EAAG,GAAI,MAAM,GAAMiN,cACnC,EACA/O,GAAUE,WAGlB,iEACA,uBAGR,IAAIkR,EAAc5M,EAAQA,EAAQ9T,OAAS,GAC3C+T,EAAa9G,KACT,IAAImF,GAAY,MAAOsO,EAAa,CAAC,UAAW,CAAC,KAAO,SACpDrhB,GAGA,OADAA,EAAKyN,aAAaO,MAAMhO,EAAK2b,UAAU,GAAI3b,EAAK2b,UAAU,IAAM,IACzD,SAIflH,EAAQ7G,KACJ,IAAI6E,GACA,CACI,IAAIV,GAAS,SAAU,GAAI,GAC3B,IAAIA,GAAS,KAAM,GAAI,GAAGiN,cAAc,EAAG/O,GAAUE,UACrD,IAAI4B,GAAS,KAAM,GAAI,GAAGiN,cAAc,EAAG/O,GAAUE,UACrD,IAAI4B,GAAS,MAAO,EAAG,GAAI,MAAM,GAAMiN,cACnC,EACA/O,GAAUC,YAGlB,gGACA,8BAGR,IAAIoR,EAAa7M,EAAQA,EAAQ9T,OAAS,GAE1C+T,EAAa9G,KACT,IAAImF,GAAY,KAAMuO,EAAY,CAAC,UAAW,CAAC,KAAO,SAAUthB,GAC5D,IAAIuP,EAAQvP,EAAKuO,OACbvO,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAAM3b,EAAK2b,UAAU,GAC3D,GAEJ,OAAc,OAAVpM,EACO,0BAEXvP,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACfzM,GAAMI,QAAQC,EAAM,GAAI,IAErB,UAGfmF,EAAa9G,KACT,IAAImF,GAAY,KAAMuO,EAAY,CAAC,UAAW,CAAC,KAAO,SAAUthB,GAC5D,IAAIuP,EAAQvP,EAAKuO,OACbvO,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAAM3b,EAAK2b,UAAU,GAC3D,GAEJ,OAAc,OAAVpM,EACO,0BAEXvP,EAAKyN,aAAaO,MACdhO,EAAK2b,UAAU,GACfzM,GAAMI,QAAQJ,GAAM4P,SAASvP,GAAQ,KAElC,UAGfmF,EAAa9G,KACT,IAAImF,GAAY,KAAMuO,EAAY,CAAC,UAAW,CAAC,KAAO,SAAUthB,GAC5D,IAAIuP,EAAQvP,EAAKuO,OACbvO,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAAM3b,EAAK2b,UAAU,GAC3D,GAEJ,OAAc,OAAVpM,EACO,0BAEXvP,EAAKyN,aAAaO,MAAMhO,EAAK2b,UAAU,GAAIzM,GAAM4P,SAASvP,IACnD,UAGfmF,EAAa9G,KACT,IAAImF,GAAY,MAAOuO,EAAY,CAAC,UAAW,CAAC,KAAO,SAAUthB,GAC7D,IAAIuP,EAAQvP,EAAKuO,OACbvO,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAAM3b,EAAK2b,UAAU,GAC3D,GAEJ,OAAc,OAAVpM,EACO,0BAEXvP,EAAKyN,aAAaO,MAAMhO,EAAK2b,UAAU,GAAIpM,EAAM,IAC1C,UAGfmF,EAAa9G,KACT,IAAImF,GAAY,MAAOuO,EAAY,CAAC,UAAW,CAAC,KAAO,SAAUthB,GAC7D,IAAIuP,EAAQvP,EAAKuO,OACbvO,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAAM3b,EAAK2b,UAAU,GAC3D,GAEJ,OAAc,OAAVpM,EACO,0BAEXvP,EAAKyN,aAAaO,MAAMhO,EAAK2b,UAAU,GAAIzM,GAAM4P,SAASvP,IACnD,UAGfmF,EAAa9G,KACT,IAAImF,GAAY,KAAMuO,EAAY,CAAC,UAAW,CAAC,KAAO,SAAUthB,GAC5D,IAAIuP,EAAQ,GACZA,EAAM3B,KAAiD,IAA5C5N,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,KACjD,IAAI4F,EACAvhB,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAAM3b,EAAK2b,UAAU,GAC/D,OAAI3b,EAAK8N,OAAOyT,EAAchS,GAInB,KAEJ,6BAGfmF,EAAa9G,KACT,IAAImF,GAAY,KAAMuO,EAAY,CAAC,UAAW,CAAC,KAAO,SAAUthB,GAC5D,IAAIuP,EAAQ,GACR5N,EAAQ3B,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAIlD,OAHApM,EAAM3B,KAAa,IAARjM,GACXA,KAAkB,EAClB4N,EAAM3B,KAAa,IAARjM,GAEP3B,EAAK8N,OACD9N,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IACtC3b,EAAK2b,UAAU,GACfpM,GAGG,KAEJ,6BAGfmF,EAAa9G,KACT,IAAImF,GAAY,KAAMuO,EAAY,CAAC,UAAW,CAAC,KAAO,SAAUthB,GAC5D,IAAIuP,EAAQ,GACR5N,EAAQ3B,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IAQlD,OAPApM,EAAM3B,KAAa,IAARjM,GACXA,KAAkB,EAClB4N,EAAM3B,KAAa,IAARjM,GACXA,KAAkB,EAClB4N,EAAM3B,KAAa,IAARjM,GACXA,KAAkB,EAClB4N,EAAM3B,KAAa,IAARjM,GAEP3B,EAAK8N,OACD9N,EAAKyN,aAAaC,KAAK1N,EAAK2b,UAAU,IACtC3b,EAAK2b,UAAU,GACfpM,GAGG,KAEJ,6BAIfkF,EAAQ7G,KACJ,IAAI6E,GACA,CACI,IAAIV,GAAS,SAAU,GAAI,GAC3B,IAAIA,GAAS,MAAO,EAAG,IAAIiN,cAAc,EAAG/O,GAAUK,UAE1D,wCACA,eACA,SAAUe,EAAM3S,EAAMyQ,EAAM8I,EAASxB,GACjC,IAAIrB,EAAS,CACTsD,aAAc,KACdC,QAAS,KACThX,MAAO,MAGPA,EAAQ,KACRwY,EAAY1D,EAAU4C,aAAahI,GACvC,QAAkB2F,IAAdmD,EAAyB,CAEzB,GADA/E,EAAOuD,QAAUwB,EAAU,GACN,OAAjBA,EAAU,GACV,OAAO/E,EAEXzT,EAAQwY,EAAU,GAEtB,GAAc,OAAVxY,GAAkB8U,EAAUC,eAAe9F,GAAQtC,MAAO,CAC1D,IAAI8L,EACA3D,EAAUC,eAAe9F,GAAQtC,MAAMiH,KAAKlE,GAChD,GAAmB,OAAf+I,QAAyCpD,IAAlBoD,EAAW,KAClCzY,EAAQyY,EAAW,GAAGvM,WAAW,IACrB,IAKR,OAJAuH,EAAOsD,aACH,uBACA0B,EAAW,GACX,gBACGhF,EAInB,GACc,OAAVzT,QAC8CqV,IAA9CP,EAAUC,eAAe9F,GAAQiJ,SACnC,CACE,IAAIlM,EACA8I,EAAUC,eAAe9F,GAAQiJ,SAAStE,KAAKlE,GACnD,GAAc,OAAV1D,EAAgB,CAChB,IAAIkC,EAAQgI,UAAUwC,QAAQ1M,EAAM,KAAO,GACvC2M,EAAgB3M,EAAM,GAC1BhM,EAAQyD,SAASkV,EAAezK,IAGxC,OAAc,OAAVlO,GAAkBmU,MAAMnU,IACxByT,EAAOsD,aAAP,iCAAgDrH,EAAhD,KACO+D,IAEPzT,IAAU,KAAOsW,IAAY,GACT,KAAP,EAARtW,GACDyT,EAAOzT,OAAiB,UAARA,KAAwB,EAExCyT,EAAOsD,aAAP,gCAA+CrH,EAA/C,KAGJ+D,EAAOsD,aAAP,0BAAyCrH,EAAzC,KAEG+D,MAEX,SAAUzT,EAAOsW,GACb,OAAQtW,GAAS,EAAgB,WAAVsW,MAInC,IAAIuJ,EAAQ/M,EAAQA,EAAQ9T,OAAS,GACrC+T,EAAa9G,KACT,IAAImF,GAAY,IAAKyO,EAAO,CAAC,UAAW,CAAC,IAAM,SAAUxhB,GAErD,OADAA,EAAK+b,GAAK/b,EAAK2b,UAAU,GAClB,SAGfjH,EAAa9G,KACT,IAAImF,GAAY,MAAOyO,EAAO,CAAC,UAAW,CAAC,IAAM,SAAUxhB,GAGvD,OAFAA,EAAKyN,aAAaO,MAAM,GAAIhO,EAAK+b,IACjC/b,EAAK+b,GAAK/b,EAAK2b,UAAU,GAClB,SAMflH,EAAQ7G,KACJ,IAAI6E,GACA,CACI,IAAIV,GAAS,SAAU,GAAI,GAC3B,IAAIA,GAAS,KAAM,GAAI,GAAGiN,cAAc,EAAG/O,GAAUE,UACrD,IAAI4B,GAAS,KAAM,GAAI,EAAG,GAC1B,IAAIA,GAAS,KAAM,GAAI,GAAGiN,cAAc,EAAG/O,GAAUE,UACrD,IAAI4B,GAAS,QAAS,EAAG,EAAG,GAC5B,IAAIA,GAAS,QAAS,EAAG,IAE7B,gEACA,uBAGR,IAAI6O,EAAWnM,EAAQA,EAAQ9T,OAAS,GACxC+T,EAAa9G,KACT,IAAImF,GACA,KACA6N,EACA,CAAC,SAAU,SACX,CAAC,EAAK,KACN,SAAU5gB,GAEN,OAAO,SAKnByU,EAAQ7G,KACJ,IAAI6E,GACA,CACI,IAAIV,GAAS,SAAU,GAAI,GAC3B,IAAIA,GAAS,KAAM,GAAI,EAAG,GAC1B,IAAIA,GAAS,KAAM,GAAI,GAAGiN,cAAc,EAAG/O,GAAUE,UACrD,IAAI4B,GAAS,MAAO,EAAG,GAAI,MAAM,GAAMiN,cACnC,EACA/O,GAAUC,YAGlB,iEACA,uBAGR,IAAI2Q,EAAWpM,EAAQA,EAAQ9T,OAAS,GACxC+T,EAAa9G,KACT,IAAImF,GAAY,KAAM8N,EAAU,CAAC,UAAW,CAAC,IAAM,SAAU7gB,GAEzD,OAAO,SAGf0U,EAAa9G,KACT,IAAImF,GAAY,KAAM8N,EAAU,CAAC,UAAW,CAAC,IAAM,SAAU7gB,GAEzD,OAAO,SAGf,IAAI6U,EAAW,GACfA,EAASjE,GAAQC,WAAa,CAAC,OAC/BgE,EAASjE,GAAQE,SAAW,CAAC,KAC7B+D,EAASjE,GAAQG,OAAS,CAAC,OAC3B8D,EAASjE,GAAQI,cAAgB,CAAC,OAClC6D,EAASjE,GAAQK,YAAc,CAAC,OAChC4D,EAASjE,GAAQT,UAAY,CAAC,KAC9B,IAAI2E,EAAa,GAyCjB,OAxCAA,EAAU,KAAW1D,GAAUC,KAC/ByD,EAAU,KAAW1D,GAAUE,KAC/BwD,EAAU,OAAa1D,GAAUG,QACjCuD,EAAU,KAAW1D,GAAUI,MAC/BsD,EAAU,KAAW1D,GAAUK,OAC/BqD,EAAU,KAAW1D,GAAUM,OAmCxB,IAAI8C,GACP,GACAC,EACAC,EA71BqB,GAwzBV,CACX,QACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAQAG,EACAC,GACA,EARG,oNA8GP9U,KAAMghB,GACNxa,QAAS,I,sBCx7BPnE,GACO,EADPA,GAEI,EAFJA,GAGI,EAWJof,GACF,8BACI,sCADJ,iKAOEC,GACG,EADHA,GAEK,EAFLA,GAGM,EAHNA,GAIO,EAJPA,GAKO,EALPA,GAMK,EAGLC,G,kDAGF,WAAY/hB,GAAQ,IAAD,8BACf,cAAMA,IAoGVgiB,eAAiB,SAACxhB,GACd,IAAIW,EAAc,EAAKnB,MAAMW,YACzBtB,EAAM,EAAKW,MAAME,KAAKiB,GAE1B,GAAI9B,GAjIe,IAiIRA,EAAIwD,mBAA2C,CACtDrC,EAAM+D,iBAEN,IAAIoB,EAAQtG,EAAI4iB,cACZC,EAAS7iB,EAAI8iB,WAEjB,GAAkB,UAAd3hB,EAAMiB,IACN,EAAK2gB,qBAAqBzc,GAC1BtG,EAAI4iB,cAAgB,QACjB,GAAoB,IAAhBzhB,EAAM6hB,OACb,GAAIH,EAAS,EAAG,CACZ,IAAIhhB,EAAMyE,EAAM6R,MAAM,EAAG0K,EAAS,GAAKvc,EAAM6R,MAAM0K,GAEnD7iB,EAAI8iB,WAAaD,EAAS,EAC1B7iB,EAAI4iB,cAAgB/gB,QAErB,GAAsB,KAAlBV,EAAM8hB,SACb,GAAIJ,EAASvc,EAAM5E,OAAQ,CACvB,IAAIG,EAAMyE,EAAM6R,MAAM,EAAG0K,GAAUvc,EAAM6R,MAAM0K,EAAS,GAExD7iB,EAAI8iB,WAAaD,EAAS,EAC1B7iB,EAAI4iB,cAAgB/gB,QAErB,GAAsB,KAAlBV,EAAM8hB,QACbJ,EAASA,GAAU,EAAI,EAAIA,EAAS,EACpC7iB,EAAI8iB,WAAaD,OACd,GAAsB,KAAlB1hB,EAAM8hB,QAAgB,CAC7B,IAAIC,EAAIljB,EAAI4iB,cAAclhB,OAC1BmhB,EAASA,GAAUK,EAAIA,EAAIL,EAAS,EACpC7iB,EAAI8iB,WAAaI,MACd,CACH,IAAI/E,EAAMhd,EAAMiB,IAEV+gB,EAAUhiB,EAAM8hB,QAChBG,EAlKI,IAkKIpjB,EAAIwD,oBAGb2f,EAAU,IAAMA,EAAU,KACzBC,IACe,KAAZD,GACe,KAAZA,GACCA,EAAU,IAAMA,EAAU,IAC1BA,EAAU,IAAMA,EAAU,KAC1BA,EAAU,KAAOA,EAAU,KAC3BA,EAAU,KAAOA,EAAU,QAGpChF,EAAM7X,EAAM6R,MAAM,EAAG0K,GAAU1E,EAAM7X,EAAM6R,MAAM0K,GACjD7iB,EAAI4iB,cAAgBzE,EACpBne,EAAI8iB,WAAaD,EAAS,GAMlC,OAFA,EAAKliB,MAAMb,UAAUgC,EAAa9B,IAE3B,IAhKI,EAoKnBqjB,kBAAoB,SAACC,EAAUjR,GAC3B,IAIIpQ,EAJAH,EAAc,EAAKnB,MAAMW,YAEzBtB,EADO,EAAKW,MAAME,KACPiB,GAGqBG,EAAhCqhB,IAAab,GAA+B,gBACvCa,IAAab,GACN,kBACPa,IAAab,GACN,kBACPa,IAAab,GAAgC,iBAC7Ca,IAAab,GAA+B,gBACpC,cAEjBziB,EAAI8G,QAAQ6H,KAAK,yBAAK1M,UAAWA,GAAYoQ,IAC7C,EAAK1R,MAAMb,UAAUgC,EAAa9B,IApLnB,EAuLnB+iB,qBAAuB,SAACzc,GACpB,IAAIjF,EAAW,EAAKV,MAAMW,YACtBtB,EAAM,EAAKW,MAAME,KAAKQ,GAEtBN,EAAOf,EAAIe,KAlNG,IAoNdf,EAAIwD,oBACJ8C,EAAQH,SAASG,EAAO,IACxB,EAAKid,WAAWzU,iBAAiB/N,EAAMuF,GACvC,EAAK+c,kBAAkBZ,GAAiB,MAAQnc,IAtNlC,IAuNPtG,EAAIwD,qBACX,EAAK+f,WAAWnV,oBAAoBrN,EAAMuF,GAC1C,EAAK+c,kBAAkBZ,GAAiB,MAAQnc,IAGpDtG,EAAIwD,mBA9Ne,EAgOnB,EAAKggB,mBACL,EAAK7iB,MAAMb,UAAUuB,EAAUrB,IAzMhB,EA4MnBwjB,iBAAmB,WAKf,IAJA,IAAIxjB,EAAM,EAAKW,MAAME,KAAK,EAAKF,MAAMW,aAEjCmiB,EAAUzjB,EAAIe,KAAKyN,aAAakV,uBAE3BtjB,EAAI,EAAGA,EAAIJ,EAAI2e,iBAAiBjd,SAAUtB,EAC3CqjB,EAAQrjB,GAAIJ,EAAI2e,iBAAiBve,GA5OpB,MA6ORJ,EAAI2e,iBAAiBve,KAC1BJ,EAAI2e,iBAAiBve,GA/OX,IA2BH,EAwNnBujB,WAAa,SACT7iB,EACA8iB,EACAzE,EACA0E,EACArjB,EACAsjB,GAEA,IAAIziB,EAAW,EAAKV,MAAME,KAAKa,OAE3BX,EAAO0c,GAAMlB,KAAKS,QAAQ+G,QAAQvjB,EAAKqjB,EAAU,EAAKN,YAEtDS,EAAU,CACVljB,KAAMA,EACNiB,QAAS+hB,EAAmB/iB,EAAKkX,eAAelC,YAAc6N,EAC9D/c,IAAK,GACLC,QAAS,GACTqY,aAAcA,EACdpe,KAAMA,EACN4d,iBAAkB,GAClBpb,cAAeH,GACfnC,gBAAiBT,EACjBoiB,cAAe,GACfpf,mBAvQe,EAwQfsf,WAAY,GAGhBkB,EAAQrF,iBAAmBgB,MAAMsE,KAC7B,CAAEviB,OAAQX,EAAKyN,aAAakQ,aAAahd,SACzC,kBAjRgB,KAqRpB,EAAKf,MAAMV,mBAAmBa,EAAM+iB,EAAUrjB,GAE9C,EAAKG,MAAMD,OAAOsjB,GAClB,EAAKrjB,MAAMf,UAAUyB,IA5PN,EA+PnBX,OAAS,SAACI,EAAM8iB,EAAMzE,GAClB,EAAKwE,WACD7iB,EACA8iB,EACAzE,EACA,KACA,EAAK+E,iBACL,IAtQW,EA0QnBC,cAAgB,WACZ,EAAKR,WAAW,UAAW,GAAI,GAAI,KAAM,EAAKO,iBAAiB,IA3QhD,EA8QnBE,mBAAqB,WACjB,EAAKT,WAAW,UAAW,GAAI,GAAI,KAAM,SAAS,IA/QnC,EAkRnBU,kBAAoB,WAChB,EAAKV,WAAW,UAAW,GAAI,GAAI,KAAM,QAAQ,IAnRlC,EAsRnBO,cAAgB,WACZ,OAAOzG,GAAMlB,KAAKS,QAAQU,cAAc,IAvRzB,EA0RnB4G,aAAe,SAACnjB,GACZ,IAAIojB,EAAQ,EAAKC,gBAAgBxZ,QAAQuZ,MACzC,KAAIA,EAAM7iB,QAAU,GAApB,CAEA,IAAI8Y,EAAO+J,EAAM,GACjB,GAAI,EAAKE,cAAe,CACpB,IAAI3jB,EAAO0Z,EAAK1Z,KACZ4jB,EAAOlK,EAAKrC,MAAM,EAAGqC,EAAKmK,MAC1BC,EAAK,IAAIC,WACTC,EAAE,eACNF,EAAG5b,iBAAiB,QAAQ,WACxB,IAAIsH,EAAQ,IAAIyU,WAAW/iB,KAAKmU,QAChC2O,EAAGpkB,OAAOI,EAAM,GAAI6e,MAAMsE,KAAK3T,OAEnCsU,EAAGI,kBAAkBN,OAClB,CACH,IAAI5jB,EAAO0Z,EAAK1Z,KACZ4jB,EAAOlK,EAAKrC,MAAM,EAAGqC,EAAKmK,MAC1BC,EAAK,IAAIC,WACTC,EAAE,eACNF,EAAG5b,iBAAiB,QAAQ,WACxB,IAAIic,EAAMjjB,KAAKmU,OAEf2O,EAAGpkB,OAAOI,EAAMmkB,EAAK,OAEzBL,EAAGM,WAAWR,MAnTH,EAuTnB/gB,cAAgB,WACZ,EAAK8gB,eAAgB,EACrB,EAAKD,gBAAgBxZ,QAAQma,SAzTd,EA4TnBvhB,cAAgB,WACZ,EAAK6gB,eAAgB,EACrB,EAAKD,gBAAgBxZ,QAAQma,SA9Td,EAiUnBthB,kBAAoB,WAChB,IAAM/B,EAAc,EAAKnB,MAAMW,YAC3BtB,EAAM,EAAKW,MAAME,KAAKiB,GAEtBuQ,EAAOrS,EAAI+B,QACf,GAAoB,IAAhBsQ,EAAK3Q,OAAT,CAEA,IAAI0jB,EAAK7Y,SAAS8Y,cAAc,KAC5BX,EAAO,IAAIY,KAAK,CAACjT,GAAO,CACxB5S,KAAM,eAEN8lB,EAAWC,IAAIC,gBAAgBf,GAC/B5jB,EAAOd,EAAIc,KAAO,KACtBskB,EAAGM,aAAa,OAAQH,GACxBH,EAAGM,aAAa,WAAY5kB,GAC5BskB,EAAG3f,MAAMoI,QAAU,OACnBtB,SAASoZ,KAAKC,YAAYR,GAC1BA,EAAGD,QACH5Y,SAASoZ,KAAKE,YAAYT,KAnVX,EAsVnBthB,YAAc,WACV,IAAMhC,EAAc,EAAKnB,MAAMW,YAC3BtB,EAAM,EAAKW,MAAME,KAAKiB,GAEtBuQ,EAAOrS,EAAImf,aACX2G,EAAY,IAAIf,WAAW1S,GAC3BqS,EAAO,IAAIY,KAAK,CAACQ,GAAY,CAC7BrmB,KAAM,6BAEN8lB,EAAWC,IAAIC,gBAAgBf,GAC/Brc,EAAUkE,SAAS8Y,cAAc,KACjCvkB,EAAOd,EAAIc,KAAO,OACtBuH,EAAQqd,aAAa,OAAQH,GAC7Bld,EAAQqd,aAAa,WAAY5kB,GACjCuH,EAAQ5C,MAAMoI,QAAU,OACxBtB,SAASoZ,KAAKC,YAAYvd,GAC1BA,EAAQ8c,QACR5Y,SAASoZ,KAAKE,YAAYxd,IAvWX,EA0WnBtE,aAAe,WACX,IAAMjC,EAAc,EAAKnB,MAAMW,YAC3BtB,EAAM,EAAKW,MAAME,KAAKiB,GAEtBikB,EAAY/lB,EAAImf,aACfjd,KAAI,SAACyE,GAAD,OAAUA,EAAKJ,SAAS,IAAIyf,SAAS,EAAG,QAC5CtW,KAAK,MAENgV,EAAO,IAAIY,KAAK,CAACS,GAAY,CAC7BtmB,KAAM,eAEN8lB,EAAWC,IAAIC,gBAAgBf,GAC/Brc,EAAUkE,SAAS8Y,cAAc,KACjCvkB,EAAOd,EAAIc,KAAO,OACtBuH,EAAQqd,aAAa,OAAQH,GAC7Bld,EAAQqd,aAAa,WAAY5kB,GACjCuH,EAAQ5C,MAAMoI,QAAU,OACxBtB,SAASoZ,KAAKC,YAAYvd,GAC1BA,EAAQ8c,QACR5Y,SAASoZ,KAAKE,YAAYxd,IA7XX,EAgYnBrE,YAAc,WACV,IAAMlC,EAAc,EAAKnB,MAAMW,YAC3BtB,EAAM,EAAKW,MAAME,KAAKiB,GAEtBuQ,EAAOrS,EAAIe,KAAKyF,OAChBsf,EAAY,IAAIf,WAAW1S,GAC3BqS,EAAO,IAAIY,KAAK,CAACQ,GAAY,CAC7BrmB,KAAM,6BAEN8lB,EAAWC,IAAIC,gBAAgBf,GAC/Brc,EAAUkE,SAAS8Y,cAAc,KACjCvkB,EAAOd,EAAIc,KAAO,OACtBuH,EAAQqd,aAAa,OAAQH,GAC7Bld,EAAQqd,aAAa,WAAY5kB,GACjCuH,EAAQ5C,MAAMoI,QAAU,OACxBtB,SAASoZ,KAAKC,YAAYvd,GAC1BA,EAAQ8c,QACR5Y,SAASoZ,KAAKE,YAAYxd,IAjZX,EAoZnB4d,QAAU,WACN,IAAInkB,EAAc,EAAKnB,MAAMW,YAEzBtB,EADO,EAAKW,MAAME,KACPiB,GACf9B,EAAI6G,IAAM,GACV7G,EAAI8G,QAAU,GACd9G,EAAI2e,iBAAmBgB,MAAMsE,KACzB,CAAEviB,OAAQ1B,EAAI2e,iBAAiBjd,SAC/B,kBAxbgB,KA0bpB1B,EAAIuD,cAAgBH,GAEpBpD,EAAI4iB,cAAgB,GACpB5iB,EAAIwD,mBAzbe,EA0bnBxD,EAAI8iB,WAAa,EAEjB,EAAKniB,MAAMb,UAAUgC,EAAa9B,IApanB,EAuanB4f,MAAQ,WACJ,IAAI9d,EAAc,EAAKnB,MAAMW,YAClB,EAAKX,MAAME,KACPiB,GAEXf,KAAK6e,QACT,EAAKqG,WA7aU,EAgbnBC,WAAa,WACT,IAAIpkB,EAAc,EAAKnB,MAAMW,YACzBtB,EAAM,EAAKW,MAAME,KAAKiB,GAE1B,GA5cmB,IA4cf9B,EAAIwD,mBAAR,CAEIxD,EAAIuD,gBAAkBH,IAA0B,EAAK+iB,aAEzD,IAAIplB,EAAOf,EAAIe,KAIf,IAFAf,EAAIuD,cAAgBH,KAEP,CACT,IAAIgjB,EAAQrlB,EAAKqlB,QACjB,GAAc,OAAVA,EAAgB,CAChB,EAAK/C,kBAAkBZ,GAAmB2D,GAC1CpmB,EAAIuD,cAAgBH,GACpB,MAGJ,IAAIijB,EAAStlB,EAAKslB,SAElB,GAAe,OAAXA,EAAiB,CACjB,EAAKhD,kBAAkBZ,GAAmBD,IAC1CxiB,EAAIuD,cAAgBH,GACpB,MAEApD,EAAI6G,IAAI8H,KAAK0X,GAGjB,IAAIC,EAAUvlB,EAAKulB,UACnB,GAAgB,OAAZA,EAAkB,CACF,SAAZA,GAAkC,SAAZA,IAEtB,EAAKjD,kBAAkBZ,GAAmB6D,GAC1CtmB,EAAIuD,cAAgBH,IAExB,OAIR,EAAKogB,mBACL,EAAK7iB,MAAMb,UAAUgC,EAAa9B,KA1dnB,EA6dnBumB,aAAe,WACX,IAAIzkB,EAAc,EAAKnB,MAAMW,YACzBtB,EAAM,EAAKW,MAAME,KAAKiB,GAE1B,GAzfmB,IAyff9B,EAAIwD,mBAAR,CAEIxD,EAAIuD,gBAAkBH,IAA0B,EAAK+iB,aAEzD,IAAIplB,EAAOf,EAAIe,KAEff,EAAIuD,cAAgBH,GAEpB,IAAIgjB,EAAQrlB,EAAKqlB,QACjB,GAAc,OAAVA,EAIA,OAHA,EAAK/C,kBAAkBZ,GAAmB2D,GAC1CpmB,EAAIuD,cAAgBH,QACpB,EAAKzC,MAAMb,UAAUgC,EAAa9B,GAItC,IAAIqmB,EAAStlB,EAAKslB,SAElB,GAAe,OAAXA,EAIA,OAHA,EAAKhD,kBAAkBZ,GAAmBD,IAC1CxiB,EAAIuD,cAAgBH,QACpB,EAAKzC,MAAMb,UAAUgC,EAAa9B,GAGlCA,EAAI6G,IAAI8H,KAAK0X,GAGjB,IAAIC,EAAUvlB,EAAKulB,UACH,OAAZA,GACgB,SAAZA,GAAkC,SAAZA,IAEtB,EAAKjD,kBAAkBZ,GAAmB6D,GAC1CtmB,EAAIuD,cAAgBH,IAI5B,EAAKogB,mBACL,EAAK7iB,MAAMb,UAAUgC,EAAa9B,KAtgBnB,EAygBnBmmB,WAAa,WACT,IAAIrkB,EAAc,EAAKnB,MAAMW,YACzBtB,EAAM,EAAKW,MAAME,KAAKiB,GACtBD,EAAM7B,EAAI+B,QACd,GAAY,KAARF,EAAJ,CAIA,IAAId,EAAOf,EAAIe,KACf,EAAK6e,QACL,IAAIpI,EAAY,IAAIiG,GAAM7E,UACtB7X,EAAKkX,eACLwF,GAAMlM,WAAWC,QAGjBuH,EAAQ0E,GAAMxG,KAAKuP,cAAc3kB,GAEjC4kB,EAAWjP,EAAUpT,SAAS2U,EAAO,GACzC,GAAwB,IAApB0N,EAAS/kB,OACT,IAAK,IAAItB,KAAKqmB,EAAU,CACpB,IAAIzf,EAAOyf,EAASrmB,GAQpB,YAPA,EAAKijB,kBACDZ,GACA,8BACI,qDAA2Bzb,EAAK0J,OAAhC,KAA6C,IAC5C1J,EAAKgR,cAFV,MAQZ,IAAIuD,EAAO,KACPmL,EAAc,EAClB,EAAG,CAGC,GAAoB,KADpBnL,EAAO/D,EAAUpT,SAAS2U,EAAO2N,IACxBhlB,OACL,IAAK,IAAItB,KAAKmb,EAAM,CAChB,IAAIvU,EAAOuU,EAAKnb,GAQhB,YAPA,EAAKijB,kBACDZ,GACA,8BACI,qDAA2Bzb,EAAK0J,OAAhC,KAA6C,IAC5C1J,EAAKgR,cAFV,MAQZ0O,GAAe,QACD,OAATnL,GAET,IAAI9G,EAAcsE,EACb7W,KAAI,SAAC8E,GAAD,OAAUA,EAAKyN,eACnBkS,QAAO,SAAC1Q,EAAGC,GAAJ,OAAUD,EAAE2Q,OAAO1Q,KAAI,IACnCnV,EAAK8N,OAAO,EAAG4F,GAEf,EAAK+O,mBAIDxjB,EAAImf,aAAe1K,EACnB,EAAK4O,kBACDZ,GACA,8BACI,wCADJ,yBAaR,EAAK9hB,MAAMb,UAAUgC,EAAa9B,KAtlBnB,EAylBnB6mB,qBAAuB,WACnB,IAAI/kB,EAAc,EAAKnB,MAAMW,YACzBtB,EAAM,EAAKW,MAAME,KAAKiB,GAE1B,GAAK9B,EAAL,CAEA,IAAIM,EAAY,EAAKK,MAAMwc,iBAAiB7c,UACxCwmB,EAAW,EAAKnmB,MAAMwc,iBAAiB3c,IACvCD,EAAc,EAAKI,MAAMwc,iBAAiB5c,YAE9CP,EAAIc,KAAOR,EAEX,IAAIymB,EAAWD,IAAa9mB,EAAIiB,gBAC5B+lB,EAAWzmB,IAAgBP,EAAIe,KAAKC,WAEpCimB,GAAgB,EAEpB,GAAIF,GAAYC,EACWvJ,GAAMlB,KAAKS,QAAQb,KACrB2K,KACjBG,GAAgB,EAChBjnB,EAAIe,KAAO0c,GAAMlB,KAAKS,QAAQ+G,QAC1B+C,EACAvmB,EACA,EAAKgjB,WACL,IAEJvjB,EAAIiB,gBAAkB6lB,EACtB,EAAKb,WAGJgB,GACD,EAAK5D,kBACDZ,GACA,8BACI,sCADJ,sBACsCqE,EADtC,MAOZ,EAAKnmB,MAAMb,UAAUgC,EAAa9B,GAE9BinB,IACIF,GACA,EAAK1D,kBACDZ,GACA,8BACI,yCADJ,+BACkDqE,EADlD,MAKJE,GACA,EAAK3D,kBACDZ,GACA,8BACI,yCADJ,sCACyD,IACpDliB,EAFL,SAhpBG,EAwpBnB2mB,iBAAmB,SAAC/lB,GAChB4H,OAAOC,iBAAiB,YAAa,EAAKme,aAC1Cpe,OAAOC,iBAAiB,UAAW,EAAKoe,kBA1pBzB,EA6pBnBC,QAAU,SAAClmB,GACP,IAAI4a,EAAI5a,EAAMmmB,MACVC,EACAxe,OAAOye,YACPjb,SAASkb,gBAAgBC,aACzBnb,SAASoZ,KAAK+B,aAClB3L,EAAIwL,EAAIxL,GAEA,IACJA,EAAI,IACGA,EAAIwL,EAAI,MACfxL,EAAIwL,EAAI,KAGZ,EAAKpiB,SAAS,CAAEwiB,QAAS5L,KA3qBV,EA8qBnBsL,QAAU,SAAClmB,GACP,IAAI4a,EAAI5a,EAAMmmB,MACVC,EACAxe,OAAOye,YACPjb,SAASkb,gBAAgBC,aACzBnb,SAASoZ,KAAK+B,aAClB3L,EAAIwL,EAAIxL,GAEA,IACJA,EAAI,IACGA,EAAIwL,EAAI,MACfxL,EAAIwL,EAAI,KAGZ,EAAKpiB,SAAS,CAAEwiB,QAAS5L,KA5rBV,EA+rBnB6L,QAAU,SAACzmB,GACP,IAAI0mB,EAAI1mB,EAAM2mB,MAAQ,GAClBC,EACAhf,OAAOif,aACPzb,SAASkb,gBAAgBQ,cACzB1b,SAASoZ,KAAKsC,cAClBJ,EAAIE,EAAIF,GAEA,GACJA,EAAI,GACGA,EAAIE,EAAI,KACfF,EAAIE,EAAI,IAGZ,EAAK5iB,SAAS,CAAE+iB,QAASL,KA7sBV,EAgtBnBV,YAAc,SAAChmB,GACX,EAAKkmB,QAAQlmB,IAjtBE,EAotBnBimB,gBAAkB,SAACjmB,GACf,EAAKkmB,QAAQlmB,GACb4H,OAAOU,oBAAoB,YAAa,EAAK0d,aAC7Cpe,OAAOU,oBAAoB,UAAW,EAAK2d,kBAvtB5B,EA0tBnBe,iBAAmB,SAAChnB,GAChB4H,OAAOC,iBAAiB,YAAa,EAAKof,aAC1Crf,OAAOC,iBAAiB,UAAW,EAAKqf,kBA5tBzB,EA+tBnBD,YAAc,SAACjnB,GACX,EAAKymB,QAAQzmB,IAhuBE,EAmuBnBknB,gBAAkB,SAAClnB,GACf,EAAKymB,QAAQzmB,GACb4H,OAAOU,oBAAoB,YAAa,EAAK2e,aAC7Crf,OAAOU,oBAAoB,UAAW,EAAK4e,kBAtuB5B,EAyuBnBpkB,aAAe,WACX,EAAKtD,MAAMpB,oBAAmB,IA1uBf,EA6uBnB2E,SAAW,WACP,EAAKvD,MAAMjB,gBAAe,IA9uBX,EAivBnByE,UAAY,WACRmkB,MAAM,GACN,EAAK3nB,MAAMhB,iBAAgB,IAhvB3B,EAAKgB,MAAM4nB,WAAW,CAClBC,UAAW,CAAC,CAAE1nB,KAAM,UAAW8iB,KAAM,OACrCrc,QAAS,CAAEkhB,gDA2Cf,EAAKjpB,MAAQ,CACTmoB,QAAS,IACTO,QAAS,KAGb,EAAK1D,gBAAkB7f,IAAM4I,YAE7BxE,OAAOC,iBAAiB,QAAS,EAAK2Z,gBAEtC,EAAKhiB,MAAM+nB,0BAA0BC,GAAgB,MAErD,EAAKpF,WAAa,IAAI9F,GAAMtP,UAC5B,EAAKoV,WAAW3T,SAAW,WACvB,IAAI5P,EAAM,EAAKW,MAAME,KAAK,EAAKF,MAAMW,aACjCtB,IACAA,EAAIwD,mBAtFM,IA0FlB,EAAK+f,WAAW1T,YAAc,WAC1B,IAAI7P,EAAM,EAAKW,MAAME,KAAK,EAAKF,MAAMW,aACjCtB,IACAA,EAAIwD,mBA5FM,IAgGlB,EAAK+f,WAAWpU,UAAY,SAACuB,GACzB,EAAK2S,kBAAkBZ,GAAoB,MAAQ/R,IAGvD,EAAK6S,WAAW5T,aAAe,SAACsC,GAC5B,EAAKoR,kBAAkBZ,GAAoB,MAAQxQ,IAGvD,EAAKsR,WAAWzT,WAAa,WACzB,IAAIhO,EAAc,EAAKnB,MAAMW,YACzBtB,EAAM,EAAKW,MAAME,KAAKiB,GAErB9B,IAELA,EAAIuD,cAAgBH,GAEpB,EAAKigB,kBACDZ,GACA,gCAGJ,EAAK9hB,MAAMb,UAAUgC,EAAa9B,KAGtC,EAAKmkB,gBAlGU,E,qDAuvBf,IAAIriB,EAAcE,KAAKrB,MAAMW,YACzBtB,EAAMgC,KAAKrB,MAAME,KAAKiB,GAEtB8mB,EAAW5mB,KAAKrB,MAAME,KAAKa,OAAS,EACpCuF,GAAa,EAIjB,OAFIjH,IAAKiH,EArxBU,IAqxBGjH,EAAIwD,oBAGtB,kBAAC,IAAMqlB,SAAP,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CACIje,gBAAiB3D,EACjBsE,OAAQvJ,KAAKmiB,cACb3Y,QAASxJ,KAAK2B,cACd8H,QAASzJ,KAAK6B,kBACd6H,OAAQ1J,KAAKmkB,WACbva,OAAQ5J,KAAKkkB,WACbva,QAAS3J,KAAKukB,eAElB,kBAAC,EAAD,CACIniB,SAAUpC,KAAKmkB,WACf9hB,SAAUrC,KAAKkkB,WACf5hB,WAAYtC,KAAKukB,aACjBviB,YAAahC,KAAKgC,YAClBF,YAAa9B,KAAK8B,YAClBC,aAAc/B,KAAK+B,aACnBN,kBAAmBzB,KAAKoiB,mBACxB1gB,iBAAkB1B,KAAKqiB,kBACvB1gB,cAAe3B,KAAK2B,cACpBC,cAAe5B,KAAK4B,cACpBC,kBAAmB7B,KAAK6B,qBAE1B+kB,GACE,yBAAK3mB,UAAU,WACX,6BACI,4BACI,kBAAC,IAAD,CAAWpC,GAAG,iBAAd,sBAIJ,2BACI,kBAAC,IAAD,CAAWA,GAAG,oBAAd,+HAMJ,4BACIoC,UAAU,SACVE,QAASH,KAAKmiB,eAEd,kBAAC,IAAD,CAAWtkB,GAAG,iBAAd,cAIJ,4BACIoC,UAAU,SACVE,QAASH,KAAK2B,eAEd,kBAAC,IAAD,CAAW9D,GAAG,uBAAd,kBAIJ,4BACIoC,UAAU,SACVE,QAASH,KAAK4B,eAEd,kBAAC,IAAD,CAAW/D,GAAG,qBAAd,kBAOf+oB,GACG,yBACI3mB,UAAU,OACVwD,MAAO,CACHqjB,oBAAoB,QAAD,OAAU9mB,KAAKxC,MAAMmoB,QAArB,MACnBoB,iBAAiB,aAAD,OAAe/mB,KAAKxC,MAAM0oB,QAA1B,SAGpB,kBAAC,EAAD,CACItlB,YAAaqE,EACbvG,OAAQsB,KAAKmiB,gBAEjB,kBAAC,EAAD,CACI5e,gBAAiBvD,KAAKmmB,iBACtBlmB,UAAU,gBAEV,kBAAC,EAAD,CACIgF,WAAYA,EACZX,MAAOtG,EAAI4iB,gBAEf,kBAAC,GAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEJ,kBAAC,EAAD,CACIrd,gBAAiBvD,KAAKklB,iBACtBjlB,UAAU,cAEV,kBAAC,GAAD,CACIsb,cAAevb,KAAK6kB,uBAExB,kBAAC,GAAD,MACA,kBAAC,GAAD,QAIZ,2BACIpnB,KAAK,OACL8C,SAAUP,KAAKsiB,aACftW,IAAKhM,KAAKwiB,uB,GA72BZxhB,aAs4BHuB,eAAatB,aAlBJ,SAACzD,GACrB,MAAO,CACHqB,KAAMrB,EAAMqB,KACZS,YAAa9B,EAAM8B,YACnB6b,iBAAkB3d,EAAM2d,qBAIL,SAACja,EAAUC,GAAX,MAAyB,CAChDzC,OAAQ,SAACV,GAAD,OAASkD,E5Bl6BC,SAAClD,GAAD,MAAU,CAC5BP,KAAMH,EACNU,O4Bg6B0BU,CAAOV,KACjCF,UAAW,SAACC,EAAOC,GAAR,OAAgBkD,EAASpD,EAAUC,EAAOC,KACrDJ,UAAW,SAACC,GAAD,OAAQqD,EAAStD,EAAUC,KACtCI,mBAAoB,SAACC,EAAGC,EAAGC,GAAP,OAAa8C,EAASjD,EAAmBC,EAAGC,EAAGC,KACnEV,eAAgB,SAAC8E,GAAD,OAAatB,EAASxD,EAAe8E,KACrD7E,gBAAiB,SAAC6E,GAAD,OAAatB,EAASvD,EAAgB6E,KACvDjF,mBAAoB,SAACiF,GAAD,OAAatB,EAAS3D,EAAmBiF,QAGrCvB,CAA6Cyf,K,kBCn7B1DsG,GAvBI,WAAyB,IAAxBxpB,EAAuB,uDAAf,GAAIypB,EAAW,uCACvC,OAAQA,EAAOxpB,MACX,IAAK,UACD,MAAM,GAAN,oBAAWD,GAAX,CAAkBypB,EAAOjpB,MAC7B,IAAK,aACD,OAAOR,EAAM0C,KAAI,SAACgnB,EAAGnpB,GACjB,OAAIA,IAAUkpB,EAAOlpB,MACVic,OAAOmN,OAAO,GAAID,EAAGD,EAAOjpB,KAGhCkpB,KAGf,IAAK,aACD,MAAM,GAAN,oBACO1pB,EAAM2Y,MAAM,EAAG8Q,EAAOppB,KAD7B,aAEOL,EAAM2Y,MAAM8Q,EAAOppB,GAAK,KAEnC,QACI,OAAOL,ICVJ4pB,GATY,WAAwB,IAAvB5pB,EAAsB,uDAAd,EAAGypB,EAAW,uCAC9C,OAAQA,EAAOxpB,MACX,IAAK,aACD,OAAOwpB,EAAOppB,GAClB,QACI,OAAOL,ICDJ6pB,GAJe,WAAyB,IAAxB7pB,EAAuB,uDAAf,GACnC,OAAOA,GCQI8pB,GATgB,WAAyB,IAAxB9pB,EAAuB,uDAAf,GAAIypB,EAAW,uCACnD,OAAQA,EAAOxpB,MACX,IAAK,0BACD,OAAOwpB,EAAO5oB,QAClB,QACI,OAAOb,I,SCuBJ4pB,GA5BY,WAMrB,IALF5pB,EAKC,uDALO,CACJyO,UAAU,EACVvG,MAAM,GAEVuhB,EACC,uCACD,OAAQA,EAAOxpB,MACX,IAAK,mBACD,OAAO,6BACAD,GADP,IAEIkI,KAAMuhB,EAAOzpB,QAErB,IAAK,oBACD,OAAO,6BACAA,GADP,IAEImJ,MAAOsgB,EAAOzpB,QAEtB,IAAK,uBACD,OAAO,6BACAA,GADP,IAEIyO,SAAUgb,EAAOzpB,QAEzB,QACI,OAAOA,IChBJ+pB,gBAAgB,CAC3B1oB,QACAS,eACAkoB,mBACArM,oBACA1V,oBACAgiB,SAAUC,MCARnQ,GAAQoQ,aAEVC,GACA,GAEA7gB,OAAO8gB,8BAAgC9gB,OAAO8gB,gCAIlDC,IAASC,OACL,kBAAC,IAAD,CAAkBxQ,MAAOA,IACrB,kBAAC,IAAD,CAAUA,MAAOA,IACb,kBAAC,GAAD,QAIRhN,SAASK,eAAe,W","file":"static/js/main.c021d99f.chunk.js","sourcesContent":["export const Actions = {\n    SELECT_TAB: \"SELECT_TAB\",\n    ADD_TAB: \"ADD_TAB\",\n    UPDATE_TAB: \"UPDATE_TAB\",\n    DELETE_TAB: \"DELETE_TAB\",\n    UPDATE_PROJECT_SETTINGS: \"UPDATE_PROJECT_SETTINGS\",\n    SET_HELP_VISIBLE: \"SET_HELP_VISIBLE\",\n    SET_ABOUT_VISIBLE: \"SET_ABOUT_VISIBLE\",\n    SET_SETTINGS_VISIBLE: \"SET_SETTINGS_VISIBLE\",\n};\n\nexport const setSettingsVisible = (state) => ({\n    type: Actions.SET_SETTINGS_VISIBLE,\n    state,\n});\n\nexport const setHelpVisible = (state) => ({\n    type: Actions.SET_HELP_VISIBLE,\n    state,\n});\n\nexport const setAboutVisible = (state) => ({\n    type: Actions.SET_ABOUT_VISIBLE,\n    state,\n});\n\nexport const selectTab = (id) => ({\n    type: Actions.SELECT_TAB,\n    id,\n});\n\nexport const addTab = (tab) => ({\n    type: Actions.ADD_TAB,\n    tab,\n});\n\nexport const updateTab = (index, tab) => ({\n    type: Actions.UPDATE_TAB,\n    index,\n    tab,\n});\n\nexport const deleteTab = (id) => ({\n    type: Actions.DELETE_TAB,\n    id,\n});\n\nexport const setProjectSettings = (n, s, i) => ({\n    type: Actions.UPDATE_PROJECT_SETTINGS,\n    payload: {\n        file_name: n,\n        memory_size: s,\n        isa: i,\n    },\n});\n","import React, { Component } from \"react\";\nimport AceEditor from \"react-ace\";\n\nimport \"ace-builds/src-noconflict/mode-java\";\nimport \"ace-builds/src-noconflict/theme-github\";\n\nimport {\n    selectTab,\n    deleteTab,\n    updateTab,\n    setProjectSettings,\n} from \"../actions\";\nimport { connect } from \"react-redux\";\n\nclass TextEditor extends Component {\n    addTab = () => {\n        this.props.addTab();\n    };\n\n    handleTabChange = (id) => {\n        this.props.selectTab(id);\n        let tab = this.props.tabs[id];\n\n        if (tab) {\n            this.props.setProjectSettings(\n                tab.name,\n                tab.core.memorySize,\n                tab.instruction_set\n            );\n        }\n    };\n\n    handleTabClose = (event, id) => {\n        event.stopPropagation();\n\n        let selected = this.props.selectedtab;\n        if (selected >= id) selected -= 1;\n\n        selected = Math.min(Math.max(selected, 0), this.props.tabs.length - 1);\n\n        this.props.selectTab(selected);\n\n        let tab = this.props.tabs[selected];\n\n        if (tab) {\n            this.props.setProjectSettings(\n                tab.name,\n                tab.core.memorySize,\n                tab.instruction_set\n            );\n        }\n\n        this.props.deleteTab(id);\n    };\n\n    setEditorValue = (val) => {\n        let current_tab = this.props.selectedtab;\n        let tab = this.props.tabs[current_tab];\n        tab.content = val;\n        this.props.updateTab(current_tab, tab);\n    };\n\n    render() {\n        let tabs = this.props.tabs;\n\n        return (\n            <main id=\"text_editor\" className=\"text_editor\">\n                <ul className=\"page_tabs\">\n                    {tabs.map((tab, id) => {\n                        return (\n                            <li\n                                onClick={() => this.handleTabChange(id)}\n                                key={id}\n                                className={\n                                    this.props.selectedtab === id\n                                        ? \"selected\"\n                                        : \"\"\n                                }\n                            >\n                                <span>{tab.name}</span>\n                                <div\n                                    onClick={(event) =>\n                                        this.handleTabClose(event, id)\n                                    }\n                                ></div>\n                            </li>\n                        );\n                    })}\n                    <li className=\"add_tab\" onClick={this.addTab}></li>\n                </ul>\n                {\n                    <AceEditor\n                        mode=\"java\"\n                        theme=\"github\"\n                        onChange={this.setEditorValue}\n                        width=\"100%\"\n                        height=\"\"\n                        name=\"editor_area\"\n                        className=\"editor_area\"\n                        value={tabs[this.props.selectedtab].content}\n                        readOnly={this.props.is_disabled}\n                        editorProps={{ $blockScrolling: Infinity }}\n                    />\n                }\n            </main>\n        );\n    }\n}\n\nconst stateToProps = (state) => {\n    return {\n        tabs: state.tabs,\n        selectedtab: state.selectedtab,\n    };\n};\n\nconst dispatchToProps = (dispatch, ownProps) => ({\n    selectTab: (id) => dispatch(selectTab(id)),\n    updateTab: (index, tab) => dispatch(updateTab(index, tab)),\n    deleteTab: (id) => dispatch(deleteTab(id)),\n    setProjectSettings: (n, s, i) => dispatch(setProjectSettings(n, s, i)),\n});\n\nexport default connect(stateToProps, dispatchToProps)(TextEditor);\n","import React, { Component } from \"react\";\nimport { Translate, withLocalize } from \"react-localize-redux\";\nimport { connect } from \"react-redux\";\nimport {\n    setSettingsVisible,\n    setHelpVisible,\n    setAboutVisible,\n} from \"../actions\";\n\nconst SimulatingStatus = {\n    Stopped: 0,\n    Step: 1,\n    Play: 2,\n};\n\nconst CONSOLE_INPUT_NONE = 0;\n\nclass Navigation extends Component {\n    render() {\n        let assemble_css = \"\";\n        const tab = this.props.tabs[this.props.selectedtab];\n\n        if (tab) {\n            if (tab.runningStatus === SimulatingStatus.Stopped) {\n                assemble_css = \" assemble_ready\";\n            }\n\n            if (tab.console_input_type !== CONSOLE_INPUT_NONE) {\n                assemble_css += \" simulate_prevent_input\";\n            }\n        }\n\n        return (\n            <nav id=\"navigation\" className=\"navigation\">\n                <ul>\n                    <li className=\"oak_logo\">\n                        <ul className=\"drop_down\">\n                            <li onClick={this.props.handleAddTabRiscv}>\n                                <Translate id=\"menus.add_tab_riscv\" />\n                            </li>\n                            <li onClick={this.props.handleAddTabMips}>\n                                <Translate id=\"menus.add_tab_mips\" />\n                            </li>\n                            <li onClick={this.props.handleLoadAsm}>\n                                <Translate id=\"menus.load_assembly\" />\n                            </li>\n                            <li onClick={this.props.handleLoadBin}>\n                                <Translate id=\"menus.load_binary\" />\n                            </li>\n                            <li onClick={this.props.handleDownloadAsm}>\n                                <Translate id=\"menus.download_assembly\" />\n                            </li>\n                            <li onClick={this.props.downloadBin}>\n                                <Translate id=\"menus.download_binary\" />\n                            </li>\n                            <li onClick={this.props.downloadBinH}>\n                                <Translate id=\"menus.download_binary_h\" />\n                            </li>\n                            <li onClick={this.props.downloadRam}>\n                                <Translate id=\"menus.download_memory\" />\n                            </li>\n                        </ul>\n                    </li>\n                    <li onClick={this.props.showSettings}>\n                        <Translate id=\"menus.settings\" />\n                    </li>\n                    <li onClick={this.props.showHelp}>\n                        <Translate id=\"menus.help\" />\n                    </li>\n                    <li onClick={this.props.showAbout}>\n                        <Translate id=\"menus.about\" />\n                    </li>\n                </ul>\n\n                <div className=\"buttons_right\">\n                    <button\n                        className={`assemble`}\n                        onClick={this.props.assemble}\n                    ></button>\n                    <button\n                        className={`simulate${assemble_css}`}\n                        onClick={this.props.simulate}\n                    ></button>\n                    <button\n                        className={`simulate_step${assemble_css}`}\n                        onClick={this.props.stepbystep}\n                    ></button>\n                </div>\n            </nav>\n        );\n    }\n}\n\nconst stateToProps = (state) => {\n    return {\n        tabs: state.tabs,\n        selectedtab: state.selectedtab,\n    };\n};\n\nconst appDispatchToProps = (dispatch, ownProps) => ({\n    showHelp: (visible) => dispatch(setHelpVisible(visible)),\n    showAbout: (visible) => dispatch(setAboutVisible(visible)),\n    showSettings: (visible) => dispatch(setSettingsVisible(visible)),\n});\n\nexport default withLocalize(\n    connect(stateToProps, appDispatchToProps)(Navigation)\n);\n","import React, { Component } from \"react\";\n\nexport default class PanelContainer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selected: 0,\n        };\n    }\n\n    handleClickTab(e, key) {\n        e.preventDefault();\n        this.setState({ selected: key });\n    }\n\n    renderTabs = () => {\n        return (\n            <ul className=\"panel_tabs\">\n                {React.Children.map(this.props.children, (child, i) => (\n                    <li\n                        className={this.state.selected === i ? \"selected\" : \"\"}\n                        key={child.type.display_name}\n                        onClick={(e) => this.handleClickTab(e, i)}\n                    >\n                        {child.type.display_name}\n                    </li>\n                ))}\n            </ul>\n        );\n    };\n\n    render() {\n        const { children } = this.props;\n        const childrenProps = React.Children.map(children, (child, id) => {\n            return this.state.selected === id && React.cloneElement(child);\n        });\n        return (\n            <div\n                id=\"panel_container\"\n                className={`panel_container ${this.props.className}`}\n            >\n                <div\n                    onMouseDown={this.props.handleStartDrag}\n                    className=\"panel_drag\"\n                ></div>\n                {this.renderTabs()}\n                {childrenProps}\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\nexport default class Select extends Component {\n    render() {\n        return (\n            <div className=\"select_group\">\n                <select\n                    onChange={this.props.onChange}\n                    value={this.props.value}\n                    style={{\n                        backgroundImage: `url(images/icons/input_select_arrow.svg), url(${this.props.icon})`,\n                    }}\n                >\n                    {this.props.children}\n                </select>\n                <label className=\"group_label\">{this.props.placeholder}</label>\n            </div>\n        );\n    }\n}\n","export function padNumber(str, length) {\n    var padded = str;\n    for (var i = 0; i < length - str.length; i++) {\n        padded = \"0\" + padded;\n    }\n    return padded;\n}\n\nexport function parseToFloat(num) {\n    return num;\n}\n\n// From Jonas Raoni Soares Silva, JSFromHell states\n//          that code can be redistributed and modified\n//          as long as original credits are kept.\n// http://jsfromhell.com/classes/binary-parser\nexport function encodeFloat(number) {\n    return number;\n    /*var n = +number,\n        status = (n !== n) || n === -Infinity || n == +Infinity ? n : 0,\n        exp = 0,\n        len = 281, // 2 * 127 + 1 + 23 + 3,\n        bin = new Array(len),\n        signal = (n = status !== 0 ? 0 : n) < 0,\n        n = Math.abs(n),\n        intPart = Math.floor(n),\n        floatPart = n - intPart,\n        i, lastBit, rounded, j, exponent;\n\n    if (status !== 0) {\n        if (n !== n) {\n            return 0x7fc00000;\n        }\n        if (n === Infinity) {\n            return 0x7f800000;\n        }\n        if (n === -Infinity) {\n            return 0xff800000\n        }\n    }\n\n    i = len;\n    while (i) {\n        bin[--i] = 0;\n    }\n\n    i = 129;\n    while (intPart && i) {\n        bin[--i] = intPart % 2;\n        intPart = Math.floor(intPart / 2);\n    }\n\n    i = 128;\n    while (floatPart > 0 && i) {\n        (bin[++i] = ((floatPart *= 2) >= 1) - 0) && --floatPart;\n    }\n\n    i = -1;\n    while (++i < len && !bin[i]);\n\n    if (bin[(lastBit = 22 + (i = (exp = 128 - i) >= -126 && exp <= 127 ? i + 1 : 128 - (exp = -127))) + 1]) {\n        if (!(rounded = bin[lastBit])) {\n            j = lastBit + 2;\n            while (!rounded && j < len) {\n                rounded = bin[j++];\n            }\n        }\n\n        j = lastBit + 1;\n        while (rounded && --j >= 0) {\n            (bin[j] = !bin[j] - 0) && (rounded = 0);\n        }\n    }\n    i = i - 2 < 0 ? -1 : i - 3;\n    while(++i < len && !bin[i]);\n    (exp = 128 - i) >= -126 && exp <= 127 ? ++i : exp < -126 && (i = 255, exp = -127);\n    (intPart || status !== 0) && (exp = 128, i = 129, status == -Infinity ? signal = 1 : (status !== status) && (bin[i] = 1));\n\n    n = Math.abs(exp + 127);\n    exponent = 0;\n    j = 0;\n    while (j < 8) {\n        exponent += (n % 2) << j;\n        n >>= 1;\n        j++;\n    }\n\n    var mantissa = 0;\n    n = i + 23;\n    for (; i < n; i++) {\n        mantissa = (mantissa << 1) + bin[i];\n    }\n    return ((signal ? 0x80000000 : 0) + (exponent << 23) + mantissa) | 00;*/\n}\n","import React, { Component } from \"react\";\nimport Select from \"../modules/select\";\nimport { padNumber } from \"./numberttransform\";\nimport { connect } from \"react-redux\";\n\nclass PanelMemory extends Component {\n    static display_name = \"memory\";\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            register_type: 0,\n        };\n    }\n\n    handleType = (event) => {\n        this.setState({ register_type: parseInt(event.target.value, 10) });\n    };\n\n    translateRegister = (input) => {\n        switch (this.state.register_type) {\n            default:\n            case 0: // Hex\n                return padNumber((input >>> 0).toString(16), 2);\n            case 1: // uint\n                return padNumber((input >>> 0).toString(10), 3);\n            case 2: // octal\n                return padNumber((input >>> 0).toString(8), 3);\n            case 3: // bin\n                return padNumber((input >>> 0).toString(2), 8);\n        }\n    };\n\n    render() {\n        let tabs = this.props.tabs;\n        if (tabs.length === 0) return <div></div>;\n\n        let memory = tabs[this.props.selectedtab].core.memory;\n        let empty = memory.length === 0;\n        return (\n            <div id=\"panel_memory\" className=\"panel panel_memory\">\n                {empty && <span className=\"panel_empty\">Memory Empty</span>}\n                {!empty && (\n                    <Select\n                        onChange={this.handleType}\n                        icon=\"images/icons/input_type.svg\"\n                        placeholder=\"Display Type\"\n                        defaultValue=\"0\"\n                    >\n                        <option value=\"0\">Hex</option>\n                        <option value=\"1\">Decimal</option>\n                        <option value=\"2\">Octal</option>\n                        <option value=\"3\">Binary</option>\n                    </Select>\n                )}\n\n                {!empty &&\n                    memory.map((byte, i) => {\n                        let val = this.translateRegister(byte);\n                        return <span key={i}>{val} </span>;\n                    })}\n            </div>\n        );\n    }\n}\n\nconst stateToProps = (state) => {\n    return {\n        tabs: state.tabs,\n        selectedtab: state.selectedtab,\n    };\n};\n\nexport default connect(stateToProps)(PanelMemory);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nconst SimulatingStatus = {\n    Stopped: 0,\n    Step: 1,\n    Play: 2,\n};\n\nclass PanelConsole extends Component {\n    static display_name = \"console\";\n\n    render() {\n        let tab = this.props.tabs[this.props.selectedtab];\n        if (!tab) return <div></div>;\n\n        let log = tab.console;\n        let empty = log.length === 0;\n\n        const running = tab.runningStatus !== SimulatingStatus.Stopped;\n\n        return (\n            <div id=\"panel_console\" className=\"panel panel_console\">\n                {empty && <span className=\"panel_empty\">Console Empty</span>}\n                {!empty &&\n                    log.map((line, i) => {\n                        return <div key={i}>{line}</div>;\n                    })}\n                {this.props.show_input && (\n                    <span>\n                        <span className=\"blinker\">{\"<<\"}</span>{\" \"}\n                        {this.props.input}\n                    </span>\n                )}\n                {running && (\n                    <div className=\"running_console\">\n                        Simulation still not completed...\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nconst stateToProps = (state) => {\n    return {\n        tabs: state.tabs,\n        selectedtab: state.selectedtab,\n    };\n};\n\nexport default connect(stateToProps)(PanelConsole);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nclass PanelLog extends Component {\n    static display_name = \"log\";\n\n    render() {\n        let empty = this.props.core.log.length === 0;\n        return (\n            <div id=\"panel_log\" className=\"panel panel_log\">\n                {empty && (\n                    <span className=\"panel_empty\">Instruction Log Empty</span>\n                )}\n                {!empty &&\n                    this.props.core.log.map((instruction, i) => {\n                        return <div key={i}>{instruction}</div>;\n                    })}\n            </div>\n        );\n    }\n}\n\nconst stateToProps = (state) => {\n    return {\n        core: state.tabs[state.selectedtab],\n    };\n};\n\nexport default connect(stateToProps)(PanelLog);\n","import React, { Component } from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { Translate, withLocalize } from \"react-localize-redux\";\nimport { setHelpVisible } from \"../actions\";\n\nclass Help extends Component {\n    handleClose = (e) => {\n        e.preventDefault();\n        this.props.setHelpVisible(false);\n    };\n\n    handleStopClose = (event) => {\n        event.stopPropagation();\n    };\n\n    render() {\n        return (\n            <div\n                id=\"help\"\n                onClick={this.handleClose}\n                className={`settings_overlay overlay fader${\n                    this.props.visible ? \" fader_shown\" : \"\"\n                }`}\n            >\n                <div\n                    className=\"settings_container\"\n                    onClick={this.handleStopClose}\n                >\n                    <button\n                        className=\"floating_close\"\n                        onClick={this.handleClose}\n                    ></button>\n                    <h2>\n                        <Translate id=\"help.title\" />\n                    </h2>\n                    <div className=\"overlay_contents\">\n                        <Translate\n                            id=\"help.data\"\n                            options={{ renderInnerHtml: true }}\n                        />\n                        <button className=\"button\" onClick={this.handleClose}>\n                            Close\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst stateToProps = (state) => {\n    return {\n        visible: state.panel_visibility.help,\n    };\n};\n\nconst dispatchToProps = (dispatch, ownProps) => ({\n    setHelpVisible: (visible) => dispatch(setHelpVisible(visible)),\n});\n\nexport default withLocalize(connect(stateToProps, dispatchToProps)(Help));\n","export default {\n    core: [\n        {\n            affiliation: \"Research Associate, American University in Cairo\",\n            pic: \"donn.jpg\",\n            name: 'Mohamed \"Donn\" Gaber',\n            job: \"Assembler / Simulator Developer\",\n            link: \"https://donn.website/\",\n            desc: \"Maintainer of the Cloud V platform on both https://cloudv.io and https://efabless.com. I consume an unhealthy amount of video games in my spare time.\",\n        },\n        {\n            affiliation: \"Student, American University in Cairo (formerly)\",\n            pic: \"karimio.jpg\",\n            name: \"Karim Abdel Hamid\",\n            job: \"Primary Front-End/IDE Developer\",\n            link: \"https://karimio.github.io/\",\n            desc: \"I'm a game and web developer; love to write stories, play guitar, & paint.\",\n        },\n    ],\n    additional: [\n        {\n            affiliation: \"Student, American University in Cairo (formerly)\",\n            pic: \"ali_khaled.jpg\",\n            name: \"Ali Khaled\",\n            job: \"MIPS Assistance\",\n            link: \"https://github.com/loshya\",\n            desc: \"りゅうがわがてきをクラウ！\",\n        },\n        {\n            affiliation: \"Professor, American University in Cairo\",\n            pic: \"shalan.jpg\",\n            name: \"Dr. Mohamed Shalan\",\n            job: \"Advisor\",\n            link: \"https://github.com/shalan\",\n            desc: \"Founder at Cloud V, Open Hardware Researcher and Advocate\",\n        },\n    ],\n    translators: [],\n};\n","import React, { Component } from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { Translate, withLocalize } from \"react-localize-redux\";\nimport { setAboutVisible } from \"../actions\";\nimport devs from \"../developer_list.js\";\n\nclass About extends Component {\n    handleClose = (e) => {\n        e.preventDefault();\n        this.props.setAboutVisible(false);\n    };\n\n    handleStopClose = (event) => {\n        event.stopPropagation();\n    };\n\n    printdev = (arr) => {\n        return arr.map((element, i) => {\n            return (\n                <a key={i} href={element.link}>\n                    <img\n                        src={`images/about/${element.pic}`}\n                        alt={element.name}\n                    />\n                    <h4>{element.name}</h4>\n                    <span>{element.job}</span>\n                    <span>{element.affiliation}</span>\n                    <p>{element.desc}</p>\n                </a>\n            );\n        });\n    };\n\n    render() {\n        return (\n            <div\n                id=\"about\"\n                onClick={this.handleClose}\n                className={`settings_overlay overlay fader${\n                    this.props.visible ? \" fader_shown\" : \"\"\n                }`}\n            >\n                <div\n                    className=\"settings_container\"\n                    onClick={this.handleStopClose}\n                >\n                    <button\n                        className=\"floating_close\"\n                        onClick={this.handleClose}\n                    ></button>\n                    <h2>\n                        <Translate id=\"about.title\" />\n                    </h2>\n                    <div className=\"overlay_contents\">\n                        <div className=\"devlist\">\n                            <h3>\n                                <Translate id=\"about.core_devs\" />\n                            </h3>\n                            {this.printdev(devs.core)}\n                        </div>\n                        <div className=\"devlist\">\n                            <h3>\n                                <Translate id=\"about.additional_devs\" />\n                            </h3>\n                            {this.printdev(devs.additional)}\n                        </div>\n                        {devs.translators.length > 0 && (\n                            <div className=\"translatorlist\">\n                                <h3>\n                                    <Translate id=\"about.translators\" />\n                                </h3>\n                                {devs.translators.map((element, i) => {\n                                    return (\n                                        <a key={i} href={element.link}>\n                                            <h4>{element.name}</h4>\n                                            <span>{element.lang}</span>\n                                        </a>\n                                    );\n                                })}\n                            </div>\n                        )}\n                    </div>\n                    <button className=\"button\" onClick={this.handleClose}>\n                        Close\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst stateToProps = (state) => {\n    return {\n        visible: state.panel_visibility.about,\n    };\n};\n\nconst dispatchToProps = (dispatch, ownProps) => ({\n    setAboutVisible: (visible) => dispatch(setAboutVisible(visible)),\n});\n\nexport default withLocalize(connect(stateToProps, dispatchToProps)(About));\n","import React, { Component } from \"react\";\n\nexport default class HotkeyInput extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            capturing: false,\n            combo: \"a_110\",\n            shift: true,\n            alt: true,\n            ctrl: true,\n            key_name: \"n\",\n        };\n    }\n\n    handleClick = (event) => {\n        this.setState({ capturing: true });\n        window.addEventListener(\"keydown\", this.handleKey);\n    };\n\n    handleKey = (event) => {\n        if (this.state.capturing) {\n            event.stopPropagation();\n            event.preventDefault();\n\n            let key = event.key.toLowerCase();\n            if (key === \"control\" || key === \"shift\" || key === \"alt\")\n                return false;\n\n            this.setState({\n                shift: event.shiftKey,\n                ctrl: event.ctrlKey,\n                alt: event.altKey,\n                key_name: key,\n                capturing: false,\n            });\n\n            window.removeEventListener(\"keydown\", this.handleKey);\n            this.props.save();\n        }\n    };\n\n    testKey = (key_ctrl, key_alt, key_shift, key_name) => {\n        return (\n            key_shift === this.state.shift &&\n            key_alt === this.state.alt &&\n            key_ctrl === this.state.ctrl &&\n            key_name === this.state.key_name\n        );\n    };\n\n    setKey = (key_ctrl, key_alt, key_shift, key_name, done = () => {}) => {\n        this.setState(\n            {\n                ctrl: key_ctrl,\n                alt: key_alt,\n                shift: key_shift,\n                key_name: key_name,\n            },\n            done\n        );\n    };\n\n    getKey = () => {\n        let key = \"_\" + this.state.key_name;\n        if (this.state.shift) key = \"s\" + key;\n\n        if (this.state.alt) key = \"a\" + key;\n\n        if (this.state.ctrl) key = \"c\" + key;\n\n        return key;\n    };\n\n    setKeyStr = (str) => {\n        let upos = str.indexOf(\"_\");\n        let mods = str.substr(0, upos);\n\n        let shift = mods.indexOf(\"s\") !== -1;\n        let alt = mods.indexOf(\"a\") !== -1;\n        let ctrl = mods.indexOf(\"c\") !== -1;\n        let key = str.substr(upos + 1);\n\n        this.setKey(ctrl, alt, shift, key);\n    };\n\n    render() {\n        let c = !this.state.capturing;\n        return (\n            <div\n                className={`key_bar${this.state.capturing ? \" capturing\" : \"\"}`}\n                onClick={this.handleClick}\n                tabIndex={0}\n            >\n                {!c && <span>Capturing</span>}\n                {c && this.state.ctrl && <span>Ctrl</span>}\n                {c && this.state.alt && <span>Alt</span>}\n                {c && this.state.shift && <span>Shift</span>}\n                {c && <span>{this.state.key_name}</span>}\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport HotkeyInput from \"../modules/hotkey.js\";\nimport Select from \"../modules/select\";\n\nimport { connect } from \"react-redux\";\nimport { withLocalize } from \"react-localize-redux\";\nimport { setSettingsVisible } from \"../actions\";\n\nconst themes = [\"theme_light\", \"theme_dark\", \"theme_dos\", \"theme_apple2\"];\n\nclass Settings extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            default_isa: \"RISC-V\",\n            theme: \"theme_light\",\n            use_cookies: false,\n        };\n\n        window.addEventListener(\"keydown\", this.handleKey);\n\n        for (let i = 1; i < themes.length; ++i)\n            document.getElementById(themes[i]).disabled = true;\n\n        this.comp_new = React.createRef();\n        this.comp_load = React.createRef();\n        this.comp_save = React.createRef();\n        this.comp_assemble = React.createRef();\n        this.comp_sim = React.createRef();\n        this.comp_step = React.createRef();\n    }\n\n    handleClose = (e) => {\n        e.preventDefault();\n        this.props.setSettingsVisible(false);\n    };\n\n    handleStopClose = (event) => {\n        event.stopPropagation();\n    };\n\n    handleKey = (event) => {\n        if (this.props.canhandleinput) {\n            let key_name = event.key.toLowerCase();\n            if (\n                key_name === \"control\" ||\n                key_name === \"shift\" ||\n                key_name === \"alt\"\n            )\n                return false;\n\n            let key_ctrl = event.ctrlKey;\n            let key_alt = event.altKey;\n            let key_shift = event.shiftKey;\n            let cancel = false;\n\n            let hotkey = [\n                this.comp_new.current,\n                this.comp_load.current,\n                this.comp_save.current,\n                this.comp_assemble.current,\n                this.comp_step.current,\n                this.comp_sim.current,\n            ];\n\n            let hotkeyfns = [\n                this.props.fn_new,\n                this.props.fn_load,\n                this.props.fn_save,\n                this.props.fn_ass,\n                this.props.fn_step,\n                this.props.fn_sim,\n            ];\n\n            for (let i = 0; i < hotkey.length; ++i) {\n                if (hotkey[i].testKey(key_ctrl, key_alt, key_shift, key_name)) {\n                    hotkeyfns[i]();\n                    cancel = true;\n                }\n            }\n\n            if (cancel) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n        }\n    };\n\n    setDefaults = (done = () => {}) => {\n        this.comp_new.current.setKey(false, true, false, \"n\", () => {\n            this.comp_load.current.setKey(true, false, false, \"o\", () => {\n                this.comp_save.current.setKey(true, false, false, \"s\", () => {\n                    this.comp_assemble.current.setKey(\n                        false,\n                        true,\n                        false,\n                        \"f5\",\n                        () => {\n                            this.comp_sim.current.setKey(\n                                false,\n                                true,\n                                false,\n                                \"f7\",\n                                () => {\n                                    this.comp_step.current.setKey(\n                                        false,\n                                        true,\n                                        false,\n                                        \"f6\",\n                                        () => {\n                                            this.setTheme(\"theme_light\", done);\n                                        }\n                                    );\n                                }\n                            );\n                        }\n                    );\n                });\n            });\n        });\n    };\n\n    setDefaultsSave = () => {\n        this.setDefaults(this.saveSettings);\n    };\n\n    /*function getCookie(cname) {\n        var name = cname + \"=\";\n        var ca = document.cookie.split(';');\n        for(var i = 0; i < ca.length; i++) {\n            var c = ca[i];\n            while (c.charAt(0) === ' ') {\n                c = c.substring(1);\n            }\n            if (c.indexOf(name) === 0) {\n                return c.substring(name.length, c.length);\n            }\n        }\n        return \"\";\n    }*/\n\n    saveSettings = () => {\n        var d = new Date();\n        d.setTime(d.getTime() + 30 * 24 * 60 * 60 * 1000);\n        var expires = d.toUTCString();\n        let exp = \"; expires=\" + expires + \"; path=/\";\n\n        document.cookie =\n            \"ojs_hotkey_new=\" + this.comp_new.current.getKey() + exp;\n        document.cookie =\n            \"ojs_hotkey_load=\" + this.comp_load.current.getKey() + exp;\n        document.cookie =\n            \"ojs_hotkey_save=\" + this.comp_save.current.getKey() + exp;\n        document.cookie =\n            \"ojs_hotkey_ass=\" + this.comp_assemble.current.getKey() + exp;\n        document.cookie =\n            \"ojs_hotkey_sim=\" + this.comp_sim.current.getKey() + exp;\n        document.cookie =\n            \"ojs_hotkey_step=\" + this.comp_step.current.getKey() + exp;\n        document.cookie = \"ojs_theme=\" + this.state.theme + exp;\n    };\n\n    setTheme = (val, continuefn = () => {}) => {\n        if (!themes.includes(val)) {\n            val = themes[0];\n        }\n\n        themes.forEach(function (element) {\n            document.getElementById(element).disabled = element !== val;\n        });\n\n        this.setState({ theme: val }, continuefn);\n    };\n\n    componentDidMount() {\n        let has_cookies = false;\n\n        let ca = document.cookie.split(\"; \");\n\n        let i = 0;\n        for (; i < ca.length; i++) {\n            var c = ca[i];\n\n            while (c.charAt(0) === \" \") {\n                c = c.substring(1);\n            }\n\n            let eq = c.indexOf(\"=\");\n            let str = c.substr(0, eq);\n            let val = c.substr(eq + 1);\n            if (str === \"ojs_hotkey_new\") {\n                this.comp_new.current.setKeyStr(val);\n                has_cookies = true;\n            } else if (str === \"ojs_hotkey_load\") {\n                this.comp_load.current.setKeyStr(val);\n                has_cookies = true;\n            } else if (str === \"ojs_hotkey_save\") {\n                this.comp_save.current.setKeyStr(val);\n                has_cookies = true;\n            } else if (str === \"ojs_hotkey_ass\") {\n                this.comp_assemble.current.setKeyStr(val);\n                has_cookies = true;\n            } else if (str === \"ojs_hotkey_sim\") {\n                this.comp_sim.current.setKeyStr(val);\n                has_cookies = true;\n            } else if (str === \"ojs_hotkey_step\") {\n                this.comp_step.current.setKeyStr(val);\n                has_cookies = true;\n            } else if (str === \"ojs_theme\") {\n                this.setTheme(val);\n                has_cookies = true;\n            }\n        }\n\n        if (has_cookies) {\n            this.setState({ use_cookies: true });\n        }\n    }\n\n    handleISA = (event) => {\n        this.setState({ default_isa: event.target.value });\n    };\n\n    handleTheme = (event) => {\n        this.setTheme(event.target.value, this.saveSettings);\n    };\n\n    acceptCookies = (e) => {\n        e.preventDefault();\n\n        this.setState({ use_cookies: true });\n        this.setDefaultsSave();\n    };\n\n    deleteAllCookies = () => {\n        var cookies = document.cookie.split(\"; \");\n\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i];\n            var eqPos = cookie.indexOf(\"=\");\n            var name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;\n            let startojs = name.substr(0, 3);\n            if (startojs === \"ojs\")\n                document.cookie =\n                    name + \"=;expires=Thu, 01 Jan 1970 00:00:00 GMT\";\n        }\n\n        this.setState({ use_cookies: false });\n        this.setDefaults();\n    };\n\n    render() {\n        return (\n            <div\n                id=\"settings\"\n                onClick={this.handleClose}\n                className={`settings_overlay overlay fader${\n                    this.props.visible ? \" fader_shown\" : \"\"\n                }`}\n            >\n                <div\n                    className=\"settings_container\"\n                    onClick={this.handleStopClose}\n                >\n                    <button\n                        className=\"floating_close\"\n                        onClick={this.handleClose}\n                    ></button>\n                    <h2>Settings</h2>\n                    {!this.state.use_cookies && (\n                        <div className=\"cookie_screen\">\n                            <h3>Cookies</h3>\n                            <p>\n                                In order to set your own settings, you need to\n                                enable cookies. Cookies are the way websites\n                                store data for individual users. We store your\n                                cookies directly in the browser, and only store\n                                the options stored here.\n                            </p>\n                            <button\n                                onClick={this.acceptCookies}\n                                className=\"button\"\n                            >\n                                Accept Cookies, Show Settings\n                            </button>\n                            <button\n                                onClick={this.handleClose}\n                                className=\"button subbutton\"\n                            >\n                                Close Window\n                            </button>\n                        </div>\n                    )}\n                    <div\n                        style={{\n                            display: this.state.use_cookies ? \"block\" : \"none\",\n                            position: \"relative\",\n                        }}\n                    >\n                        <table>\n                            <thead>\n                                <tr>\n                                    <td colSpan={2}>General Settings</td>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {/*<tr>\n                                    <td colSpan={2}>\n                                        <Select onChange={this.handleISA} icon=\"/images/icons/input_type.svg\" placeholder=\"Default ISA\" value={this.state.default_isa}>\n                                            <option>RISC-V</option>\n                                            <option>MIPS</option>\n                                        </Select>\n                                    </td>\n                                </tr>*/}\n                                <tr>\n                                    <td colSpan={2}>\n                                        <Select\n                                            onChange={this.handleTheme}\n                                            icon=\"images/icons/input_type.svg\"\n                                            placeholder=\"Theme\"\n                                            value={this.state.theme}\n                                        >\n                                            <option value=\"theme_light\">\n                                                Light\n                                            </option>\n                                            <option value=\"theme_dark\">\n                                                Dark\n                                            </option>\n                                            <option value=\"theme_dos\">\n                                                DOS\n                                            </option>\n                                            <option value=\"theme_apple2\">\n                                                Apple ][\n                                            </option>\n                                        </Select>\n                                    </td>\n                                </tr>\n                            </tbody>\n                            <thead>\n                                <tr>\n                                    <td colSpan={2}>Hotkeys</td>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <td>New Tab</td>\n                                    <td>\n                                        <HotkeyInput\n                                            ref={this.comp_new}\n                                            save={this.saveSettings}\n                                        />\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>Save Tab</td>\n                                    <td>\n                                        <HotkeyInput\n                                            ref={this.comp_save}\n                                            save={this.saveSettings}\n                                        />\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>Load</td>\n                                    <td>\n                                        <HotkeyInput\n                                            ref={this.comp_load}\n                                            save={this.saveSettings}\n                                        />\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>Assemble</td>\n                                    <td>\n                                        <HotkeyInput\n                                            ref={this.comp_assemble}\n                                            save={this.saveSettings}\n                                        />\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>Step-By-Step</td>\n                                    <td>\n                                        <HotkeyInput\n                                            ref={this.comp_step}\n                                            save={this.saveSettings}\n                                        />\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>Simulate</td>\n                                    <td>\n                                        <HotkeyInput\n                                            ref={this.comp_sim}\n                                            save={this.saveSettings}\n                                        />\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                        <button className=\"button\" onClick={this.handleClose}>\n                            Accept Changes\n                        </button>\n                        <button\n                            className=\"button subbutton\"\n                            onClick={this.setDefaultsSave}\n                        >\n                            Restore Defaults\n                        </button>\n                        <button\n                            className=\"button subbutton\"\n                            onClick={this.deleteAllCookies}\n                        >\n                            Delete Cookies\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst stateToProps = (state) => {\n    return {\n        visible: state.panel_visibility.settings,\n    };\n};\n\nconst dispatchToProps = (dispatch, ownProps) => ({\n    setSettingsVisible: (visible) => dispatch(setSettingsVisible(visible)),\n});\n\nexport default withLocalize(connect(stateToProps, dispatchToProps)(Settings));\n","import React, { Component } from \"react\";\n\nexport default class Input extends Component {\n    render() {\n        return (\n            <div className=\"input_group\">\n                <input\n                    onChange={this.props.onChange}\n                    value={this.props.value}\n                    style={{ backgroundImage: `url(${this.props.icon})` }}\n                    type={this.props.type}\n                    placeholder={this.props.placeholder}\n                />\n                <label className=\"group_label\">{this.props.placeholder}</label>\n            </div>\n        );\n    }\n}\n","export class VirtualOS {\n    constructor() {\n        this.continueInputString = (core, val) => {\n            let reg = core.virtualOSArgumentVectorStart;\n            let arg = core.registerFile.read(reg);\n            let array = [];\n            for (let i = 0; i < val.length; ++i) {\n                array.push(val.charCodeAt(i));\n            }\n            core.memset(arg, array);\n        };\n        this.continueInputInt = (core, val) => {\n            let reg = core.virtualOSArgumentVectorStart;\n            core.registerFile.write(reg, val);\n        };\n    }\n    ecall(core) {\n        let service = core.registerFile.read(core.virtualOSServiceRegister);\n        const start = core.virtualOSArgumentVectorStart;\n        switch (service) {\n            case 1: {\n                let val = core.registerFile.read(start);\n                this.outputInt(val);\n                break;\n            }\n            case 4: {\n                let iterator = core.registerFile.read(start);\n                let array = [];\n                let char = null;\n                while ((char = core.memcpy(iterator, 1)[0]) !== 0) {\n                    array.push(char);\n                    iterator += 1;\n                }\n                let outStr = array.map((c) => String.fromCharCode(c)).join(\"\");\n                this.outputString(outStr);\n                return null;\n            }\n            case 5: {\n                this.inputInt();\n                return \"WAIT\";\n            }\n            case 8: {\n                this.inputString();\n                return \"WAIT\";\n            }\n            case 10:\n                this.handleHalt();\n                return \"HALT\";\n            default:\n                return \"UNHANDLED\";\n        }\n        return null;\n    }\n}\n","export class Enum {\n    constructor(object) {\n        for (let key in object) {\n            this[key] = object[key];\n            this[object[key]] = key;\n        }\n    }\n}\n","export class Utils {\n    /*\n        signExt\n\n        Sign extends an n-bit value to fit Javascript limits.\n    */\n    static signExt(value, bits) {\n        let mutableValue = value;\n        if ((mutableValue & (1 << (bits - 1))) !== 0) {\n            mutableValue = ((~0 >>> bits) << bits) | value;\n        }\n        return mutableValue;\n    }\n\n    /*\n        rangeCheck\n\n        Checks if a value can fit within a certain number of bits.\n    */\n    static rangeCheck(value, bits) {\n        if (bits >= 32) {\n            return null; // No stable way of checking.\n        }\n        if (Math.abs(value).toString(2).length > bits) {\n            return false;\n        }\n        var min = -(1 << (bits - 1));\n        var max = (1 << (bits - 1)) - 1;\n        value = this.signExt(value, bits);\n        if (min <= value >> 0 && value >> 0 <= max) {\n            return true;\n        }\n        return false;\n    }\n\n    /*\n        catBytes\n        \n        Converts bytes stored in a little endian fashion to a proper js integer.\n    */\n    static catBytes(bytes, bigEndian = false) {\n        if (bytes.length > 4) {\n            return null;\n        }\n        if (bigEndian) {\n            bytes.reverse();\n        }\n        let storage = 0 >>> 0;\n        for (let i = 0; i < bytes.length; i++) {\n            storage = storage | (bytes[i] << (8 * i));\n        }\n        return storage;\n    }\n\n    /*\n        pad\n        \n        Turns a number to a padded string.\n    */\n    static pad(number, digits, radix) {\n        let padded = number.toString(radix);\n        while (digits > padded.length) {\n            padded = \"0\" + padded;\n        }\n        return padded;\n    }\n\n    static hex(array) {\n        let hexadecimal = \"\";\n        for (let i = 0; i < array.length; i++) {\n            let hexRepresentation = array[i].toString(16).toUpperCase();\n            if (hexRepresentation.length === 1) {\n                hexRepresentation = \"0\" + hexRepresentation;\n            }\n            hexadecimal += hexRepresentation + \" \";\n        }\n        return hexadecimal;\n    }\n}\n","import { Enum } from \"./Enum.js\";\nimport { Utils } from \"./Utils.js\";\n\nexport const Parameter = new Enum({\n    immediate: 0,\n    register: 1,\n    condition: 2,\n    offset: 3,\n    special: 4,\n    fpImmediate: 5,\n});\n\nexport const Endianness = new Enum({\n    little: 0,\n    big: 1,\n    bi: 2,\n});\n\nexport const Keyword = new Enum({\n    directive: 0,\n    comment: 1,\n    label: 2,\n    stringMarker: 3,\n    charMarker: 4,\n    register: 5,\n\n    string: 6,\n    char: 7,\n    numberic: 8,\n});\n\nexport const Directive = new Enum({\n    text: 0,\n    data: 1,\n    string: 2,\n    cString: 3,\n\n    _8bit: 4,\n    _16bit: 5,\n    _32bit: 6,\n    _64bit: 7,\n\n    fixedPoint: 8,\n    floatingPoint: 9,\n\n    custom: 10,\n});\n\nexport class BitRange {\n    constructor(field, start, bits, constant = null, signed = false) {\n        this.field = field;\n        this.start = start;\n        this.bits = bits;\n        this.constant = constant;\n        this.signed = signed;\n    }\n    get end() {\n        return this.start + this.bits - 1;\n    }\n    limited(totalBits, limitStart = null, limitEnd = null) {\n        this.totalBits = totalBits;\n        this.limitStart = limitStart;\n        this.limitEnd = limitEnd;\n        return this;\n    }\n    parameterized(parameter, parameterType, parameterDefaultValue = null) {\n        this.parameter = parameter;\n        this.parameterDefaultValue = parameterDefaultValue;\n        this.parameterType = parameterType;\n        return this;\n    }\n}\n\nexport class Format {\n    constructor(\n        ranges,\n        regex,\n        disassembly,\n        processSpecialParameter = null,\n        decodeSpecialParameter = null\n    ) {\n        this.ranges = ranges;\n        this.regex = regex;\n        this.disassembly = disassembly;\n        this.processSpecialParameter = processSpecialParameter;\n        this.decodeSpecialParameter = decodeSpecialParameter;\n    }\n}\n\nexport class Instruction {\n    constructor(\n        mnemonic,\n        format,\n        constants,\n        constValues,\n        executor,\n        signatoryOverride = null,\n        pseudoInstructionFor = []\n    ) {\n        this.computedBits = null;\n        /*\n         Mask\n         \n         It's basically the bits of each format, but with Xs replacing parts that aren't constant in every instruction.\n         For example, if an 8-bit ISA defines 5 bits for the register and 3 bits for the opcode, and the opcode for ADD is 101 then the ADD instruction's mask is XXXXX101.\n        */\n        this.computedMask = null;\n        this.computedTemplate = null;\n        this.mnemonic = mnemonic;\n        this.format = format;\n        this.constants = [];\n        for (let i in constants) {\n            this.constants[constants[i]] = constValues[i];\n        }\n        this.executor = executor;\n        this.signatoryOverride = signatoryOverride;\n        this.pseudoInstructionFor = pseudoInstructionFor;\n    }\n    pad(str, length) {\n        let padded = str;\n        for (let i = 0; i < length - str.length; i++) {\n            padded = \"0\" + padded;\n        }\n        return padded;\n    }\n    get bits() {\n        if (this.computedBits !== null) {\n            return this.computedBits;\n        }\n        let count = 0;\n        for (var i in this.format.ranges) {\n            count += this.format.ranges[i].bits;\n        }\n        this.computedBits = count;\n        return this.computedBits;\n    }\n    get bytes() {\n        return Math.ceil(this.bits / 8);\n    }\n    get mask() {\n        if (this.computedMask !== null) {\n            return this.computedMask;\n        }\n        var string = \"\";\n        for (let i = 0; i < this.bits; i += 1) {\n            string += \"X\";\n        }\n        for (let i in this.format.ranges) {\n            let range = this.format.ranges[i];\n            let constant = this.constants[range.field];\n            if (constant === null) {\n                constant = range.constant;\n            }\n            if (constant != null) {\n                let before = string.substr(0, this.bits - range.end - 1);\n                let addition = Utils.pad(constant, range.bits, 2);\n                let after =\n                    range.start === 0 ? \"\" : string.substr(-range.start);\n                string = before + addition + after;\n            }\n        }\n        this.computedMask = string;\n        return this.computedMask;\n    }\n    match(machineCode) {\n        let machineCodeMutable = machineCode >>> 0;\n        let maskBits = this.mask.split(\"\");\n        for (let i = this.bits - 1; i >= 0; i--) {\n            let bit = machineCodeMutable & 1;\n            machineCodeMutable >>= 1;\n            if (maskBits[i] === \"X\") {\n                continue;\n            }\n            if (parseInt(maskBits[i], 10) !== bit) {\n                return false;\n            }\n        }\n        return true;\n    }\n    get template() {\n        if (this.computedTemplate != null) {\n            return this.computedTemplate;\n        }\n        let temp = 0 >>> 0;\n        for (let i in this.format.ranges) {\n            let range = this.format.ranges[i];\n            let constant = this.constants[range.field];\n            if (constant === null) {\n                constant = range.constant;\n            }\n            if (constant != null) {\n                temp |= constant << range.start;\n            }\n        }\n        this.computedTemplate = temp;\n        return temp;\n    }\n}\n\nexport class PseudoInstruction {}\n\nexport class InstructionSet {\n    /*\n        InstructionSet initializer\n    */\n    constructor(\n        bits,\n        formats,\n        instructions,\n        pseudoInstructions,\n        abiNames,\n        keywords,\n        directives,\n        incrementOnFetch,\n        exampleCode\n    ) {\n        this.bits = bits;\n        this.formats = formats;\n        this.instructions = instructions;\n        instructions.sort((a, b) => a.bytes - b.bytes);\n        this.pseudoInstructions = pseudoInstructions;\n        this.abiNames = abiNames;\n        this.keywords = keywords;\n        this.directives = directives;\n        this.incrementOnFetch = incrementOnFetch;\n        this.exampleCode = exampleCode;\n    }\n    //Return Mnemonic Index (pseudo)\n    pseudoMnemonicSearch(mnemonic) {\n        return -1;\n    } //Worst case = instructions.length\n    //Return Mnemonic Index (True)\n    mnemonicSearch(mnemonic) {\n        for (let i = 0; i < this.instructions.length; i++) {\n            if (this.instructions[i].mnemonic === mnemonic) {\n                return i;\n            }\n        }\n        return -1;\n    } //Worst case = instructions.length\n    instructionsPrefixing(line) {\n        var result = [];\n        for (let i in this.instructions) {\n            let instruction = this.instructions[i];\n            if (line.toUpperCase().hasPrefix(instruction.mnemonic)) {\n                let captures = instruction.format.regex.exec(line);\n                if (\n                    captures &&\n                    captures[1].toUpperCase() === instruction.mnemonic\n                ) {\n                    result.push(instruction);\n                }\n            }\n        }\n        return result;\n    }\n    disassemble(instruction, args) {\n        let output = instruction.format.disassembly;\n        output = output.replace(\"@mnem\", instruction.mnemonic);\n        for (let i = 0; i < instruction.format.ranges.length; i++) {\n            let range = instruction.format.ranges[i];\n            let parameter = range.parameter;\n            if (parameter != null) {\n                output = output.replace(\n                    \"@arg\" + range.parameter,\n                    range.parameterType === Parameter.register\n                        ? this.abiNames[args[parameter]]\n                        : args[parameter].toString()\n                );\n            }\n        }\n        return output;\n    }\n}\n","import { Enum } from \"./Enum.js\";\nimport { Parameter, Keyword, Directive } from \"./InstructionSet.js\";\nimport { Utils } from \"./Utils.js\";\n\n// Changes a string of hex bytes to an array of numbers.\nString.prototype.interpretedBytes = function () {\n    let hexes = this.split(\" \"); // Remove spaces, then seperate characters\n    let bytes = [];\n    for (let i = 0; i < hexes.length; i++) {\n        let value = parseInt(hexes[i], 16);\n        if (!isNaN(value)) {\n            bytes.push(value);\n        }\n    }\n    return bytes;\n};\n\n// Check if haystack has needle in the beginning.\nString.prototype.hasPrefix = function (needle) {\n    return this.substr(0, needle.length) === needle;\n};\n\nexport const Kind = new Enum({\n    instruction: 0,\n    data: 1,\n    directive: 2,\n    noise: 3,\n});\n\nexport class Line {\n    constructor(raw, number) {\n        this.addressThisPass = null;\n        this.sensitive = false;\n        this.machineCode = [];\n        this.raw = raw;\n        this.number = number;\n        this.kind = Kind.noise;\n        this.sensitivityList = [];\n        this.possibleInstructions = [];\n    }\n    static arrayFromFile(file) {\n        return file.split(\"\\n\").map((line, index) => new Line(line, index));\n    }\n    initialProcess(assembler, text = true) {\n        let comment = assembler.keywordRegexes[Keyword.comment];\n        let tmp = comment.exec(this.raw)[1];\n        let label = assembler.keywordRegexes[Keyword.label];\n        let pieces = label.exec(tmp);\n        this.label = pieces[1];\n        this.processed = pieces[2] || \"\";\n        if (/^s*$/.exec(this.processed) !== null) {\n            return text;\n        }\n        if (assembler.keywordRegexes[Keyword.directive] != null) {\n            let captures = RegExp(\n                assembler.keywordRegexes[Keyword.directive]\n            ).exec(this.processed);\n            if (captures !== null) {\n                this.directive = assembler.directives[captures[1]];\n                this.directiveData = captures[2];\n            }\n        }\n        if (text) {\n            if (this.directive !== undefined) {\n                switch (this.directive) {\n                    case Directive.data:\n                        this.kind = Kind.directive;\n                        return false;\n                    case Directive.text:\n                        this.kind = Kind.directive;\n                        break;\n                    default:\n                        this.invalidReason = `Unsupported directive.`;\n                }\n                return true;\n            }\n            this.kind = Kind.instruction;\n            assembler.instructionSet.instructions.forEach((instruction) => {\n                let match = instruction.format.regex.exec(this.processed);\n                if (\n                    match !== null &&\n                    match[1].toUpperCase() === instruction.mnemonic\n                ) {\n                    this.possibleInstructions.push([\n                        instruction,\n                        match.slice(2),\n                        [],\n                        null,\n                    ]);\n                }\n                return match !== null;\n            });\n            if (this.possibleInstructions.length === 0) {\n                this.invalidReason = `Could not find any matching instructions.`;\n                return true;\n            }\n            let minimum = this.possibleInstructions[0][0].bytes;\n            (this.machineCode = []).length = minimum;\n            this.machineCode.fill(0);\n            return true;\n        } else {\n            let count = null; // byte count\n            let zeroDelimitedString = 0;\n            if (this.directive !== undefined) {\n                this.kind = Kind.data;\n                switch (this.directive) {\n                    case Directive.data:\n                        this.kind = Kind.directive;\n                        break;\n                    case Directive.text:\n                        this.kind = Kind.directive;\n                        return true;\n                    case Directive._32bit:\n                        count = count || 4;\n                    // fall through\n                    case Directive._16bit:\n                        count = count || 2;\n                    // fall through\n                    case Directive._8bit:\n                        count = count || 1;\n                        let elements = this.directiveData.split(/\\s*,\\s*/);\n                        (this.machineCode = []).length =\n                            elements.length * count;\n                        this.machineCode.fill(0);\n                        this.kind = Kind.data;\n                        break;\n                    case Directive.cString:\n                        zeroDelimitedString = 1;\n                    // fall through\n                    case Directive.string:\n                        if (assembler.keywordRegexes[Keyword.string] === null) {\n                            this.invalidReason = `This instruction set does not define a string keyword.`;\n                        }\n                        let match = assembler.keywordRegexes[\n                            Keyword.string\n                        ].exec(this.directiveData);\n                        if (match === null) {\n                            this.invalidReason = `Invalid string \"${this.directiveData}\".`;\n                        } else {\n                            let regex = RegExp(\n                                assembler.generalCharacters,\n                                \"g\"\n                            );\n                            let characters = [];\n                            let found = null;\n                            while ((found = regex.exec(match[1]))) {\n                                characters.push(found);\n                            }\n                            (this.machineCode = []).length =\n                                characters.length + zeroDelimitedString;\n                            for (let c in characters) {\n                                let character = String(characters[c]);\n                                let value = character.charCodeAt(0);\n                                if (character.length > 2) {\n                                    value =\n                                        Assembler.escapedCharacters[\n                                            character[1]\n                                        ];\n                                }\n                                this.machineCode[c] = value;\n                            }\n                            if (zeroDelimitedString === 1) {\n                                this.machineCode[\n                                    this.machineCode.length - 1\n                                ] = 0;\n                            }\n                        }\n                        this.kind = Kind.data;\n                        break;\n                    default:\n                        this.invalidReason = `Unrecognized directive.`;\n                }\n            } else {\n                let isInstruction = false;\n                assembler.instructionSet.instructions.forEach((instruction) => {\n                    let match = instruction.format.regex.exec(this.processed);\n                    if (\n                        match !== null &&\n                        match[1].toUpperCase() === instruction.mnemonic\n                    ) {\n                        isInstruction = true;\n                    }\n                });\n                if (isInstruction) {\n                    this.invalidReason = `Matched instruction in data section.`;\n                } else {\n                    this.invalidReason = `Unknown input in the data section.`;\n                }\n            }\n            return false;\n        }\n    }\n    assembleText(assembler, lines, address) {\n        let candidates = false;\n        testingInstructions: for (let i in this.possibleInstructions) {\n            let possibleInstruction = this.possibleInstructions[i];\n            let instruction = possibleInstruction[0];\n            let args = possibleInstruction[1];\n            let machineCode = instruction.template;\n            for (var j in instruction.format.ranges) {\n                let range = instruction.format.ranges[j];\n                if (range.parameter === undefined) {\n                    continue;\n                }\n                let limited = range.totalBits;\n                let bits = limited || range.bits;\n                let store = null;\n                if (range.parameterType == Parameter.special) {\n                    store = instruction.format.processSpecialParameter(\n                        args[range.parameter],\n                        Parameter.special,\n                        bits,\n                        address,\n                        assembler\n                    );\n                } else {\n                    store = assembler.process(\n                        args[range.parameter],\n                        range.parameterType,\n                        bits,\n                        address,\n                        instruction.bytes\n                    );\n                }\n                if (store.errorMessage !== null) {\n                    possibleInstruction[3] = store.errorMessage;\n                    continue testingInstructions;\n                } else if (store.context !== null && store.value === null) {\n                    store.context.sensitivityList.push(this);\n                    this.sensitive = true;\n                    break testingInstructions;\n                } else {\n                    let register = store.value;\n                    let startBit = range.limitStart;\n                    let endBit = range.limitEnd;\n                    if (\n                        limited !== undefined &&\n                        startBit !== undefined &&\n                        endBit !== undefined\n                    ) {\n                        register >>= startBit; // discard start bits bits\n                        let bits = endBit - startBit + 1;\n                        register &= (1 << bits) - 1; // mask end - start + 1 bits\n                    }\n                    let masked = register & ((1 << bits) - 1);\n                    machineCode |= masked << range.start;\n                }\n            }\n            for (let i = 0; i < instruction.bytes; i += 1) {\n                possibleInstruction[2].push(machineCode & 0xff);\n                machineCode >>>= 8;\n            }\n            candidates = true;\n        }\n        if (candidates) {\n            // Expand machine code if applicable\n            let smallestPossibleInstruction = this.possibleInstructions.filter(\n                (pi) => pi[3] === null\n            )[0];\n            this.machineCode = smallestPossibleInstruction[2];\n        }\n        // Handle errors\n        let errorMessage = null;\n        let errorOccurred = !(candidates || this.sensitive);\n        if (errorOccurred) {\n            errorMessage =\n                this.possibleInstructions[\n                    this.possibleInstructions.length - 1\n                ][3]; //Typically the most lenient option is last\n        }\n        return errorMessage;\n    }\n    assembleData(assembler, lines, address) {\n        let errorMessage = null;\n        let count = null;\n        switch (this.directive) {\n            case Directive._32bit:\n                count = count || 4;\n            // fall through\n            case Directive._16bit:\n                count = count || 2;\n            // fall through\n            case Directive._8bit:\n                count = count || 1;\n                let elements = this.directiveData.split(/\\s*,\\s*/);\n                for (let i = 0; i < elements.length; i += 1) {\n                    let element = elements[i];\n                    let bits = count << 3;\n                    let store = assembler.process(\n                        element,\n                        Parameter.immediate,\n                        bits,\n                        address,\n                        0\n                    );\n                    if (store.errorMessage !== null) {\n                        errorMessage = store.errorMessage;\n                        break;\n                    } else if (store.context !== null && store.value === null) {\n                        store.context.sensitivityList.push(this);\n                        this.sensitive = true;\n                        break;\n                    } else {\n                        let stored = store.value;\n                        for (let j = 0; j < count; j += 1) {\n                            let offset = count * i;\n                            this.machineCode[j + offset] = stored & 0xff;\n                            stored >>>= 8;\n                        }\n                    }\n                }\n                break;\n            case Directive.cString:\n            case Directive.string:\n                // Already handled in pass 0.\n                break;\n            default:\n                this.invalidReason = `Unrecognized directive.`;\n        }\n        return errorMessage;\n    }\n    assemble(assembler, lines, address) {\n        this.sensitive = false;\n        let result = [null, false];\n        switch (this.kind) {\n            case Kind.instruction:\n                result[0] = this.assembleText(assembler, lines, address);\n                break;\n            case Kind.data:\n                result[0] = this.assembleData(assembler, lines, address);\n                break;\n            default:\n                break;\n        }\n        let lineByLabel = assembler.linesByLabel[this.label];\n        if (lineByLabel !== undefined) {\n            lineByLabel[1] = address;\n        }\n        if (result[0] === null) {\n            for (let i in this.sensitivityList) {\n                let sensor = this.sensitivityList[i];\n                if (sensor.addressThisPass !== null) {\n                    let sensorLength = sensor.machineCode.length;\n                    let newAssembly = sensor.assemble(\n                        assembler,\n                        lines,\n                        sensor.addressThisPass\n                    );\n                    if (sensor.sensitive) {\n                        // Still sensitive, leave it alone uwu\n                    } else {\n                        if (newAssembly[1]) {\n                            result[1] = true;\n                            break;\n                        }\n                        if (sensor.machineCode.length !== sensorLength) {\n                            result[1] = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        } else {\n            this.invalidReason = result[0];\n        }\n        return result;\n    }\n}\n\nexport class Assembler {\n    constructor(instructionSet, endianness, memoryMap = null) {\n        this.linesByLabel = [];\n        this.incrementOnFetch = instructionSet.incrementOnFetch;\n        this.keywordRegexes = [];\n        this.memoryMap = memoryMap;\n        if (instructionSet.keywordRegexes) {\n            this.keywordRegexes = instructionSet.keywordRegexes;\n        } else if (instructionSet.keywords) {\n            let words = instructionSet.keywords;\n            this.keywordRegexes = [];\n            if (words[Keyword.directive]) {\n                let options = Assembler.options(\n                    instructionSet.keywords[Keyword.directive]\n                );\n                if (options) {\n                    this.keywordRegexes[Keyword.directive] = RegExp(\n                        options + \"([^\\\\s]+)\\\\s*(.+)*\"\n                    );\n                }\n            }\n            if (words[Keyword.comment]) {\n                let options = Assembler.options(words[Keyword.comment]);\n                if (options) {\n                    this.keywordRegexes[Keyword.comment] = RegExp(\n                        \"^(.*?)(\" + options + \".*)?$\"\n                    );\n                }\n            }\n            if (words[Keyword.label]) {\n                let options = Assembler.options(words[Keyword.label]);\n                if (options) {\n                    this.keywordRegexes[Keyword.label] = RegExp(\n                        \"^(?:([A-Za-z_][A-Za-z0-9_]*)\" +\n                            options +\n                            \")?\\\\s*(.*)?$\"\n                    );\n                }\n            }\n            if (words[Keyword.register]) {\n                let options = Assembler.options(words[Keyword.register]);\n                if (options) {\n                    this.keywordRegexes[Keyword.register] = RegExp(\n                        options + \"([0-9]+)\"\n                    );\n                }\n            }\n            this.keywordRegexes[Keyword.numeric] = RegExp(\n                \"(-?(?:0([\" + Assembler.radixList + \"]))?[A-F0-9]+)\"\n            );\n            if (words[Keyword.charMarker]) {\n                let options = Assembler.options(words[Keyword.charMarker]);\n                if (options) {\n                    let escapable = options.length > 1 ? \"\" : \"\\\\\" + options;\n                    //this.keywordRegexes[Keyword.char] = RegExp(options + \"\" + options);\n                    this.generalCharacters =\n                        \"(?:(?:\\\\\\\\[\\\\\\\\\" +\n                        Assembler.escapedCharacterList +\n                        escapable +\n                        \"])|(?:[\\\\x20-\\\\x5b\\\\x5d-\\\\x7e]))\";\n                    this.keywordRegexes[Keyword.char] = RegExp(\n                        options + \"(\" + this.generalCharacters + \")\" + options\n                    );\n                }\n            } else {\n                this.generalCharacters =\n                    \"(?:(?:\\\\\\\\[\\\\\\\\\" +\n                    Assembler.escapedCharacterList +\n                    \"])|(?:[\\\\x20-\\\\x5b\\\\x5d-\\\\x7e]))\";\n            }\n            if (words[Keyword.stringMarker]) {\n                let options = Assembler.options(words[Keyword.stringMarker]);\n                if (options) {\n                    this.keywordRegexes[Keyword.string] = RegExp(\n                        options + \"(\" + this.generalCharacters + \"*)\" + options\n                    );\n                }\n            }\n        } else {\n            console.log(\n                \"INSTRUCTION SET WARNING: This instruction set doesn't define any keywords.\"\n            );\n        }\n        this.directives = instructionSet.directives;\n        this.endianness = endianness ? endianness : instructionSet.endianness;\n        this.instructionSet = instructionSet;\n    }\n    //Returns number on success, string on failure\n    process(text, type, bits, address, instructionLength) {\n        let result = {\n            errorMessage: null,\n            value: null,\n            context: null,\n        };\n        switch (type) {\n            case Parameter.register:\n                let index = this.instructionSet.abiNames.indexOf(text);\n                if (index !== -1) {\n                    result.value = index;\n                    return result;\n                }\n                let registerNo = null;\n                if (this.keywordRegexes[Keyword.register]) {\n                    let match =\n                        this.keywordRegexes[Keyword.register].exec(text);\n                    if (match !== null) {\n                        registerNo = match[1];\n                    }\n                }\n                if (registerNo === null) {\n                    result.errorMessage = `args.registerDoesNotExist(${text})`;\n                    return result;\n                }\n                registerNo = parseInt(registerNo, 10);\n                if ((registerNo & (~0 << bits)) !== 0) {\n                    result.errorMessage = `args.registerDoesNotExist(${text})`;\n                    return result;\n                }\n                result.value = registerNo;\n                return result;\n            case Parameter.offset:\n            case Parameter.immediate:\n                //Label\n                let value = null;\n                let reference = this.linesByLabel[text];\n                if (reference !== undefined) {\n                    result.context = reference[0];\n                    if (reference[1] === null) {\n                        return result;\n                    }\n                    value = reference[1];\n                }\n                if (value === null && this.keywordRegexes[Keyword.char]) {\n                    let extraction = RegExp(\n                        this.keywordRegexes[Keyword.char]\n                    ).exec(text);\n                    if (extraction !== null && extraction[1] !== undefined) {\n                        value = extraction[1].charCodeAt(0);\n                        if (value > 255) {\n                            result.errorMessage =\n                                \"Non-ascii character \" +\n                                extraction[1] +\n                                \" unsupported.\";\n                            return result;\n                        }\n                    }\n                }\n                if (\n                    value === null &&\n                    this.keywordRegexes[Keyword.numeric] !== undefined\n                ) {\n                    let array = RegExp(\n                        this.keywordRegexes[Keyword.numeric]\n                    ).exec(text);\n                    if (array !== null) {\n                        let radix = Assembler.radixes[array[2]] || 10;\n                        let interpretable = array[1];\n                        value = parseInt(interpretable, radix);\n                    }\n                }\n                if (value !== null && type === Parameter.offset) {\n                    value -= address;\n                    if (this.incrementOnFetch) {\n                        value -= instructionLength;\n                    }\n                }\n                if (value === null || isNaN(value)) {\n                    result.errorMessage = `args.valueUnrecognized(${text})`;\n                    return result;\n                } else if (Utils.rangeCheck(value, bits) === false) {\n                    result.errorMessage = `args.outOfRange(${text})`;\n                    return result;\n                }\n                result.value = value;\n                return result;\n            default:\n                result.errorMessage = `Internal Oak Error: Unknown parameter '${Parameter[type]}'.`;\n                return result;\n        }\n    }\n    static options(list) {\n        if (list.length === 0) {\n            return null;\n        }\n        let options = \"\";\n        for (let i = 0; i < list.length; i++) {\n            let keyword = list[i];\n            if (keyword === \"\\\\\") {\n                console.log(\n                    \"INSTRUCTION SET WARNING: '\\\\' used as keyword. This behavior is undefined.\"\n                );\n                return null;\n            }\n            if (options === \"\") {\n                options = \"(?:\";\n            } else {\n                options += \"|\";\n            }\n            options += keyword;\n        }\n        return options + \")\";\n    }\n    assemble(lines, pass) {\n        lines.map((line) => (line.addressThisPass = null));\n        let errors = [];\n        let assemblerModeText = true;\n        let address = 0;\n        for (var i in lines) {\n            let line = lines[i];\n            switch (pass) {\n                case 0: // Zero Pass - Minimum Possible Size\n                    assemblerModeText = line.initialProcess(\n                        this,\n                        assemblerModeText\n                    );\n                    if (line.invalidReason !== undefined) {\n                        errors.push(line);\n                    }\n                    if (line.label !== undefined) {\n                        this.linesByLabel[line.label] = [line, null];\n                    }\n                    break;\n                default: // Assumption: Instruction cannot become context-sensitive based on size\n                    line.addressThisPass = address;\n                    let asm = line.assemble(this, lines, address);\n                    if (asm[0] !== null) {\n                        errors.push(line);\n                    }\n                    if (asm[1]) {\n                        return null; // Repass\n                    }\n                    address += line.machineCode.length;\n            }\n        }\n        return errors;\n    }\n}\n\nAssembler.radixes = {\n    b: 2,\n    o: 8,\n    d: 10,\n    x: 16,\n};\nAssembler.radixList = Object.keys(Assembler.radixes).join(\"\");\n\nAssembler.escapedCharacters = {\n    \"0\": 0,\n    \"t\": 9,\n    \"n\": 10,\n    \"r\": 13,\n    \"'\": 47,\n    '\"': 42,\n};\n\nAssembler.escapedCharacterList = Object.keys(Assembler.escapedCharacters).join(\n    \"\"\n);\n","import { Parameter } from \"./InstructionSet.js\";\nimport { Utils } from \"./Utils.js\";\n\nexport class CoreFactory {\n    constructor() {\n        this.ISAs = {};\n    }\n\n    getCoreList() {\n        return Object.keys(this.ISAs);\n    }\n\n    getCore(architecture, memorySize, virtualOS, options = null) {\n        let isa = this.ISAs[architecture];\n        if (isa === undefined) {\n            throw `ISA '${architecture}' not found.`;\n        }\n        if (options === null) {\n            options = isa.options;\n        }\n        for (let key in options) {\n            if (isa.options[key] === undefined) {\n                throw `Option '${key}' for ISA ${architecture} is unsupported.`;\n            }\n        }\n        let instructionSet = isa.generator(options);\n        return new isa.core(memorySize, virtualOS, instructionSet);\n    }\n}\n\nexport class Core {\n    //Returns bytes on success, null on failure\n    memcpy(address, bytes) {\n        if ((address + bytes) >>> 0 > this.memorySize) {\n            return null;\n        }\n        let result = [];\n        for (let i = 0; i < bytes; i++) {\n            result.push(this.memory[address + i]);\n        }\n        return result;\n    }\n    //Returns boolean indicating success\n    //Use to store machine code in memory so it can be executed.\n    memset(address, bytes) {\n        if (address < 0) {\n            return false;\n        }\n        if (address + bytes.length > this.memorySize) {\n            return false;\n        }\n        for (let i = 0; i < bytes.length; i++) {\n            this.memory[address + i] = bytes[i];\n        }\n        return true;\n    }\n    decode() {\n        let insts = this.instructionSet.instructions;\n        this.decoded = null;\n        this.arguments = [];\n        for (let i = 0; i < insts.length; i++) {\n            if (insts[i].match(this.fetched)) {\n                this.decoded = insts[i];\n                break;\n            }\n        }\n        if (this.decoded === null) {\n            return null;\n        }\n        let bitRanges = this.decoded.format.ranges;\n        for (let i in bitRanges) {\n            let range = bitRanges[i];\n            if (range.parameter != null) {\n                let limit = range.limitStart;\n                let value =\n                    ((this.fetched >>> range.start) &\n                        ((1 << range.bits) - 1)) <<\n                    limit;\n                if (range.parameterType === Parameter.special) {\n                    value = this.decoded.format.decodeSpecialParameter(\n                        value,\n                        this.pc\n                    ); //Unmangle...\n                }\n                this.arguments[range.parameter] =\n                    this.arguments[range.parameter] || 0;\n                this.arguments[range.parameter] =\n                    this.arguments[range.parameter] | value;\n                if (\n                    this.decoded.format.ranges[i].signed &&\n                    range.parameterType !== Parameter.register\n                ) {\n                    this.arguments[range.parameter] = Utils.signExt(\n                        this.arguments[range.parameter],\n                        range.totalBits ? range.totalBits : range.bits\n                    );\n                }\n            }\n        }\n        return this.instructionSet.disassemble(this.decoded, this.arguments);\n    }\n    //Returns null on success, error message on error.\n    execute() {\n        return this.decoded.executor(this);\n    }\n}\n\nCore.factory = new CoreFactory();\n","import { VirtualOS } from \"./VirtualOS.js\";\nimport { Endianness } from \"./InstructionSet.js\";\nimport { Line, Assembler } from \"./Assembler\";\nimport { Core } from \"./Core\";\n\nexport default {\n    VirtualOS: VirtualOS,\n    Endianness: Endianness,\n    Assembler: Assembler,\n    Line: Line,\n    Core: Core,\n};\n","import React, { Component } from \"react\";\nimport Input from \"../modules/input\";\nimport Select from \"../modules/select\";\nimport OakJS from \"../oak/index.js\";\n\nimport { connect } from \"react-redux\";\nimport { withLocalize } from \"react-localize-redux\";\nimport { setProjectSettings } from \"../actions\";\n\nclass PanelSettings extends Component {\n    static display_name = \"settings\";\n\n    handleFileName = (event) => {\n        this.props.setProjectSettings(\n            event.target.value,\n            this.props.project_settings.memory_size,\n            this.props.project_settings.isa\n        );\n    };\n\n    handleISA = (event) => {\n        this.props.setProjectSettings(\n            this.props.project_settings.file_name,\n            this.props.project_settings.memory_size,\n            event.target.value\n        );\n    };\n\n    handleMemorySize = (event) => {\n        const re = /^[0-9\\b]+$/;\n\n        if (event.target.value === \"\" || re.test(event.target.value)) {\n            this.props.setProjectSettings(\n                this.props.project_settings.file_name,\n                event.target.value,\n                this.props.project_settings.isa\n            );\n        }\n    };\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.props.submitChanges();\n    };\n\n    render() {\n        let isas = OakJS.Core.factory.getCoreList();\n\n        return (\n            <div id=\"panel_settings\" className=\"panel panel_settings\">\n                <form onSubmit={this.handleSubmit}>\n                    <Input\n                        onChange={this.handleFileName}\n                        value={this.props.project_settings.file_name}\n                        icon=\"images/icons/input_name.svg\"\n                        placeholder=\"File Name\"\n                        id=\"filename\"\n                    />\n                    <Select\n                        onChange={this.handleISA}\n                        value={this.props.project_settings.isa}\n                        icon=\"images/icons/input_code.svg\"\n                        placeholder=\"Instruction Set\"\n                    >\n                        {isas.map((isa, i) => {\n                            return (\n                                <option key={isa} value={isa}>\n                                    {isa}\n                                </option>\n                            );\n                        })}\n                    </Select>\n                    <Input\n                        onChange={this.handleMemorySize}\n                        value={this.props.project_settings.memory_size}\n                        icon=\"images/icons/input_memory.svg\"\n                        placeholder=\"Memory Size (Bytes)\"\n                        type=\"number\"\n                    />\n\n                    <input\n                        className=\"button\"\n                        value=\"Accept Changes\"\n                        type=\"submit\"\n                    />\n                </form>\n            </div>\n        );\n    }\n}\n\nconst appStateToProps = (state) => {\n    return {\n        tabs: state.tabs,\n        selectedtab: state.selectedtab,\n        project_settings: state.project_settings,\n    };\n};\n\nconst appDispatchToProps = (dispatch, ownProps) => ({\n    setProjectSettings: (n, s, i) => dispatch(setProjectSettings(n, s, i)),\n});\n\nexport default withLocalize(\n    connect(appStateToProps, appDispatchToProps)(PanelSettings)\n);\n","import React, { Component } from \"react\";\nimport Input from \"../modules/input\";\nimport Select from \"../modules/select\";\nimport { padNumber, parseToFloat, encodeFloat } from \"./numberttransform\";\n\nexport default class PanelConversion extends Component {\n    static display_name = \"conversion\";\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            input: 0,\n            input_type: 0,\n            output_type: 0,\n            output: \"\",\n            has_value: false,\n        };\n    }\n\n    calculateOutput = (val, in_type, out_type) => {\n        let input = val;\n        switch (in_type) {\n            case 0: // Hex\n                input = parseInt(input, 16);\n                break;\n            default:\n            case 1: // uint\n            case 2: // int\n                input = parseInt(input, 10);\n                break;\n            case 3: // bin\n                input = parseInt(input, 2);\n                break;\n            case 4: // float\n                input = encodeFloat(input);\n                break;\n        }\n\n        if (input.toString() === \"NaN\") return \"\";\n\n        let output;\n        switch (out_type) {\n            case 0: // Hex\n                output = \"0x\" + padNumber((input >>> 0).toString(16), 8);\n                break;\n            case 1: // uint\n                output = (input >>> 0).toString(10);\n                break;\n            default:\n            case 2: // int\n                output = input.toString(10);\n                if (output > 2147483648) {\n                    output = output - 4294967296;\n                }\n                break;\n            case 3: // bin\n                output = \"0b\" + padNumber((input >>> 0).toString(2), 32);\n                break;\n            case 4: // float\n                output = parseToFloat(input);\n                break;\n        }\n\n        return output;\n    };\n\n    onChangeInput = (event) => {\n        let val = event.target.value;\n        let in_type = this.state.input_type;\n        let out_type = this.state.output_type;\n        let out = this.calculateOutput(val, in_type, out_type);\n        this.setState({ input: val, has_value: val !== \"\", output: out });\n    };\n\n    onChangeInputType = (event) => {\n        let val = this.state.input;\n        let in_type = parseInt(event.target.value, 10);\n        let out_type = this.state.output_type;\n        let out = this.calculateOutput(val, in_type, out_type);\n        this.setState({\n            input: val,\n            input_type: in_type,\n            has_value: val !== \"\",\n            output: out,\n        });\n    };\n\n    onChangeOutputType = (event) => {\n        let val = this.state.input;\n        let in_type = this.state.input_type;\n        let out_type = parseInt(event.target.value, 10);\n        let out = this.calculateOutput(val, in_type, out_type);\n        this.setState({\n            input: val,\n            output_type: out_type,\n            has_value: val !== \"\",\n            output: out,\n        });\n    };\n\n    render() {\n        return (\n            <div id=\"panel_conversion\" className=\"panel panel_conversion\">\n                <Input\n                    onChange={this.onChangeInput}\n                    icon=\"images/icons/input_in.svg\"\n                    placeholder=\"Input\"\n                    type=\"text\"\n                />\n                <Select\n                    onChange={this.onChangeInputType}\n                    icon=\"images/icons/input_type.svg\"\n                    placeholder=\"Input Type\"\n                >\n                    <option value=\"0\">Hex</option>\n                    <option value=\"1\">Integer</option>\n                    <option value=\"3\">Binary</option>\n                    {/*<option value=\"4\">Float</option>*/}\n                </Select>\n                <hr />\n                <Select\n                    onChange={this.onChangeOutputType}\n                    icon=\"images/icons/input_type.svg\"\n                    placeholder=\"Output Type\"\n                >\n                    <option value=\"0\">Hex</option>\n                    <option value=\"1\">Unsigned Integer</option>\n                    <option value=\"2\">Signed Integer</option>\n                    <option value=\"3\">Binary</option>\n                    {/*<option value=\"4\">Float</option>*/}\n                </Select>\n                <span className=\"conversion_output\">\n                    {this.state.output !== \"\" ? this.state.output : \"<Output>\"}\n                </span>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport Select from \"../modules/select\";\nimport { padNumber, parseToFloat } from \"./numberttransform\";\nimport { connect } from \"react-redux\";\n\nconst REGISTER_UNASSIGNED = 0;\nconst REGISTER_ASSIGNED = 1;\nconst REGISTER_NEWASSIGNED = 2;\n\nclass PanelRegisters extends Component {\n    static display_name = \"registers\";\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            register_type: 0,\n        };\n    }\n\n    handleType = (event) => {\n        this.setState({ register_type: parseInt(event.target.value, 10) });\n    };\n\n    translateRegister = (input) => {\n        switch (this.state.register_type) {\n            case 0: // Hex\n                return \"0x\" + padNumber((input >>> 0).toString(16), 8);\n            case 1: // uint\n                return (input >>> 0).toString(10);\n            default:\n            case 2: // int\n                let output = input.toString(10);\n                if (output > 2147483648) {\n                    output = output - 4294967296;\n                }\n                return output;\n            case 3: // bin\n                return \"0b\" + padNumber((input >>> 0).toString(2), 32);\n            case 4: // float\n                return (output = parseToFloat(input));\n        }\n    };\n\n    getChangedRegisterClass = (val) => {\n        switch (val) {\n            default:\n            case REGISTER_UNASSIGNED:\n                return \"reg_normal\";\n            case REGISTER_ASSIGNED:\n                return \"reg_assigned\";\n            case REGISTER_NEWASSIGNED:\n                return \"reg_new\";\n        }\n    };\n\n    render() {\n        let tab = this.props.tabs[this.props.selectedtab];\n        if (!(tab && tab.core)) return <div></div>;\n\n        let core = tab.core;\n        let registers = core.registerFile.physicalFile;\n        let register_changed = tab.register_changed;\n        let register_names = core.registerFile.abiNames;\n\n        return (\n            <div id=\"panel_registers\" className=\"panel panel_registers\">\n                <Select\n                    onChange={this.handleType}\n                    icon=\"images/icons/input_type.svg\"\n                    placeholder=\"Display Type\"\n                    defaultValue=\"0\"\n                >\n                    <option value=\"0\">Hex</option>\n                    <option value=\"1\">Unsigned Integer</option>\n                    <option value=\"2\">Signed Integer</option>\n                    <option value=\"3\">Binary</option>\n                    <option value=\"4\">Float</option>\n                </Select>\n                <table cellSpacing=\"0\" cellPadding=\"0\">\n                    <thead>\n                        <tr>\n                            <th>Reg</th>\n                            <th>Value</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {registers.map((register, i) => {\n                            let register_dpy = this.translateRegister(register);\n                            return (\n                                <tr\n                                    key={i}\n                                    className={this.getChangedRegisterClass(\n                                        register_changed[i]\n                                    )}\n                                >\n                                    <td>{register_names[i]}</td>\n                                    <td data-info={register}>{register_dpy}</td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nconst stateToProps = (state) => {\n    return {\n        tabs: state.tabs,\n        selectedtab: state.selectedtab,\n    };\n};\n\nexport default connect(stateToProps)(PanelRegisters);\n","import React, { Component } from \"react\";\nimport Select from \"../modules/select\";\nimport { padNumber } from \"./numberttransform\";\n\nimport { connect } from \"react-redux\";\n\nclass PanelMachineCode extends Component {\n    static display_name = \"machine code\";\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            register_type: 0,\n        };\n    }\n\n    handleType = (event) => {\n        this.setState({ register_type: parseInt(event.target.value, 10) });\n    };\n\n    translateRegister = (input) => {\n        switch (this.state.register_type) {\n            default:\n            case 0: // Hex\n                return padNumber((input >>> 0).toString(16), 2);\n            case 1: // uint\n                return padNumber((input >>> 0).toString(10), 3);\n            case 2: // octal\n                return padNumber((input >>> 0).toString(8), 3);\n            case 3: // bin\n                return padNumber((input >>> 0).toString(2), 8);\n        }\n    };\n\n    render() {\n        let tabs = this.props.tabs;\n        if (tabs.length === 0) return <div></div>;\n\n        let machinecode = tabs[this.props.selectedtab].machine_code;\n        let empty = machinecode.length === 0;\n        return (\n            <div id=\"panel_machine_code\" className=\"panel panel_machine_code\">\n                {empty && (\n                    <span className=\"panel_empty\">Machine Code Empty</span>\n                )}\n                {!empty && (\n                    <Select\n                        onChange={this.handleType}\n                        icon=\"images/icons/input_type.svg\"\n                        placeholder=\"Display Type\"\n                        defaultValue=\"0\"\n                    >\n                        <option value=\"0\">Hex</option>\n                        <option value=\"1\">Decimal</option>\n                        <option value=\"2\">Octal</option>\n                        <option value=\"3\">Binary</option>\n                    </Select>\n                )}\n\n                {!empty &&\n                    machinecode.map((byte, i) => {\n                        let val = this.translateRegister(byte);\n                        return <span key={i}>{val} </span>;\n                    })}\n            </div>\n        );\n    }\n}\n\nconst stateToProps = (state) => {\n    return {\n        tabs: state.tabs,\n        selectedtab: state.selectedtab,\n    };\n};\n\nexport default connect(stateToProps)(PanelMachineCode);\n","\"use strict\";\nimport {\n    Parameter,\n    Keyword,\n    Directive,\n    Instruction,\n    InstructionSet,\n    Format,\n    BitRange,\n} from \"../oak/InstructionSet.js\";\nimport { Core } from \"../oak/Core.js\";\nimport { Utils } from \"../oak/Utils.js\";\nimport JSBI from \"jsbi\";\n\n//The RISC-V Instruction Set Architecture, Version 2.1\nfunction RISCV(options) {\n    //Formats and Instructions\n    let opts = options || [];\n    let formats = [];\n    let instructions = [];\n    let pseudoInstructions = [];\n    //R-Type\n    formats.push(\n        new Format(\n            [\n                new BitRange(\"funct7\", 25, 7),\n                new BitRange(\"rs2\", 20, 5).parameterized(2, Parameter.register),\n                new BitRange(\"rs1\", 15, 5).parameterized(1, Parameter.register),\n                new BitRange(\"funct3\", 12, 3),\n                new BitRange(\"rd\", 7, 5).parameterized(0, Parameter.register),\n                new BitRange(\"opcode\", 0, 7),\n            ],\n            /^\\s*([a-zA-Z]+)\\s*([A-Za-z0-9]+)\\s*,\\s*([A-Za-z0-9]+)\\s*,\\s*([A-Za-z0-9]+)\\s*$/,\n            \"@mnem @arg0, @arg1, @arg2\"\n        )\n    );\n    let rType = formats[formats.length - 1];\n    instructions.push(\n        new Instruction(\n            \"ADD\",\n            rType,\n            [\"opcode\", \"funct3\", \"funct7\"],\n            [0b0110011, 0b000, 0b0000000],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    JSBI.toNumber(\n                        JSBI.bitwiseAnd(\n                            JSBI.add(\n                                JSBI.BigInt(\n                                    core.registerFile.read(core.arguments[1])\n                                ),\n                                JSBI.BigInt(\n                                    core.registerFile.read(core.arguments[2])\n                                )\n                            ),\n                            JSBI.BigInt(\"0xFFFFFFFF\")\n                        )\n                    )\n                );\n                core.pc += 4;\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"SUB\",\n            rType,\n            [\"opcode\", \"funct3\", \"funct7\"],\n            [0b0110011, 0b000, 0b0100000],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    JSBI.toNumber(\n                        JSBI.bitwiseAnd(\n                            JSBI.subtract(\n                                JSBI.BigInt(\n                                    core.registerFile.read(core.arguments[1])\n                                ),\n                                JSBI.BigInt(\n                                    core.registerFile.read(core.arguments[2])\n                                )\n                            ),\n                            JSBI.BigInt(\"0xFFFFFFFF\")\n                        )\n                    )\n                );\n                core.pc += 4;\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"SLL\",\n            rType,\n            [\"opcode\", \"funct3\", \"funct7\"],\n            [0b0110011, 0b001, 0b0000000],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    core.registerFile.read(core.arguments[1]) <<\n                        core.registerFile.read(core.arguments[2])\n                );\n                core.pc += 4;\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"SLT\",\n            rType,\n            [\"opcode\", \"funct3\", \"funct7\"],\n            [0b0110011, 0b010, 0b0000000],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    core.registerFile.read(core.arguments[1]) <\n                        core.registerFile.read(core.arguments[2])\n                        ? 1\n                        : 0\n                );\n                core.pc += 4;\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"SLTU\",\n            rType,\n            [\"opcode\", \"funct3\", \"funct7\"],\n            [0b0110011, 0b011, 0b0000000],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    core.registerFile.read(core.arguments[1]) >>> 0 <\n                        core.registerFile.read(core.arguments[2]) >>> 0\n                        ? 1\n                        : 0\n                );\n                core.pc += 4;\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"XOR\",\n            rType,\n            [\"opcode\", \"funct3\", \"funct7\"],\n            [0b0110011, 0b100, 0b0000000],\n            function (core) {\n                //\n                core.registerFile.write(\n                    core.arguments[0],\n                    core.registerFile.read(core.arguments[1]) ^\n                        core.registerFile.read(core.arguments[2])\n                );\n                core.pc += 4;\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"SRL\",\n            rType,\n            [\"opcode\", \"funct3\", \"funct7\"],\n            [0b0110011, 0b101, 0b0000000],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    core.registerFile.read(core.arguments[1]) >>>\n                        core.registerFile.read(core.arguments[2])\n                );\n                core.pc += 4;\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"SRA\",\n            rType,\n            [\"opcode\", \"funct3\", \"funct7\"],\n            [0b0110011, 0b101, 0b0100000],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    core.registerFile.read(core.arguments[1]) >>\n                        core.registerFile.read(core.arguments[2])\n                );\n                core.pc += 4;\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"OR\",\n            rType,\n            [\"opcode\", \"funct3\", \"funct7\"],\n            [0b0110011, 0b110, 0b0000000],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    core.registerFile.read(core.arguments[1]) |\n                        core.registerFile.read(core.arguments[2])\n                );\n                core.pc += 4;\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"AND\",\n            rType,\n            [\"opcode\", \"funct3\", \"funct7\"],\n            [0b0110011, 0b111, 0b0000000],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    core.registerFile.read(core.arguments[1]) &\n                        core.registerFile.read(core.arguments[2])\n                );\n                core.pc += 4;\n                return null;\n            }\n        )\n    );\n    if (opts.includes(\"M\")) {\n        instructions.push(\n            new Instruction(\n                \"MUL\",\n                rType,\n                [\"opcode\", \"funct3\", \"funct7\"],\n                [0b0110011, 0b000, 0b0000001],\n                function (core) {\n                    let multiplier = JSBI.BigInt(\n                        core.registerFile.read(core.arguments[1]) >> 0\n                    );\n                    let multiplicant = JSBI.BigInt(\n                        core.registerFile.read(core.arguments[2]) >> 0\n                    );\n                    let product = JSBI.multiply(multiplier, multiplicant);\n                    let productNumber = JSBI.toNumber(\n                        JSBI.bitwiseAnd(product, JSBI.BigInt(\"0xFFFFFFFF\"))\n                    );\n                    core.registerFile.write(core.arguments[0], productNumber);\n                    core.pc += 4;\n                    return null;\n                }\n            )\n        );\n        instructions.push(\n            new Instruction(\n                \"MULH\",\n                rType,\n                [\"opcode\", \"funct3\", \"funct7\"],\n                [0b0110011, 0b001, 0b0000001],\n                function (core) {\n                    console.log();\n                    let multiplier = JSBI.BigInt(\n                        core.registerFile.read(core.arguments[1]) >> 0\n                    );\n                    let multiplicant = JSBI.BigInt(\n                        core.registerFile.read(core.arguments[2]) >> 0\n                    );\n                    let product = JSBI.multiply(multiplier, multiplicant);\n                    let productNumber = JSBI.toNumber(\n                        JSBI.bitwiseAnd(\n                            JSBI.signedRightShift(product, JSBI.BigInt(\"32\")),\n                            JSBI.BigInt(\"0xFFFFFFFF\")\n                        )\n                    );\n                    core.registerFile.write(core.arguments[0], productNumber);\n                    core.pc += 4;\n                    return null;\n                }\n            )\n        );\n        instructions.push(\n            new Instruction(\n                \"MULHU\",\n                rType,\n                [\"opcode\", \"funct3\", \"funct7\"],\n                [0b0110011, 0b010, 0b0000001],\n                function (core) {\n                    let multiplier = JSBI.BigInt(\n                        core.registerFile.read(core.arguments[1]) >>> 0\n                    );\n                    let multiplicant = JSBI.BigInt(\n                        core.registerFile.read(core.arguments[2]) >>> 0\n                    );\n                    let product = JSBI.multiply(multiplier, multiplicant);\n                    let productNumber = JSBI.toNumber(\n                        JSBI.bitwiseAnd(\n                            JSBI.signedRightShift(product, JSBI.BigInt(\"32\")),\n                            JSBI.BigInt(\"0xFFFFFFFF\")\n                        )\n                    );\n                    core.registerFile.write(core.arguments[0], productNumber);\n                    core.pc += 4;\n                    return null;\n                }\n            )\n        );\n        instructions.push(\n            new Instruction(\n                \"MULHSU\",\n                rType,\n                [\"opcode\", \"funct3\", \"funct7\"],\n                [0b0110011, 0b011, 0b0000001],\n                function (core) {\n                    let multiplier = JSBI.BigInt(\n                        core.registerFile.read(core.arguments[1]) >> 0\n                    );\n                    let multiplicant = JSBI.BigInt(\n                        core.registerFile.read(core.arguments[2]) >>> 0\n                    );\n                    let product = JSBI.multiply(multiplier, multiplicant);\n                    let productNumber = JSBI.toNumber(\n                        JSBI.bitwiseAnd(\n                            JSBI.signedRightShift(product, JSBI.BigInt(\"32\")),\n                            JSBI.BigInt(\"0xFFFFFFFF\")\n                        )\n                    );\n                    core.registerFile.write(core.arguments[0], productNumber);\n                    core.pc += 4;\n                    return null;\n                }\n            )\n        );\n        instructions.push(\n            new Instruction(\n                \"DIV\",\n                rType,\n                [\"opcode\", \"funct3\", \"funct7\"],\n                [0b0110011, 0b100, 0b0000001],\n                function (core) {\n                    let dividend = JSBI.BigInt(\n                        core.registerFile.read(core.arguments[1]) >> 0\n                    );\n                    let divisor = JSBI.BigInt(\n                        core.registerFile.read(core.arguments[2]) >> 0\n                    );\n\n                    let product = null;\n                    if (JSBI.equal(divisor, JSBI.BigInt(\"0\"))) {\n                        product = JSBI.BigInt(\"-1\");\n                    } else if (\n                        JSBI.equal(\n                            JSBI.bitwiseAnd(\n                                dividend,\n                                JSBI.BigInt(\"0xFFFFFFFF\")\n                            ),\n                            JSBI.BigInt(\"0x80000000\")\n                        ) &&\n                        JSBI.equal(divisor, JSBI.BigInt(\"-1\"))\n                    ) {\n                        product = JSBI.BigInt(\"0x80000000\");\n                    } else {\n                        product = JSBI.divide(dividend, divisor);\n                    }\n                    let productNumber = JSBI.toNumber(\n                        JSBI.bitwiseAnd(product, JSBI.BigInt(\"0xFFFFFFFF\"))\n                    );\n                    core.registerFile.write(core.arguments[0], productNumber);\n                    core.pc += 4;\n                    return null;\n                }\n            )\n        );\n        instructions.push(\n            new Instruction(\n                \"DIVU\",\n                rType,\n                [\"opcode\", \"funct3\", \"funct7\"],\n                [0b0110011, 0b101, 0b0000001],\n                function (core) {\n                    let dividend = JSBI.BigInt(\n                        core.registerFile.read(core.arguments[1]) >>> 0\n                    );\n                    let divisor = JSBI.BigInt(\n                        core.registerFile.read(core.arguments[2]) >>> 0\n                    );\n\n                    let product = null;\n                    if (JSBI.equal(divisor, JSBI.BigInt(\"0\"))) {\n                        product = JSBI.BigInt(\"-1\");\n                    } else {\n                        product = JSBI.divide(dividend, divisor);\n                    }\n                    let productNumber = JSBI.toNumber(\n                        JSBI.bitwiseAnd(product, JSBI.BigInt(\"0xFFFFFFFF\"))\n                    );\n                    core.registerFile.write(core.arguments[0], productNumber);\n                    core.pc += 4;\n                    return null;\n                }\n            )\n        );\n        instructions.push(\n            new Instruction(\n                \"REM\",\n                rType,\n                [\"opcode\", \"funct3\", \"funct7\"],\n                [0b0110011, 0b110, 0b0000001],\n                function (core) {\n                    let dividend = JSBI.BigInt(\n                        core.registerFile.read(core.arguments[1]) >> 0\n                    );\n                    let divisor = JSBI.BigInt(\n                        core.registerFile.read(core.arguments[2]) >> 0\n                    );\n\n                    let remainder = null;\n                    if (JSBI.equal(divisor, JSBI.BigInt(\"0\"))) {\n                        remainder = dividend;\n                    } else if (\n                        JSBI.equal(\n                            JSBI.bitwiseAnd(\n                                dividend,\n                                JSBI.BigInt(\"0xFFFFFFFF\")\n                            ),\n                            JSBI.BigInt(\"0x80000000\")\n                        ) &&\n                        JSBI.equal(divisor, JSBI.BigInt(\"-1\"))\n                    ) {\n                        remainder = JSBI.BigInt(\"0\");\n                    } else {\n                        remainder = JSBI.remainder(dividend, divisor);\n                    }\n                    let productNumber = JSBI.toNumber(\n                        JSBI.bitwiseAnd(remainder, JSBI.BigInt(\"0xFFFFFFFF\"))\n                    );\n                    core.registerFile.write(core.arguments[0], productNumber);\n                    core.pc += 4;\n                    return null;\n                }\n            )\n        );\n        instructions.push(\n            new Instruction(\n                \"REMU\",\n                rType,\n                [\"opcode\", \"funct3\", \"funct7\"],\n                [0b0110011, 0b111, 0b0000001],\n                function (core) {\n                    let dividend = JSBI.BigInt(\n                        core.registerFile.read(core.arguments[1]) >>> 0\n                    );\n                    let divisor = JSBI.BigInt(\n                        core.registerFile.read(core.arguments[2]) >>> 0\n                    );\n\n                    let remainder = null;\n                    if (JSBI.equal(divisor, JSBI.BigInt(\"0\"))) {\n                        remainder = dividend;\n                    } else {\n                        remainder = JSBI.remainder(dividend, divisor);\n                    }\n                    let productNumber = JSBI.toNumber(\n                        JSBI.bitwiseAnd(remainder, JSBI.BigInt(\"0xFFFFFFFF\"))\n                    );\n                    core.registerFile.write(core.arguments[0], productNumber);\n                    core.pc += 4;\n                    return null;\n                }\n            )\n        );\n    }\n    //I-Type\n    formats.push(\n        new Format(\n            [\n                new BitRange(\"imm\", 20, 12, null, true).parameterized(\n                    2,\n                    Parameter.immediate\n                ),\n                new BitRange(\"rs1\", 15, 5).parameterized(1, Parameter.register),\n                new BitRange(\"funct3\", 12, 3),\n                new BitRange(\"rd\", 7, 5).parameterized(0, Parameter.register),\n                new BitRange(\"opcode\", 0, 7),\n            ],\n            /^\\s*([a-zA-Z]+)\\s*([A-Za-z0-9]+)\\s*,\\s*([A-Za-z0-9]+),\\s*(-?[a-zA-Z0-9_]+)\\s*$/,\n            \"@mnem @arg0, @arg1, @arg2\"\n        )\n    );\n    let iType = formats[formats.length - 1];\n    instructions.push(\n        new Instruction(\n            \"JALR\",\n            iType,\n            [\"opcode\", \"funct3\"],\n            [0b1100111, 0b000],\n            function (core) {\n                core.registerFile.write(core.arguments[0], core.pc + 4);\n                core.pc =\n                    core.registerFile.read(core.arguments[1]) +\n                    Utils.signExt(core.arguments[2], 12);\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"ADDI\",\n            iType,\n            [\"opcode\", \"funct3\"],\n            [0b0010011, 0b000],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    core.registerFile.read(core.arguments[1]) +\n                        core.arguments[2]\n                );\n                core.pc += 4;\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"SLTI\",\n            iType,\n            [\"opcode\", \"funct3\"],\n            [0b0010011, 0b010],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    core.registerFile.read(core.arguments[1]) <\n                        core.arguments[2]\n                        ? 1\n                        : 0\n                );\n                core.pc += 4;\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"SLTIU\",\n            iType,\n            [\"opcode\", \"funct3\"],\n            [0b0010011, 0b011],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    core.registerFile.read(core.arguments[1]) >>> 0 <\n                        core.arguments[2] >>> 0\n                        ? 1\n                        : 0\n                );\n                core.pc += 4;\n                return null;\n            },\n            false\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"XORI\",\n            iType,\n            [\"opcode\", \"funct3\"],\n            [0b0010011, 0b100],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    (core.registerFile.read(core.arguments[1]) >>> 0) ^\n                        core.arguments[2]\n                );\n                core.pc += 4;\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"ORI\",\n            iType,\n            [\"opcode\", \"funct3\"],\n            [0b0010011, 0b110],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    (core.registerFile.read(core.arguments[1]) >>> 0) |\n                        core.arguments[2]\n                );\n                core.pc += 4;\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"ANDI\",\n            iType,\n            [\"opcode\", \"funct3\"],\n            [0b0010011, 0b111],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    (core.registerFile.read(core.arguments[1]) >>> 0) &\n                        core.arguments[2]\n                );\n                core.pc += 4;\n                return null;\n            }\n        )\n    );\n    //IL Subtype\n    formats.push(\n        new Format(\n            [\n                new BitRange(\"imm\", 20, 12, null, true).parameterized(\n                    1,\n                    Parameter.immediate\n                ),\n                new BitRange(\"rs1\", 15, 5).parameterized(2, Parameter.register),\n                new BitRange(\"funct3\", 12, 3),\n                new BitRange(\"rd\", 7, 5).parameterized(0, Parameter.register),\n                new BitRange(\"opcode\", 0, 7),\n            ],\n            /^\\s*([a-zA-Z]+)\\s*([A-Za-z0-9]+)\\s*,\\s*(-?0?[boxd]?[0-9A-F]+)\\s*\\(\\s*([A-Za-z0-9]+)\\s*\\)\\s*$/,\n            \"@mnem @arg0, @arg2(@arg1)\"\n        )\n    );\n    let ilSubtype = formats[formats.length - 1];\n    instructions.push(\n        new Instruction(\n            \"LB\",\n            ilSubtype,\n            [\"opcode\", \"funct3\"],\n            [0b0000011, 0b000],\n            function (core) {\n                let bytes = core.memcpy(\n                    core.registerFile.read(core.arguments[2]) +\n                        core.arguments[1],\n                    1\n                );\n                if (bytes === null) {\n                    return \"Illegal memory access.\";\n                }\n                core.registerFile.write(\n                    core.arguments[0],\n                    Utils.signExt(bytes[0], 8)\n                );\n                core.pc += 4;\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"LH\",\n            ilSubtype,\n            [\"opcode\", \"funct3\"],\n            [0b0000011, 0b001],\n            function (core) {\n                let bytes = core.memcpy(\n                    core.registerFile.read(core.arguments[2]) +\n                        core.arguments[1],\n                    2\n                );\n                if (bytes === null) {\n                    return \"Illegal memory access.\";\n                }\n                core.registerFile.write(\n                    core.arguments[0],\n                    Utils.signExt(Utils.catBytes(bytes), 16)\n                );\n                core.pc += 4;\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"LW\",\n            ilSubtype,\n            [\"opcode\", \"funct3\"],\n            [0b0000011, 0b010],\n            function (core) {\n                let bytes = core.memcpy(\n                    core.registerFile.read(core.arguments[2]) +\n                        core.arguments[1],\n                    4\n                );\n                if (bytes === null) {\n                    return \"Illegal memory access.\";\n                }\n                core.registerFile.write(\n                    core.arguments[0],\n                    Utils.catBytes(bytes)\n                );\n                core.pc += 4;\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"LBU\",\n            ilSubtype,\n            [\"opcode\", \"funct3\"],\n            [0b0000011, 0b100],\n            function (core) {\n                let bytes = core.memcpy(\n                    core.registerFile.read(core.arguments[2]) +\n                        core.arguments[1],\n                    1\n                );\n                if (bytes === null) {\n                    return \"Illegal memory access.\";\n                }\n                core.registerFile.write(core.arguments[0], bytes[0]);\n                core.pc += 4;\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"LHU\",\n            ilSubtype,\n            [\"opcode\", \"funct3\"],\n            [0b0000011, 0b101],\n            function (core) {\n                let bytes = core.memcpy(\n                    core.registerFile.read(core.arguments[2]) +\n                        core.arguments[1],\n                    2\n                );\n                if (bytes === null) {\n                    return \"Illegal memory access.\";\n                }\n                core.registerFile.write(\n                    core.arguments[0],\n                    Utils.catBytes(bytes)\n                );\n                core.pc += 4;\n                return null;\n            }\n        )\n    );\n    // IS Subtype\n    formats.push(\n        new Format(\n            [\n                new BitRange(\"funct7\", 25, 7),\n                new BitRange(\"shamt\", 20, 5).parameterized(\n                    2,\n                    Parameter.immediate\n                ),\n                new BitRange(\"rs1\", 15, 5).parameterized(1, Parameter.register),\n                new BitRange(\"funct3\", 12, 3),\n                new BitRange(\"rd\", 7, 5).parameterized(0, Parameter.register),\n                new BitRange(\"opcode\", 0, 7),\n            ],\n            /^\\s*([a-zA-Z]+)\\s*([A-Za-z0-9]+)\\s*,\\s*([A-Za-z0-9]+),\\s*(-?0?[boxd]?[0-9A-F]+)\\s*$/,\n            \"@mnem @arg0, @arg1, @arg2\"\n        )\n    );\n    let isSubtype = formats[formats.length - 1];\n    instructions.push(\n        new Instruction(\n            \"SLLI\",\n            isSubtype,\n            [\"opcode\", \"funct3\", \"funct7\"],\n            [0b0010011, 0b001, 0b0000000],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    core.registerFile.read(core.arguments[1]) <<\n                        core.arguments[2]\n                );\n                core.pc += 4;\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"SRLI\",\n            isSubtype,\n            [\"opcode\", \"funct3\", \"funct7\"],\n            [0b0010011, 0b101, 0b0000000],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    core.registerFile.read(core.arguments[1]) >>>\n                        core.arguments[2]\n                );\n                core.pc += 4;\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"SRAI\",\n            isSubtype,\n            [\"opcode\", \"funct3\", \"funct7\"],\n            [0b0010011, 0b101, 0b0100000],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    core.registerFile.read(core.arguments[1]) >>\n                        core.arguments[2]\n                );\n                core.pc += 4;\n                return null;\n            }\n        )\n    );\n    //S-Type\n    formats.push(\n        new Format(\n            [\n                new BitRange(\"imm\", 25, 7, null, true)\n                    .parameterized(1, Parameter.immediate)\n                    .limited(12, 5, 11),\n                new BitRange(\"rs2\", 20, 5).parameterized(0, Parameter.register),\n                new BitRange(\"rs1\", 15, 5).parameterized(2, Parameter.register),\n                new BitRange(\"funct3\", 12, 3),\n                new BitRange(\"imm\", 7, 5, null, true)\n                    .parameterized(1, Parameter.immediate)\n                    .limited(12, 0, 4),\n                new BitRange(\"opcode\", 0, 7),\n            ],\n            /^\\s*([a-zA-Z]+)\\s*([A-Za-z0-9]+)\\s*,\\s*(-?0?[boxd]?[0-9A-F]+)\\(\\s*([A-Za-z0-9]+)\\s*\\)\\s*$/,\n            \"@mnem @arg0, @arg2(@arg1)\"\n        )\n    );\n    let sType = formats[formats.length - 1];\n    instructions.push(\n        new Instruction(\n            \"SB\",\n            sType,\n            [\"opcode\", \"funct3\"],\n            [0b0100011, 0b000],\n            function (core) {\n                let bytes = [];\n                bytes.push(core.registerFile.read(core.arguments[0]) & 255);\n                if (\n                    core.memset(\n                        core.registerFile.read(core.arguments[2]) +\n                            core.arguments[1],\n                        bytes\n                    )\n                ) {\n                    core.pc += 4;\n                    return null;\n                }\n                return \"Illegal memory access.\";\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"SH\",\n            sType,\n            [\"opcode\", \"funct3\"],\n            [0b0100011, 0b001],\n            function (core) {\n                let bytes = [];\n                let value = core.registerFile.read(core.arguments[0]);\n                bytes.push(value & 255);\n                value = value >>> 8;\n                bytes.push(value & 255);\n                if (\n                    core.memset(\n                        core.registerFile.read(core.arguments[2]) +\n                            core.arguments[1],\n                        bytes\n                    )\n                ) {\n                    core.pc += 4;\n                    return null;\n                }\n                return \"Illegal memory access.\";\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"SW\",\n            sType,\n            [\"opcode\", \"funct3\"],\n            [0b0100011, 0b010],\n            function (core) {\n                let bytes = [];\n                let value = core.registerFile.read(core.arguments[0]);\n                bytes.push(value & 255);\n                value = value >>> 8;\n                bytes.push(value & 255);\n                value = value >>> 8;\n                bytes.push(value & 255);\n                value = value >>> 8;\n                bytes.push(value & 255);\n                if (\n                    core.memset(\n                        core.registerFile.read(core.arguments[2]) +\n                            core.arguments[1],\n                        bytes\n                    )\n                ) {\n                    core.pc += 4;\n                    return null;\n                }\n                return \"Illegal memory access.\";\n            }\n        )\n    );\n    //U-Type\n    formats.push(\n        new Format(\n            [\n                new BitRange(\"imm\", 12, 20, null, true).parameterized(\n                    1,\n                    Parameter.immediate\n                ),\n                new BitRange(\"rd\", 7, 5).parameterized(0, Parameter.register),\n                new BitRange(\"opcode\", 0, 7),\n            ],\n            /^\\s*([a-zA-Z]+)\\s*([A-Za-z0-9]+)\\s*,\\s*([a-zA-Z0-9_]+)\\s*$/,\n            \"@mnem @arg0, @arg1\"\n        )\n    );\n    let uType = formats[formats.length - 1];\n    instructions.push(\n        new Instruction(\"LUI\", uType, [\"opcode\"], [0b0110111], function (core) {\n            core.registerFile.write(core.arguments[0], core.arguments[1] << 12);\n            core.pc += 4;\n            return null;\n        })\n    );\n    instructions.push(\n        new Instruction(\"AUIPC\", uType, [\"opcode\"], [0b0010111], function (\n            core\n        ) {\n            core.registerFile.write(\n                core.arguments[0],\n                (core.arguments[1] << 12) + core.pc\n            );\n            core.pc += 4;\n            return null;\n        })\n    );\n    //SB-Type\n    formats.push(\n        new Format(\n            [\n                new BitRange(\"imm\", 31, 1, null, true)\n                    .parameterized(2, Parameter.offset)\n                    .limited(13, 12, 12),\n                new BitRange(\"imm\", 25, 6, null, true)\n                    .parameterized(2, Parameter.offset)\n                    .limited(13, 5, 10),\n                new BitRange(\"rs2\", 20, 5).parameterized(1, Parameter.register),\n                new BitRange(\"rs1\", 15, 5).parameterized(0, Parameter.register),\n                new BitRange(\"funct3\", 12, 3),\n                new BitRange(\"imm\", 8, 4, null, true)\n                    .parameterized(2, Parameter.offset)\n                    .limited(13, 1, 4),\n                new BitRange(\"imm\", 7, 1, null, true)\n                    .parameterized(2, Parameter.offset)\n                    .limited(13, 11, 11),\n                new BitRange(\"opcode\", 0, 7),\n            ],\n            /^\\s*([a-zA-Z]+)\\s*([A-Za-z0-9]+)\\s*,\\s*([A-Za-z0-9]+)\\s*,\\s*([a-zA-Z0-9_]+)\\s*$/,\n            \"@mnem @arg0, @arg1, @arg2\"\n        )\n    );\n    let sbType = formats[formats.length - 1];\n    instructions.push(\n        new Instruction(\n            \"BEQ\",\n            sbType,\n            [\"opcode\", \"funct3\"],\n            [0b1100011, 0b000],\n            function (core) {\n                if (\n                    core.registerFile.read(core.arguments[0]) ===\n                    core.registerFile.read(core.arguments[1])\n                ) {\n                    core.pc += core.arguments[2];\n                } else {\n                    core.pc += 4;\n                }\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"BNE\",\n            sbType,\n            [\"opcode\", \"funct3\"],\n            [0b1100011, 0b001],\n            function (core) {\n                if (\n                    core.registerFile.read(core.arguments[0]) !==\n                    core.registerFile.read(core.arguments[1])\n                ) {\n                    core.pc += core.arguments[2];\n                } else {\n                    core.pc += 4;\n                }\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"BLT\",\n            sbType,\n            [\"opcode\", \"funct3\"],\n            [0b1100011, 0b100],\n            function (core) {\n                if (\n                    core.registerFile.read(core.arguments[0]) <\n                    core.registerFile.read(core.arguments[1])\n                ) {\n                    core.pc += core.arguments[2];\n                } else {\n                    core.pc += 4;\n                }\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"BGE\",\n            sbType,\n            [\"opcode\", \"funct3\"],\n            [0b1100011, 0b101],\n            function (core) {\n                if (\n                    core.registerFile.read(core.arguments[0]) >=\n                    core.registerFile.read(core.arguments[1])\n                ) {\n                    core.pc += core.arguments[2];\n                } else {\n                    core.pc += 4;\n                }\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"BLTU\",\n            sbType,\n            [\"opcode\", \"funct3\"],\n            [0b1100011, 0b110],\n            function (core) {\n                if (\n                    core.registerFile.read(core.arguments[0]) >>> 0 <\n                    core.registerFile.read(core.arguments[1]) >>> 0\n                ) {\n                    core.pc += core.arguments[2];\n                } else {\n                    core.pc += 4;\n                }\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"BGEU\",\n            sbType,\n            [\"opcode\", \"funct3\"],\n            [0b1100011, 0b111],\n            function (core) {\n                if (\n                    core.registerFile.read(core.arguments[0]) >>> 0 >=\n                    core.registerFile.read(core.arguments[1]) >>> 0\n                ) {\n                    core.pc += core.arguments[2];\n                } else {\n                    core.pc += 4;\n                }\n                return null;\n            }\n        )\n    );\n    //UJ-Type\n    formats.push(\n        new Format(\n            [\n                new BitRange(\"imm\", 31, 1, null, true)\n                    .parameterized(1, Parameter.offset)\n                    .limited(21, 20, 20),\n                new BitRange(\"imm\", 21, 10, null, true)\n                    .parameterized(1, Parameter.offset)\n                    .limited(21, 1, 10),\n                new BitRange(\"imm\", 20, 1, null, true)\n                    .parameterized(1, Parameter.offset)\n                    .limited(21, 11, 11),\n                new BitRange(\"imm\", 12, 8, null, true)\n                    .parameterized(1, Parameter.offset)\n                    .limited(21, 12, 19),\n                new BitRange(\"rd\", 7, 5).parameterized(0, Parameter.register),\n                new BitRange(\"opcode\", 0, 7),\n            ],\n            /^\\s*([a-zA-Z]+)\\s*([A-Za-z0-9]+)\\s*,\\s*([a-zA-Z0-9_]+)\\s*$/,\n            \"@mnem @arg0, @arg1\"\n        )\n    );\n    let ujType = formats[formats.length - 1];\n    instructions.push(\n        new Instruction(\"JAL\", ujType, [\"opcode\"], [0b1101111], function (\n            core\n        ) {\n            core.registerFile.write(core.arguments[0], core.pc + 4);\n            //console.log(core.pc);\n            core.pc += Utils.signExt(core.arguments[1], 21);\n            //console.log(core.arguments[1]);\n            return null;\n        })\n    );\n    //System Type\n    //All-Const Type\n    formats.push(\n        new Format(\n            [new BitRange(\"const\", 0, 32)],\n            /^\\s*([a-zA-Z]+)\\s*$/,\n            \"@mnem\"\n        )\n    );\n    let allConstSubtype = formats[formats.length - 1];\n    instructions.push(\n        new Instruction(\n            \"ECALL\",\n            allConstSubtype,\n            [\"const\"],\n            [0b00000000000000000000000001110011],\n            (core) => {\n                let result = core.virtualOS.ecall(core);\n                core.pc += 4;\n                return result;\n            }\n        )\n    );\n    //PseudoInstructions\n    //This is a far from ideal implementation of pseudoinstructions and is only there for demo purposes.\n    //MV\n    formats.push(\n        new Format(\n            [\n                new BitRange(\"funct7\", 25, 7),\n                new BitRange(\"rs2\", 20, 5).parameterized(1, Parameter.register),\n                new BitRange(\"rs1\", 15, 5),\n                new BitRange(\"funct3\", 12, 3),\n                new BitRange(\"rd\", 7, 5).parameterized(0, Parameter.register),\n                new BitRange(\"opcode\", 0, 7),\n            ],\n            /^\\s*([a-zA-Z]+)\\s*([A-Za-z0-9]+)\\s*,\\s*([A-Za-z0-9]+)\\s*$/,\n            \"@mnem @arg0, @arg1\"\n        )\n    );\n    let mvPseudo = formats[formats.length - 1];\n    instructions.push(\n        new Instruction(\n            \"MV\",\n            mvPseudo,\n            [\"opcode\", \"funct3\", \"rs1\", \"funct7\"],\n            [0b0110011, 0b000, 0b00000, 0b0000000],\n            function (core) {\n                return null; //Captured by and\n            },\n            false,\n            [\"ADD\"]\n        )\n    );\n    //LI\n    formats.push(\n        new Format(\n            [\n                new BitRange(\"imm\", 20, 12, null, true).parameterized(\n                    1,\n                    Parameter.immediate\n                ),\n                new BitRange(\"rs1\", 15, 5),\n                new BitRange(\"funct3\", 12, 3),\n                new BitRange(\"rd\", 7, 5).parameterized(0, Parameter.register),\n                new BitRange(\"opcode\", 0, 7),\n            ],\n            /^\\s*([a-zA-Z]+)\\s*([A-Za-z0-9]+)\\s*,\\s*(-?[a-zA-Z0-9_]+)\\s*$/,\n            \"@mnem @arg0, @arg1\"\n        )\n    );\n    let liPseudo = formats[formats.length - 1];\n    instructions.push(\n        new Instruction(\n            \"LI\",\n            liPseudo,\n            [\"opcode\", \"funct3\", \"rs1\"],\n            [0b0010011, 0b000, 0b00000],\n            function (core) {\n                return null; //Captured by andi\n            },\n            false,\n            [\"ADDI\"]\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"LA\",\n            liPseudo,\n            [\"opcode\", \"funct3\", \"rs1\"],\n            [0b0010011, 0b000, 0b00000],\n            function (core) {\n                return null; //Captured by andi\n            },\n            false,\n            [\"ADDI\"]\n        )\n    );\n    //JR pseudo\n    formats.push(\n        new Format(\n            [\n                new BitRange(\"imm\", 20, 12, null, true),\n                new BitRange(\"rs1\", 15, 5).parameterized(0, Parameter.register),\n                new BitRange(\"funct3\", 12, 3),\n                new BitRange(\"rd\", 7, 5),\n                new BitRange(\"opcode\", 0, 7),\n            ],\n            /^\\s*([a-zA-Z]+)\\s*([A-Za-z0-9]+)\\s*$/,\n            \"@mnem @arg0\"\n        )\n    );\n    let jrPseudo = formats[formats.length - 1];\n    instructions.push(\n        new Instruction(\n            \"JR\",\n            jrPseudo,\n            [\"opcode\", \"rd\", \"funct3\", \"imm\"],\n            [0b1100111, 0b00000, 0b000, 0b000000000000],\n            function (core) {\n                return null; //captured by jalr\n            },\n            false,\n            [\"JALR\"]\n        )\n    );\n    //Scall, Syscall both as PseudoInstructions\n    instructions.push(\n        new Instruction(\n            \"SCALL\",\n            allConstSubtype,\n            [\"const\"],\n            [0b00000000000000000000000001110011],\n            function (core) {\n                return null; //captured by ecall\n            },\n            false,\n            [\"ECALL\"]\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"SYSCALL\",\n            allConstSubtype,\n            [\"const\"],\n            [0b00000000000000000000000001110011],\n            function (core) {\n                return null; //captured by ecall\n            },\n            false,\n            [\"ECALL\"]\n        )\n    );\n    let abiNames = [\n        \"zero\",\n        \"ra\",\n        \"sp\",\n        \"gp\",\n        \"tp\",\n        \"t0\",\n        \"t1\",\n        \"t2\",\n        \"s0\",\n        \"s1\",\n        \"a0\",\n        \"a1\",\n        \"a2\",\n        \"a3\",\n        \"a4\",\n        \"a5\",\n        \"a6\",\n        \"a7\",\n        \"s2\",\n        \"s3\",\n        \"s4\",\n        \"s5\",\n        \"s6\",\n        \"s7\",\n        \"s8\",\n        \"s9\",\n        \"s10\",\n        \"s11\",\n        \"t3\",\n        \"t4\",\n        \"t5\",\n        \"t6\",\n    ];\n    let keywords = [];\n    keywords[Keyword.directive] = [\"\\\\.\"];\n    keywords[Keyword.comment] = [\"#\"];\n    keywords[Keyword.label] = [\"\\\\:\"];\n    keywords[Keyword.stringMarker] = ['\\\\\"'];\n    keywords[Keyword.charMarker] = [\"\\\\'\"];\n    keywords[Keyword.register] = [\"x\"];\n    let directives = [];\n    directives[\"text\"] = Directive.text;\n    directives[\"data\"] = Directive.data;\n    directives[\"string\"] = Directive.cString;\n    directives[\"byte\"] = Directive._8bit;\n    directives[\"half\"] = Directive._16bit;\n    directives[\"word\"] = Directive._32bit;\n    return new InstructionSet(\n        32,\n        formats,\n        instructions,\n        pseudoInstructions,\n        abiNames,\n        keywords,\n        directives,\n        false,\n        `    la a1, str\n    li a0, 4 #4 is the string print service number...\n    ecall\n    li a0, 10 #...and 10 is the program termination service number!\n    ecall\n.data\nstr:    .string \"Hello, World!\"`\n    );\n}\nclass RISCVRegisterFile {\n    constructor(memorySize, abiNames) {\n        this.physicalFile = [];\n        this.modifiedRegisters = [];\n        for (let i = 0; i < 32; i++) {\n            this.physicalFile.push(0);\n            this.modifiedRegisters.push(false);\n        }\n        this.memorySize = memorySize;\n        this.physicalFile[2] = memorySize; //stack pointer\n        this.abiNames = abiNames;\n    }\n    print() {\n        console.log(\"Registers\\n------\");\n        for (let i = 0; i < 32; i++) {\n            console.log(\n                \"x\" + i.toString(),\n                this.abiNames[i],\n                this.physicalFile[i].toString(),\n                (this.physicalFile[i] >>> 0).toString(16).toUpperCase()\n            );\n        }\n        console.log(\"------\");\n    }\n    read(registerNumber) {\n        if (registerNumber === 0) {\n            return 0;\n        } else {\n            return this.physicalFile[registerNumber];\n        }\n    }\n    write(registerNumber, value) {\n        this.physicalFile[registerNumber] = (value >>> 0) & 0xffffffff;\n        this.modifiedRegisters[registerNumber] = true;\n    }\n    getRegisterCount() {\n        return 32;\n    }\n    getModifiedRegisters() {\n        let modReg = this.modifiedRegisters.slice();\n        for (let i = 0; i < this.getRegisterCount(); i++) {\n            this.modifiedRegisters[i] = false;\n        }\n        return modReg;\n    }\n    reset() {\n        for (let i = 0; i < 32; i++) {\n            this.physicalFile[i] = 0;\n            this.modifiedRegisters[i] = false;\n        }\n        this.physicalFile[2] = this.memorySize;\n    }\n}\nclass RISCVCore extends Core {\n    reset() {\n        this.pc = 0;\n        this.memory = [];\n        for (let i = 0; i < this.memorySize; i++) {\n            this.memory[i] = 0;\n        }\n        this.registerFile.reset();\n    }\n    fetch() {\n        let arr = this.memcpy(this.pc >>> 0, 4);\n        if (arr === null) {\n            return `Attempting to fetch from illegal memory address @${this.pc}`;\n        }\n        this.fetched = Utils.catBytes(arr);\n        return null;\n    }\n    constructor(memorySize, virtualOS, instructionSet) {\n        super();\n        this.virtualOSServiceRegister = 10;\n        this.virtualOSArgumentVectorStart = 11;\n        this.virtualOSArgumentVectorEnd = 17;\n        this.pc = 0 >>> 0;\n        this.memorySize = memorySize;\n        this.virtualOS = virtualOS;\n        this.instructionSet = instructionSet;\n        this.registerFile = new RISCVRegisterFile(\n            memorySize,\n            instructionSet.abiNames\n        );\n        this.memory = new Array(memorySize);\n        for (let i = 0; i < memorySize; i++) {\n            this.memory[i] = 0;\n        }\n    }\n}\nCore.factory.ISAs[\"RISCV\"] = {\n    generator: RISCV,\n    core: RISCVCore,\n    options: [\"M\"],\n};\n","\"use strict\";\nimport {\n    Parameter,\n    Keyword,\n    Directive,\n    Instruction,\n    InstructionSet,\n    Format,\n    BitRange,\n} from \"../oak/InstructionSet.js\";\nimport { Core } from \"../oak/Core.js\";\nimport { Utils } from \"../oak/Utils.js\";\nimport JSBI from \"jsbi\";\n\n//The MIPS Instruction Set Architecture\nfunction MIPS(options) {\n    let opts = options || [];\n    //Formats and Instructions\n    let formats = [];\n    let instructions = [];\n    let pseudoInstructions = [];\n    //R-Type\n    formats.push(\n        new Format(\n            [\n                new BitRange(\"opcode\", 26, 6),\n                new BitRange(\"rs\", 21, 5).parameterized(1, Parameter.register),\n                new BitRange(\"rt\", 16, 5).parameterized(2, Parameter.register),\n                new BitRange(\"rd\", 11, 5).parameterized(0, Parameter.register),\n                new BitRange(\"shamt\", 6, 5, 0),\n                new BitRange(\"funct\", 0, 6),\n            ],\n            /^\\s*([a-zA-Z]+)\\s*(\\$[A-Za-z0-9]+)\\s*,\\s*(\\$[A-Za-z0-9]+)\\s*,\\s*(\\$[A-Za-z0-9]+)\\s*$/,\n            \"@mnem @arg0, @arg1, @arg2\"\n        )\n    );\n    let rType = formats[formats.length - 1];\n    instructions.push(\n        new Instruction(\n            \"ADD\",\n            rType,\n            [\"opcode\", \"funct\"],\n            [0x0, 0x20],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    JSBI.toNumber(\n                        JSBI.bitwiseAnd(\n                            JSBI.add(\n                                JSBI.BigInt(\n                                    core.registerFile.read(core.arguments[1])\n                                ),\n                                JSBI.BigInt(\n                                    core.registerFile.read(core.arguments[2])\n                                )\n                            ),\n                            JSBI.BigInt(\"0xFFFFFFFF\")\n                        )\n                    )\n                );\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"ADDU\",\n            rType,\n            [\"opcode\", \"funct\"],\n            [0x0, 0x21],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    JSBI.toNumber(\n                        JSBI.bitwiseAnd(\n                            JSBI.add(\n                                JSBI.BigInt(\n                                    core.registerFile.read(core.arguments[1])\n                                ),\n                                JSBI.BigInt(\n                                    core.registerFile.read(core.arguments[2])\n                                )\n                            ),\n                            JSBI.BigInt(\"0xFFFFFFFF\")\n                        )\n                    )\n                );\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"SUB\",\n            rType,\n            [\"opcode\", \"funct\"],\n            [0x0, 0x22],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    JSBI.toNumber(\n                        JSBI.bitwiseAnd(\n                            JSBI.subtract(\n                                JSBI.BigInt(\n                                    core.registerFile.read(core.arguments[1])\n                                ),\n                                JSBI.BigInt(\n                                    core.registerFile.read(core.arguments[2])\n                                )\n                            ),\n                            JSBI.BigInt(\"0xFFFFFFFF\")\n                        )\n                    )\n                );\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"SUBU\",\n            rType,\n            [\"opcode\", \"funct\"],\n            [0x0, 0x23],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    JSBI.toNumber(\n                        JSBI.bitwiseAnd(\n                            JSBI.subtract(\n                                JSBI.BigInt(\n                                    core.registerFile.read(core.arguments[1])\n                                ),\n                                JSBI.BigInt(\n                                    core.registerFile.read(core.arguments[2])\n                                )\n                            ),\n                            JSBI.BigInt(\"0xFFFFFFFF\")\n                        )\n                    )\n                );\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"AND\",\n            rType,\n            [\"opcode\", \"funct\"],\n            [0x0, 0x24],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    core.registerFile.read(core.arguments[1]) &\n                    core.registerFile.read(core.arguments[2])\n                );\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"OR\",\n            rType,\n            [\"opcode\", \"funct\"],\n            [0x0, 0x25],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    core.registerFile.read(core.arguments[1]) |\n                    core.registerFile.read(core.arguments[2])\n                );\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"NOR\",\n            rType,\n            [\"opcode\", \"funct\"],\n            [0x0, 0x27],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    ~(\n                        core.registerFile.read(core.arguments[1]) |\n                        core.registerFile.read(core.arguments[2])\n                    )\n                );\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"XOR\",\n            rType,\n            [\"opcode\", \"funct\"],\n            [0x0, 0x26],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    core.registerFile.read(core.arguments[1]) ^\n                    core.registerFile.read(core.arguments[2])\n                );\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"SLT\",\n            rType,\n            [\"opcode\", \"funct\"],\n            [0x0, 0x2a],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    core.registerFile.read(core.arguments[1]) <\n                        core.registerFile.read(core.arguments[2])\n                        ? 1\n                        : 0\n                );\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"SLLV\",\n            rType,\n            [\"opcode\", \"funct\"],\n            [0x0, 0x04],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    core.registerFile.read(core.arguments[1]) <<\n                    core.registerFile.read(core.arguments[2])\n                );\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"SRLV\",\n            rType,\n            [\"opcode\", \"funct\"],\n            [0x0, 0x06],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    core.registerFile.read(core.arguments[1]) >>>\n                    core.registerFile.read(core.arguments[2])\n                );\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"SRAV\",\n            rType,\n            [\"opcode\", \"funct\"],\n            [0x0, 0x07],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    core.registerFile.read(core.arguments[1]) >>\n                    core.registerFile.read(core.arguments[2])\n                );\n                return null;\n            }\n        )\n    );\n    //R-Jump Subtype\n    formats.push(\n        new Format(\n            [\n                new BitRange(\"opcode\", 26, 6),\n                new BitRange(\"rs\", 21, 5).parameterized(0, Parameter.register),\n                new BitRange(\"rt\", 16, 5, 0),\n                new BitRange(\"rd\", 11, 5, 0),\n                new BitRange(\"shamt\", 6, 5, 0),\n                new BitRange(\"funct\", 0, 6),\n            ],\n            /^\\s*([a-zA-Z]+)\\s*(\\$[A-Za-z0-9]+)\\s*$/,\n            \"@mnem @arg0\"\n        )\n    );\n    let rjSubtype = formats[formats.length - 1];\n    instructions.push(\n        new Instruction(\n            \"JR\",\n            rjSubtype,\n            [\"opcode\", \"funct\"],\n            [0x0, 0x08],\n            function (core) {\n                core.pc = core.registerFile.read(core.arguments[0]);\n                return null;\n            }\n        )\n    );\n    //R-Shift Subtype\n    formats.push(\n        new Format(\n            [\n                new BitRange(\"opcode\", 26, 6),\n                new BitRange(\"rs\", 21, 5, 0),\n                new BitRange(\"rt\", 16, 5).parameterized(1, Parameter.register),\n                new BitRange(\"rd\", 11, 5).parameterized(0, Parameter.register),\n                new BitRange(\"shamt\", 6, 5).parameterized(\n                    2,\n                    Parameter.immediate\n                ),\n                new BitRange(\"funct\", 0, 6),\n            ],\n            /^\\s*([a-zA-Z]+)\\s*(\\$[A-Za-z0-9]+)\\s*,\\s*(\\$[A-Za-z0-9]+)\\s*,\\s*([0-9]+)\\s*$/,\n            \"@mnem @arg0, @arg1, @arg2\"\n        )\n    );\n    let rsSubtype = formats[formats.length - 1];\n    instructions.push(\n        new Instruction(\n            \"SLL\",\n            rsSubtype,\n            [\"opcode\", \"funct\"],\n            [0x0, 0x00],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    core.registerFile.read(core.arguments[1]) <<\n                    core.arguments[2]\n                );\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"SRL\",\n            rsSubtype,\n            [\"opcode\", \"funct\"],\n            [0x0, 0x02],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    core.registerFile.read(core.arguments[1]) >>>\n                    core.arguments[2]\n                );\n                return null;\n            }\n        )\n    );\n    instructions.push(\n        new Instruction(\n            \"SRA\",\n            rsSubtype,\n            [\"opcode\", \"funct\"],\n            [0x0, 0x02],\n            function (core) {\n                core.registerFile.write(\n                    core.arguments[0],\n                    core.registerFile.read(core.arguments[1]) >>\n                    core.arguments[2]\n                );\n                return null;\n            }\n        )\n    );\n    //R-Constant Subtype\n    formats.push(\n        new Format(\n            [new BitRange(\"funct\", 0, 32)],\n            /^\\s*([a-zA-Z]+)\\s*$/,\n            \"@mnem\"\n        )\n    );\n    let rcSubtype = formats[formats.length - 1];\n    instructions.push(\n        new Instruction(\"SYSCALL\", rcSubtype, [\"funct\"], [0xc], function (\n            core\n        ) {\n            return core.virtualOS.ecall(core);\n        })\n    );\n    //I-Type\n    formats.push(\n        new Format(\n            [\n                new BitRange(\"opcode\", 26, 6),\n                new BitRange(\"rs\", 21, 5).parameterized(1, Parameter.register),\n                new BitRange(\"rt\", 16, 5).parameterized(0, Parameter.register),\n                new BitRange(\"imm\", 0, 16, null, true).parameterized(\n                    2,\n                    Parameter.immediate\n                ),\n            ],\n            /^\\s*([a-zA-Z]+)\\s*(\\$[A-Za-z0-9]+)\\s*,\\s*(\\$[A-Za-z0-9]+)\\s*,\\s*(-?[a-zA-Z0-9_]+)\\s*$/,\n            \"@mnem @arg0, @arg1, @arg2\"\n        )\n    );\n    let iType = formats[formats.length - 1];\n    //I-type instructions\n    instructions.push(\n        new Instruction(\"ADDI\", iType, [\"opcode\"], [0x8], function (core) {\n            core.registerFile.write(\n                core.arguments[0],\n                core.registerFile.read(core.arguments[1]) + core.arguments[2]\n            );\n            return null;\n        })\n    );\n    instructions.push(\n        new Instruction(\"ADDIU\", iType, [\"opcode\"], [0x9], function (core) {\n            core.registerFile.write(\n                core.arguments[0],\n                core.registerFile.read(core.arguments[1]) + core.arguments[2]\n            );\n            return null;\n        })\n    );\n    instructions.push(\n        new Instruction(\"SLTI\", iType, [\"opcode\"], [0x0a], function (core) {\n            core.registerFile.write(\n                core.arguments[0],\n                core.registerFile.read(core.arguments[1]) < core.arguments[2]\n                    ? 1\n                    : 0\n            );\n            return null;\n        })\n    );\n    instructions.push(\n        new Instruction(\"SLTIU\", iType, [\"opcode\"], [0x0b], function (core) {\n            core.registerFile.write(\n                core.arguments[0],\n                core.registerFile.read(core.arguments[1]) >>> 0 <\n                    core.arguments[2] >>> 0\n                    ? 1\n                    : 0\n            );\n            return null;\n        })\n    );\n    instructions.push(\n        new Instruction(\"ANDI\", iType, [\"opcode\"], [0x0c], function (core) {\n            core.registerFile.write(\n                core.arguments[0],\n                (core.registerFile.read(core.arguments[1]) >>> 0) &\n                core.arguments[2]\n            );\n            return null;\n        })\n    );\n    instructions.push(\n        new Instruction(\"ORI\", iType, [\"opcode\"], [0x0d], function (core) {\n            core.registerFile.write(\n                core.arguments[0],\n                (core.registerFile.read(core.arguments[1]) >>> 0) |\n                core.arguments[2]\n            );\n            return null;\n        })\n    );\n    instructions.push(\n        new Instruction(\"XORI\", iType, [\"opcode\"], [0x0e], function (core) {\n            core.registerFile.write(\n                core.arguments[0],\n                (core.registerFile.read(core.arguments[1]) >>> 0) ^\n                core.arguments[2]\n            );\n            return null;\n        })\n    );\n    //I-Branch Subtype\n    formats.push(\n        new Format(\n            [\n                new BitRange(\"opcode\", 26, 6),\n                new BitRange(\"rs\", 21, 5).parameterized(0, Parameter.register),\n                new BitRange(\"rt\", 16, 5).parameterized(1, Parameter.register),\n                new BitRange(\"imm\", 0, 16, null, true)\n                    .parameterized(2, Parameter.offset)\n                    .limited(18, 2, 17),\n            ],\n            /^\\s*([a-zA-Z]+)\\s*(\\$[A-Za-z0-9]+)\\s*,\\s*(\\$[A-Za-z0-9]+)\\s*,\\s*(-?[a-zA-Z0-9_]+)\\s*$/,\n            \"@mnem @arg0, @arg1, @arg2\"\n        )\n    );\n    let ibSubtype = formats[formats.length - 1];\n    instructions.push(\n        new Instruction(\"BEQ\", ibSubtype, [\"opcode\"], [0x04], function (core) {\n            if (\n                core.registerFile.read(core.arguments[0]) ===\n                core.registerFile.read(core.arguments[1])\n            ) {\n                core.pc += core.arguments[2];\n            }\n            return null;\n        })\n    );\n    instructions.push(\n        new Instruction(\"BNE\", ibSubtype, [\"opcode\"], [0x05], function (core) {\n            if (\n                core.registerFile.read(core.arguments[0]) !==\n                core.registerFile.read(core.arguments[1])\n            ) {\n                core.pc += core.arguments[2];\n            }\n            return null;\n        })\n    );\n    //I Load Upper Immediate Subtype\n    formats.push(\n        new Format(\n            [\n                new BitRange(\"opcode\", 26, 6),\n                new BitRange(\"rs\", 21, 5, 0),\n                new BitRange(\"rt\", 16, 5).parameterized(0, Parameter.register),\n                new BitRange(\"imm\", 0, 16, null, true).parameterized(\n                    1,\n                    Parameter.register\n                ),\n            ],\n            /^\\s*([a-zA-Z]+)\\s*(\\$[A-Za-z0-9]+)\\s*,\\s*(-?[a-zA-Z0-9_]+)\\s*$/,\n            \"@mnem @arg0, @arg1\"\n        )\n    );\n    let iluiSubtype = formats[formats.length - 1];\n    instructions.push(\n        new Instruction(\"LUI\", iluiSubtype, [\"opcode\"], [0x0f], function (\n            core\n        ) {\n            core.registerFile.write(core.arguments[0], core.arguments[1] << 16);\n            return null;\n        })\n    );\n    //I Load/Store Subtype\n    formats.push(\n        new Format(\n            [\n                new BitRange(\"opcode\", 26, 6),\n                new BitRange(\"rs\", 21, 5).parameterized(2, Parameter.register),\n                new BitRange(\"rt\", 16, 5).parameterized(0, Parameter.register),\n                new BitRange(\"imm\", 0, 16, null, true).parameterized(\n                    1,\n                    Parameter.immediate\n                ),\n            ],\n            /^\\s*([a-zA-Z]+)\\s*(\\$[A-Za-z0-9]+)\\s*,\\s*(-?0?[boxd]?[0-9A-F]+)\\(\\s*(\\$[A-Za-z0-9]+)\\s*\\)\\s*$/,\n            \"@mnem @arg0, @arg1(@arg2)\"\n        )\n    );\n    let ilsSubtype = formats[formats.length - 1];\n    //TO-DO: Verify function(core) functionality\n    instructions.push(\n        new Instruction(\"LB\", ilsSubtype, [\"opcode\"], [0x20], function (core) {\n            let bytes = core.memcpy(\n                core.registerFile.read(core.arguments[2]) + core.arguments[1],\n                1\n            );\n            if (bytes === null) {\n                return \"Illegal memory access.\";\n            }\n            core.registerFile.write(\n                core.arguments[0],\n                Utils.signExt(bytes[0], 8)\n            );\n            return null;\n        })\n    );\n    instructions.push(\n        new Instruction(\"LH\", ilsSubtype, [\"opcode\"], [0x21], function (core) {\n            let bytes = core.memcpy(\n                core.registerFile.read(core.arguments[2]) + core.arguments[1],\n                2\n            );\n            if (bytes === null) {\n                return \"Illegal memory access.\";\n            }\n            core.registerFile.write(\n                core.arguments[0],\n                Utils.signExt(Utils.catBytes(bytes), 16)\n            );\n            return null;\n        })\n    );\n    instructions.push(\n        new Instruction(\"LW\", ilsSubtype, [\"opcode\"], [0x23], function (core) {\n            let bytes = core.memcpy(\n                core.registerFile.read(core.arguments[2]) + core.arguments[1],\n                4\n            );\n            if (bytes === null) {\n                return \"Illegal memory access.\";\n            }\n            core.registerFile.write(core.arguments[0], Utils.catBytes(bytes));\n            return null;\n        })\n    );\n    instructions.push(\n        new Instruction(\"LBU\", ilsSubtype, [\"opcode\"], [0x24], function (core) {\n            let bytes = core.memcpy(\n                core.registerFile.read(core.arguments[2]) + core.arguments[1],\n                1\n            );\n            if (bytes === null) {\n                return \"Illegal memory access.\";\n            }\n            core.registerFile.write(core.arguments[0], bytes[0]);\n            return null;\n        })\n    );\n    instructions.push(\n        new Instruction(\"LHU\", ilsSubtype, [\"opcode\"], [0x25], function (core) {\n            let bytes = core.memcpy(\n                core.registerFile.read(core.arguments[2]) + core.arguments[1],\n                2\n            );\n            if (bytes === null) {\n                return \"Illegal memory access.\";\n            }\n            core.registerFile.write(core.arguments[0], Utils.catBytes(bytes));\n            return null;\n        })\n    );\n    instructions.push(\n        new Instruction(\"SB\", ilsSubtype, [\"opcode\"], [0x28], function (core) {\n            let bytes = [];\n            bytes.push(core.registerFile.read(core.arguments[0]) & 255);\n            let writeAddress =\n                core.registerFile.read(core.arguments[2]) + core.arguments[1];\n            if (core.memset(writeAddress, bytes)) {\n                // console.log(\"A0 \", core.registerFile.read(core.instructionSet.abiNames.indexOf(\"$a0\")));\n                // console.log(\"T1 \", core.registerFile.read(core.instructionSet.abiNames.indexOf(\"$t1\")));\n                // console.log(\"Wrote to \", writeAddress.toString(16));\n                return null;\n            }\n            return \"Illegal memory access.\";\n        })\n    );\n    instructions.push(\n        new Instruction(\"SH\", ilsSubtype, [\"opcode\"], [0x29], function (core) {\n            let bytes = [];\n            let value = core.registerFile.read(core.arguments[0]);\n            bytes.push(value & 255);\n            value = value >>> 8;\n            bytes.push(value & 255);\n            if (\n                core.memset(\n                    core.registerFile.read(core.arguments[2]) +\n                    core.arguments[1],\n                    bytes\n                )\n            ) {\n                return null;\n            }\n            return \"Illegal memory access.\";\n        })\n    );\n    instructions.push(\n        new Instruction(\"SW\", ilsSubtype, [\"opcode\"], [0x2b], function (core) {\n            let bytes = [];\n            let value = core.registerFile.read(core.arguments[0]);\n            bytes.push(value & 255);\n            value = value >>> 8;\n            bytes.push(value & 255);\n            value = value >>> 8;\n            bytes.push(value & 255);\n            value = value >>> 8;\n            bytes.push(value & 255);\n            if (\n                core.memset(\n                    core.registerFile.read(core.arguments[2]) +\n                    core.arguments[1],\n                    bytes\n                )\n            ) {\n                return null;\n            }\n            return \"Illegal memory access.\";\n        })\n    );\n    //J-Type\n    formats.push(\n        new Format(\n            [\n                new BitRange(\"opcode\", 26, 6),\n                new BitRange(\"imm\", 0, 26).parameterized(0, Parameter.special),\n            ],\n            /^\\s*([A-Za-z]+)\\s*([A-Za-z0-9_]+)\\s*$/,\n            \"@mnem @arg0\",\n            function (text, type, bits, address, assembler) {\n                let result = {\n                    errorMessage: null,\n                    context: null,\n                    value: null,\n                };\n                //Label\n                let value = null;\n                let reference = assembler.linesByLabel[text];\n                if (reference !== undefined) {\n                    result.context = reference[0];\n                    if (reference[1] === null) {\n                        return result;\n                    }\n                    value = reference[1];\n                }\n                if (value === null && assembler.keywordRegexes[Keyword.char]) {\n                    let extraction =\n                        assembler.keywordRegexes[Keyword.char].exec(text);\n                    if (extraction !== null && extraction[1] !== undefined) {\n                        value = extraction[1].charCodeAt(0);\n                        if (value > 255) {\n                            result.errorMessage =\n                                \"Non-ascii character \" +\n                                extraction[1] +\n                                \" unsupported.\";\n                            return result;\n                        }\n                    }\n                }\n                if (\n                    value === null &&\n                    assembler.keywordRegexes[Keyword.numeric] !== undefined\n                ) {\n                    let array =\n                        assembler.keywordRegexes[Keyword.numeric].exec(text);\n                    if (array !== null) {\n                        let radix = Assembler.radixes[array[2]] || 10;\n                        let interpretable = array[1];\n                        value = parseInt(interpretable, radix);\n                    }\n                }\n                if (value === null || isNaN(value)) {\n                    result.errorMessage = `args.valueUnrecognized(${text})`;\n                    return result;\n                }\n                if (value >>> 28 === address >>> 28) {\n                    if ((value & 3) === 0) {\n                        result.value = (value & 0x0ffffffc) >>> 2;\n                    } else {\n                        result.errorMessage = `mips.wordUnlignedJump(${text})`;\n                    }\n                } else {\n                    result.errorMessage = `args.outOfRange(${text})`;\n                }\n                return result;\n            },\n            function (value, address) {\n                return (value << 2) | (address & 0xf0000000);\n            }\n        )\n    );\n    let jType = formats[formats.length - 1];\n    instructions.push(\n        new Instruction(\"J\", jType, [\"opcode\"], [0x2], function (core) {\n            core.pc = core.arguments[0];\n            return null;\n        })\n    );\n    instructions.push(\n        new Instruction(\"JAL\", jType, [\"opcode\"], [0x3], function (core) {\n            core.registerFile.write(31, core.pc);\n            core.pc = core.arguments[0];\n            return null;\n        })\n    );\n\n    //\"Pseudoinstructions\"\n    //MV\n    formats.push(\n        new Format(\n            [\n                new BitRange(\"opcode\", 26, 6),\n                new BitRange(\"rs\", 21, 5).parameterized(1, Parameter.register),\n                new BitRange(\"rt\", 16, 5, 0),\n                new BitRange(\"rd\", 11, 5).parameterized(0, Parameter.register),\n                new BitRange(\"shamt\", 6, 5, 0),\n                new BitRange(\"funct\", 0, 6),\n            ],\n            /^\\s*([a-zA-Z]+)\\s*(\\$[A-Za-z0-9]+)\\s*,\\s*(\\$[A-Za-z0-9]+)\\s*$/,\n            \"@mnem @arg0, @arg1\"\n        )\n    );\n    let mvPseudo = formats[formats.length - 1];\n    instructions.push(\n        new Instruction(\n            \"MV\",\n            mvPseudo,\n            [\"opcode\", \"funct\"],\n            [0x0, 0x20],\n            function (core) {\n                //Captured by ADD\n                return null;\n            }\n        )\n    );\n    //LI/LA\n    formats.push(\n        new Format(\n            [\n                new BitRange(\"opcode\", 26, 6),\n                new BitRange(\"rs\", 21, 5, 0),\n                new BitRange(\"rt\", 16, 5).parameterized(0, Parameter.register),\n                new BitRange(\"imm\", 0, 16, null, true).parameterized(\n                    1,\n                    Parameter.immediate\n                ),\n            ],\n            /^\\s*([a-zA-Z]+)\\s*(\\$[A-Za-z0-9]+)\\s*,\\s*(-?[a-zA-Z0-9_]+)\\s*$/,\n            \"@mnem @arg0, @arg1\"\n        )\n    );\n    let liPseudo = formats[formats.length - 1];\n    instructions.push(\n        new Instruction(\"LI\", liPseudo, [\"opcode\"], [0x8], function (core) {\n            //Captured by ADDI\n            return null;\n        })\n    );\n    instructions.push(\n        new Instruction(\"LA\", liPseudo, [\"opcode\"], [0x8], function (core) {\n            //Captured by ADDI\n            return null;\n        })\n    );\n    let keywords = [];\n    keywords[Keyword.directive] = [\"\\\\.\"];\n    keywords[Keyword.comment] = [\"#\"];\n    keywords[Keyword.label] = [\"\\\\:\"];\n    keywords[Keyword.stringMarker] = ['\\\\\"'];\n    keywords[Keyword.charMarker] = [\"\\\\'\"];\n    keywords[Keyword.register] = [\"x\"];\n    let directives = [];\n    directives[\"text\"] = Directive.text;\n    directives[\"data\"] = Directive.data;\n    directives[\"asciiz\"] = Directive.cString;\n    directives[\"byte\"] = Directive._8bit;\n    directives[\"half\"] = Directive._16bit;\n    directives[\"word\"] = Directive._32bit;\n    let abiNames = [\n        \"$zero\",\n        \"$at\",\n        \"$v0\",\n        \"$v1\",\n        \"$a0\",\n        \"$a1\",\n        \"$a2\",\n        \"$a3\",\n        \"$t0\",\n        \"$t1\",\n        \"$t2\",\n        \"$t3\",\n        \"$t4\",\n        \"$t5\",\n        \"$t6\",\n        \"$t7\",\n        \"$s0\",\n        \"$s1\",\n        \"$s2\",\n        \"$s3\",\n        \"$s4\",\n        \"$s5\",\n        \"$s6\",\n        \"$s7\",\n        \"$t8\",\n        \"$t9\",\n        \"$k0\",\n        \"$k1\",\n        \"$gp\",\n        \"$sp\",\n        \"$fp\",\n        \"$ra\",\n    ];\n    return new InstructionSet(\n        32,\n        formats,\n        instructions,\n        pseudoInstructions,\n        abiNames,\n        keywords,\n        directives,\n        true,\n        `    la $a0, str\n    li $v0, 4 #4 is the string print service number...\n    syscall\n    li $v0, 10 #...and 10 is the program termination service number!\n    syscall\n.data\nstr:    .asciiz \"Hello, World!\"`\n    );\n}\nclass MIPSRegisterFile {\n    constructor(memorySize, abiNames) {\n        this.physicalFile = [];\n        this.modifiedRegisters = [];\n        for (let i = 0; i < 32; i++) {\n            this.physicalFile.push(0);\n            this.modifiedRegisters.push(false);\n        }\n        this.memorySize = memorySize;\n        this.physicalFile[29] = memorySize; //stack pointer\n        this.abiNames = abiNames;\n    }\n    print() {\n        console.log(\"Registers\\n------\");\n        for (let i = 0; i < 32; i++) {\n            console.log(\n                \"$\" + i.toString(),\n                this.abiNames[i],\n                this.physicalFile[i].toString(),\n                (this.physicalFile[i] >>> 0).toString(16).toUpperCase()\n            );\n        }\n        console.log(\"------\");\n    }\n    read(registerNumber) {\n        if (registerNumber === 0) {\n            return 0;\n        } else {\n            return this.physicalFile[registerNumber];\n        }\n    }\n    write(registerNumber, value) {\n        this.physicalFile[registerNumber] = value;\n        this.modifiedRegisters[registerNumber] = true;\n    }\n    getRegisterCount() {\n        return 32;\n    }\n    getModifiedRegisters() {\n        let modReg = this.modifiedRegisters.slice();\n        for (let i = 0; i < this.getRegisterCount(); i++) {\n            this.modifiedRegisters[i] = false;\n        }\n        return modReg;\n    }\n    reset() {\n        for (let i = 0; i < 32; i++) {\n            this.physicalFile[i] = 0;\n            this.modifiedRegisters[i] = false;\n        }\n        this.physicalFile[29] = this.memorySize;\n    }\n}\nclass MIPSCore extends Core {\n    reset() {\n        this.pc = 0;\n        this.memory = [];\n        for (let i = 0; i < this.memorySize; i++) {\n            this.memory[i] = 0;\n        }\n        this.registerFile.reset();\n    }\n    fetch() {\n        let arr = this.memcpy(this.pc >>> 0, 4);\n        if (arr === null) {\n            return `Attempting to fetch from illegal memory address @${this.pc}`;\n        }\n        this.pc += 4;\n        this.fetched = Utils.catBytes(arr);\n        return null;\n    }\n    constructor(memorySize, virtualOS, instructionSet) {\n        super();\n        this.virtualOSServiceRegister = 2;\n        this.virtualOSArgumentVectorStart = 4;\n        this.virtualOSArgumentVectorEnd = 7;\n        this.instructionSet = instructionSet;\n        this.pc = 0 >>> 0;\n        this.memorySize = memorySize;\n        this.virtualOS = virtualOS;\n        this.registerFile = new MIPSRegisterFile(\n            memorySize,\n            instructionSet.abiNames\n        );\n        this.memory = new Array(memorySize);\n        for (let i = 0; i < memorySize; i++) {\n            this.memory[i] = 0;\n        }\n    }\n}\nCore.factory.ISAs[\"MIPS\"] = {\n    generator: MIPS,\n    core: MIPSCore,\n    options: [],\n};\n","import React, { Component } from \"react\";\nimport TextEditor from \"./sections/texteditor.js\";\nimport Navigation from \"./sections/navigation.js\";\nimport PanelContainer from \"./sections/panelcontainer.js\";\nimport PanelMemory from \"./sections/panelmemory.js\";\nimport PanelConsole from \"./sections/panelconsole.js\";\nimport PanelLog from \"./sections/panellog.js\";\nimport Help from \"./sections/help\";\nimport About from \"./sections/about\";\nimport Settings from \"./sections/settings\";\nimport PanelSettings from \"./sections/panelsettings\";\nimport PanelConversion from \"./sections/panelconversion\";\nimport PanelRegisters from \"./sections/panelregisters\";\n//import CoreContext from './coreContext';\nimport PanelMachineCode from \"./sections/panelmachinecode\";\n\nimport \"./isas/RISCV\";\nimport \"./isas/MIPS\";\n\nimport OakJS from \"./oak/index.js\";\n\nimport { connect } from \"react-redux\";\nimport { Translate, withLocalize } from \"react-localize-redux\";\nimport { renderToStaticMarkup } from \"react-dom/server\";\n\nimport enTranslations from \"./translations/en.json\";\n\nimport {\n    selectTab,\n    addTab,\n    updateTab,\n    setProjectSettings,\n    setSettingsVisible,\n    setHelpVisible,\n    setAboutVisible,\n} from \"./actions\";\n\nconst SimulatingStatus = {\n    Stopped: 0,\n    Step: 1,\n    Play: 2,\n};\n\nconst REGISTER_UNASSIGNED = 0;\nconst REGISTER_ASSIGNED = 1;\nconst REGISTER_NEWASSIGNED = 2;\n\nconst CONSOLE_INPUT_NONE = 0;\nconst CONSOLE_INPUT_NUM = 1;\nconst CONSOLE_INPUT_STR = 2;\n\nconst decode_error_msg = (\n    <span>\n        <b>Error: </b>Failed to decode instruction. In practice, the most likely\n        cause is forgetting to terminate the program using the appropriate\n        system call (see help section).\n    </span>\n);\n\nconst MessageType = {\n    Log: 0,\n    Input: 1,\n    Output: 2,\n    Success: 3,\n    Warning: 4,\n    Error: 5,\n};\n\nclass App extends Component {\n    virtual_os;\n\n    constructor(props) {\n        super(props);\n\n        this.props.initialize({\n            languages: [{ name: \"English\", code: \"en\" }],\n            options: { renderToStaticMarkup },\n        });\n\n        // $.ajax({\n        //     type: \"POST\",\n        //     url: 'https://pastebin.com/api/api_post.php',\n        //     data: {\n        //         api_dev_key:    'fe832913bc53f77f05505bc93e3b04b1',\n        //         api_option:     'paste',\n        //         api_paste_code: \"Dude this is\\nHella cool\"\n        //     },\n        //     async:true,\n        //     dataType : 'text/plain',   //you may use jsonp for cross origin request\n        //     crossDomain:true,\n        //     headers: {\n        //         \"Access-Control-Allow-Origin\": \"*\",\n        //         \"Access-Control-Allow-Headers\": \"origin, content-type, accept\"\n        //     },\n        //     success: function(data, status, xhr) {\n        //         console.log(\"Pastebin success: \" + data);\n        //     }\n        // });\n\n        // $.ajax({\n        //     type: \"GET\",\n        //     url: 'https://pastebin.com/Tricwqr6',\n        //     data: {\n        //         api_dev_key:    'fe832913bc53f77f05505bc93e3b04b1',\n        //         api_option:     'paste',\n        //         api_paste_code: \"Dude this is\\nHella cool\"\n        //     },\n        //     async:true,\n        //     dataType : 'text/plain',   //you may use jsonp for cross origin request\n        //     crossDomain:true,\n        //     headers: {\n        //         \"Access-Control-Allow-Origin\": \"*\",\n        //         \"Access-Control-Allow-Headers\": \"origin, content-type, accept\"\n        //     },\n        //     success: function(data, status, xhr) {\n        //         console.log(\"Pastebin get success: \" + data);\n        //     }\n        // });\n\n        this.state = {\n            panel_x: 256,\n            panel_y: 256,\n        };\n\n        this.component_input = React.createRef();\n\n        window.addEventListener(\"keyup\", this.handleKeyPress);\n\n        this.props.addTranslationForLanguage(enTranslations, \"en\");\n\n        this.virtual_os = new OakJS.VirtualOS(); // The virtual OS handles ecalls. It takes a bunch of callbacks: output Int, output String, etcetera...\n        this.virtual_os.inputInt = () => {\n            let tab = this.props.tabs[this.props.selectedtab];\n            if (tab) {\n                tab.console_input_type = CONSOLE_INPUT_NUM;\n            }\n        };\n\n        this.virtual_os.inputString = () => {\n            let tab = this.props.tabs[this.props.selectedtab];\n            if (tab) {\n                tab.console_input_type = CONSOLE_INPUT_STR;\n            }\n        };\n\n        this.virtual_os.outputInt = (number) => {\n            this.addConsoleMessage(MessageType.Output, \">> \" + number);\n        };\n\n        this.virtual_os.outputString = (string) => {\n            this.addConsoleMessage(MessageType.Output, \">> \" + string);\n        };\n\n        this.virtual_os.handleHalt = () => {\n            let current_tab = this.props.selectedtab;\n            let tab = this.props.tabs[current_tab];\n\n            if (!tab) return;\n\n            tab.runningStatus = SimulatingStatus.Stopped;\n\n            this.addConsoleMessage(\n                MessageType.Success,\n                \" == SIMULATION COMPLETED == \"\n            );\n\n            this.props.updateTab(current_tab, tab);\n        };\n\n        this.addTabDefault();\n    }\n\n    handleKeyPress = (event) => {\n        let current_tab = this.props.selectedtab;\n        let tab = this.props.tabs[current_tab];\n\n        if (tab && tab.console_input_type !== CONSOLE_INPUT_NONE) {\n            event.preventDefault();\n\n            let input = tab.console_input;\n            let cursor = tab.cursor_pos;\n\n            if (event.key === \"Enter\") {\n                this.continueAfterConsole(input);\n                tab.console_input = \"\";\n            } else if (event.which === 8) {\n                if (cursor > 0) {\n                    let val = input.slice(0, cursor - 1) + input.slice(cursor);\n\n                    tab.cursor_pos = cursor - 1;\n                    tab.console_input = val;\n                }\n            } else if (event.keyCode === 46) {\n                if (cursor < input.length) {\n                    let val = input.slice(0, cursor) + input.slice(cursor + 1);\n\n                    tab.cursor_pos = cursor - 1;\n                    tab.console_input = val;\n                }\n            } else if (event.keyCode === 37) {\n                cursor = cursor <= 0 ? 0 : cursor - 1;\n                tab.cursor_pos = cursor;\n            } else if (event.keyCode === 39) {\n                let l = tab.console_input.length;\n                cursor = cursor >= l ? l : cursor + 1;\n                tab.cursor_pos = l;\n            } else {\n                let out = event.key;\n\n                const keycode = event.keyCode;\n                const isNum = tab.console_input_type === CONSOLE_INPUT_NUM;\n\n                var valid =\n                    (keycode > 47 && keycode < 58) || // number keys\n                    (!isNum &&\n                        (keycode === 32 ||\n                            keycode === 13 || // spacebar & return key(s) (if you want to allow carriage returns)\n                            (keycode > 64 && keycode < 91) || // letter keys\n                            (keycode > 95 && keycode < 112) || // numpad keys\n                            (keycode > 185 && keycode < 193) || // ;=,-./` (in order)\n                            (keycode > 218 && keycode < 223)));\n\n                if (valid) {\n                    out = input.slice(0, cursor) + out + input.slice(cursor);\n                    tab.console_input = out;\n                    tab.cursor_pos = cursor + 1;\n                }\n            }\n\n            this.props.updateTab(current_tab, tab);\n\n            return false;\n        }\n    };\n\n    addConsoleMessage = (msg_type, data) => {\n        let current_tab = this.props.selectedtab;\n        let tabs = this.props.tabs;\n        let tab = tabs[current_tab];\n\n        let className;\n        if (msg_type === MessageType.Error) className = \"console_error\";\n        else if (msg_type === MessageType.Warning)\n            className = \"console_warning\";\n        else if (msg_type === MessageType.Success)\n            className = \"console_success\";\n        else if (msg_type === MessageType.Output) className = \"console_output\";\n        else if (msg_type === MessageType.Input) className = \"console_input\";\n        else className = \"console_log\";\n\n        tab.console.push(<div className={className}>{data}</div>);\n        this.props.updateTab(current_tab, tab);\n    };\n\n    continueAfterConsole = (input) => {\n        let selected = this.props.selectedtab;\n        let tab = this.props.tabs[selected];\n\n        let core = tab.core;\n\n        if (tab.console_input_type === CONSOLE_INPUT_NUM) {\n            input = parseInt(input, 10);\n            this.virtual_os.continueInputInt(core, input);\n            this.addConsoleMessage(MessageType.Log, \"<< \" + input);\n        } else if (tab.console_input_type === CONSOLE_INPUT_STR) {\n            this.virtual_os.continueInputString(core, input);\n            this.addConsoleMessage(MessageType.Log, \"<< \" + input);\n        }\n\n        tab.console_input_type = CONSOLE_INPUT_NONE;\n\n        this.checkUpdatedTabs();\n        this.props.updateTab(selected, tab);\n    };\n\n    checkUpdatedTabs = () => {\n        let tab = this.props.tabs[this.props.selectedtab];\n\n        var mod_reg = tab.core.registerFile.getModifiedRegisters();\n\n        for (let i = 0; i < tab.register_changed.length; ++i) {\n            if (mod_reg[i]) tab.register_changed[i] = REGISTER_NEWASSIGNED;\n            else if (tab.register_changed[i] === REGISTER_NEWASSIGNED)\n                tab.register_changed[i] = REGISTER_ASSIGNED;\n        }\n    };\n\n    addTabFull = (\n        name,\n        code,\n        machine_code,\n        mem_size,\n        isa,\n        get_example_code\n    ) => {\n        let selected = this.props.tabs.length;\n\n        let core = OakJS.Core.factory.getCore(isa, mem_size, this.virtual_os);\n\n        let new_tab = {\n            name: name,\n            content: get_example_code ? core.instructionSet.exampleCode : code,\n            log: [],\n            console: [],\n            machine_code: machine_code,\n            core: core,\n            register_changed: [],\n            runningStatus: SimulatingStatus.Stopped,\n            instruction_set: isa,\n            console_input: \"\",\n            console_input_type: CONSOLE_INPUT_NONE,\n            cursor_pos: 0,\n        };\n\n        new_tab.register_changed = Array.from(\n            { length: core.registerFile.physicalFile.length },\n            () => REGISTER_UNASSIGNED\n        );\n\n        // TODO: Send to Project Settings\n        this.props.setProjectSettings(name, mem_size, isa);\n\n        this.props.addTab(new_tab);\n        this.props.selectTab(selected);\n    };\n\n    addTab = (name, code, machine_code) => {\n        this.addTabFull(\n            name,\n            code,\n            machine_code,\n            4096,\n            this.getDefaultISA(),\n            false\n        );\n    };\n\n    addTabDefault = () => {\n        this.addTabFull(\"New Tab\", \"\", [], 4096, this.getDefaultISA(), true);\n    };\n\n    addTabDefaultRISCV = () => {\n        this.addTabFull(\"New Tab\", \"\", [], 4096, \"RISCV\", true);\n    };\n\n    addTabDefaultMIPS = () => {\n        this.addTabFull(\"New Tab\", \"\", [], 4096, \"MIPS\", true);\n    };\n\n    getDefaultISA = () => {\n        return OakJS.Core.factory.getCoreList()[0];\n    };\n\n    handleUpload = (event) => {\n        let files = this.component_input.current.files;\n        if (files.length <= 0) return;\n\n        let file = files[0];\n        if (this.is_upload_bin) {\n            let name = file.name;\n            let blob = file.slice(0, file.size);\n            let fr = new FileReader();\n            let me = this;\n            fr.addEventListener(\"load\", function () {\n                var bytes = new Uint8Array(this.result);\n                me.addTab(name, \"\", Array.from(bytes));\n            });\n            fr.readAsArrayBuffer(blob);\n        } else {\n            let name = file.name;\n            let blob = file.slice(0, file.size);\n            let fr = new FileReader();\n            let me = this;\n            fr.addEventListener(\"load\", function () {\n                let res = this.result;\n\n                me.addTab(name, res, []);\n            });\n            fr.readAsText(blob);\n        }\n    };\n\n    handleLoadAsm = () => {\n        this.is_upload_bin = false;\n        this.component_input.current.click();\n    };\n\n    handleLoadBin = () => {\n        this.is_upload_bin = true;\n        this.component_input.current.click();\n    };\n\n    handleDownloadAsm = () => {\n        const current_tab = this.props.selectedtab;\n        let tab = this.props.tabs[current_tab];\n\n        var data = tab.content;\n        if (data.length === 0) return;\n\n        var el = document.createElement(\"a\");\n        var blob = new Blob([data], {\n            type: \"text/plain\",\n        });\n        var blobLink = URL.createObjectURL(blob);\n        var name = tab.name + \".s\";\n        el.setAttribute(\"href\", blobLink);\n        el.setAttribute(\"download\", name);\n        el.style.display = \"none\";\n        document.body.appendChild(el);\n        el.click();\n        document.body.removeChild(el);\n    };\n\n    downloadBin = () => {\n        const current_tab = this.props.selectedtab;\n        let tab = this.props.tabs[current_tab];\n\n        var data = tab.machine_code;\n        var byteArray = new Uint8Array(data);\n        var blob = new Blob([byteArray], {\n            type: \"application/octet-stream\",\n        });\n        var blobLink = URL.createObjectURL(blob);\n        var element = document.createElement(\"a\");\n        var name = tab.name + \".bin\";\n        element.setAttribute(\"href\", blobLink);\n        element.setAttribute(\"download\", name);\n        element.style.display = \"none\";\n        document.body.appendChild(element);\n        element.click();\n        document.body.removeChild(element);\n    };\n\n    downloadBinH = () => {\n        const current_tab = this.props.selectedtab;\n        let tab = this.props.tabs[current_tab];\n\n        let finalFile = tab.machine_code\n            .map((byte) => byte.toString(16).padStart(2, \"0\"))\n            .join(\"\\n\");\n\n        var blob = new Blob([finalFile], {\n            type: \"text/plain\",\n        });\n        var blobLink = URL.createObjectURL(blob);\n        var element = document.createElement(\"a\");\n        var name = tab.name + \".hex\";\n        element.setAttribute(\"href\", blobLink);\n        element.setAttribute(\"download\", name);\n        element.style.display = \"none\";\n        document.body.appendChild(element);\n        element.click();\n        document.body.removeChild(element);\n    };\n\n    downloadRam = () => {\n        const current_tab = this.props.selectedtab;\n        let tab = this.props.tabs[current_tab];\n\n        var data = tab.core.memory;\n        var byteArray = new Uint8Array(data);\n        var blob = new Blob([byteArray], {\n            type: \"application/octet-stream\",\n        });\n        var blobLink = URL.createObjectURL(blob);\n        var element = document.createElement(\"a\");\n        var name = tab.name + \".bin\";\n        element.setAttribute(\"href\", blobLink);\n        element.setAttribute(\"download\", name);\n        element.style.display = \"none\";\n        document.body.appendChild(element);\n        element.click();\n        document.body.removeChild(element);\n    };\n\n    resetUI = () => {\n        let current_tab = this.props.selectedtab;\n        let tabs = this.props.tabs;\n        let tab = tabs[current_tab];\n        tab.log = [];\n        tab.console = [];\n        tab.register_changed = Array.from(\n            { length: tab.register_changed.length },\n            () => REGISTER_UNASSIGNED\n        );\n        tab.runningStatus = SimulatingStatus.Stopped;\n\n        tab.console_input = \"\";\n        tab.console_input_type = CONSOLE_INPUT_NONE;\n        tab.cursor_pos = 0;\n\n        this.props.updateTab(current_tab, tab);\n    };\n\n    reset = () => {\n        let current_tab = this.props.selectedtab;\n        let tabs = this.props.tabs;\n        let tab = tabs[current_tab];\n\n        tab.core.reset();\n        this.resetUI();\n    };\n\n    uiSimulate = () => {\n        let current_tab = this.props.selectedtab;\n        let tab = this.props.tabs[current_tab];\n\n        if (tab.console_input_type !== CONSOLE_INPUT_NONE) return;\n\n        if (tab.runningStatus === SimulatingStatus.Stopped) this.uiAssemble();\n\n        let core = tab.core;\n\n        tab.runningStatus = SimulatingStatus.Play;\n\n        while (true) {\n            let fetch = core.fetch();\n            if (fetch !== null) {\n                this.addConsoleMessage(MessageType.Error, fetch);\n                tab.runningStatus = SimulatingStatus.Stopped;\n                break;\n            }\n\n            let decode = core.decode(); // Decode has the decoded instruction on success\n\n            if (decode === null) {\n                this.addConsoleMessage(MessageType.Error, decode_error_msg);\n                tab.runningStatus = SimulatingStatus.Stopped;\n                break;\n            } else {\n                tab.log.push(decode);\n            }\n\n            let execute = core.execute();\n            if (execute !== null) {\n                if (execute !== \"HALT\" && execute !== \"WAIT\") {\n                    // If HALT, then an environment call has been executed.\n                    this.addConsoleMessage(MessageType.Error, execute);\n                    tab.runningStatus = SimulatingStatus.Stopped;\n                }\n                break;\n            }\n        }\n\n        this.checkUpdatedTabs();\n        this.props.updateTab(current_tab, tab);\n    };\n\n    uiStepByStep = () => {\n        let current_tab = this.props.selectedtab;\n        let tab = this.props.tabs[current_tab];\n\n        if (tab.console_input_type !== CONSOLE_INPUT_NONE) return;\n\n        if (tab.runningStatus === SimulatingStatus.Stopped) this.uiAssemble();\n\n        let core = tab.core;\n\n        tab.runningStatus = SimulatingStatus.Step;\n\n        let fetch = core.fetch();\n        if (fetch !== null) {\n            this.addConsoleMessage(MessageType.Error, fetch);\n            tab.runningStatus = SimulatingStatus.Stopped;\n            this.props.updateTab(current_tab, tab);\n            return;\n        }\n\n        let decode = core.decode(); // Decode has the decoded instruction on success\n\n        if (decode === null) {\n            this.addConsoleMessage(MessageType.Error, decode_error_msg);\n            tab.runningStatus = SimulatingStatus.Stopped;\n            this.props.updateTab(current_tab, tab);\n            return;\n        } else {\n            tab.log.push(decode);\n        }\n\n        let execute = core.execute();\n        if (execute !== null) {\n            if (execute !== \"HALT\" && execute !== \"WAIT\") {\n                // If HALT, then an environment call has been executed.\n                this.addConsoleMessage(MessageType.Error, execute);\n                tab.runningStatus = SimulatingStatus.Stopped;\n            }\n        }\n\n        this.checkUpdatedTabs();\n        this.props.updateTab(current_tab, tab);\n    };\n\n    uiAssemble = () => {\n        let current_tab = this.props.selectedtab;\n        let tab = this.props.tabs[current_tab];\n        var val = tab.content;\n        if (val === \"\") {\n            return;\n        }\n\n        var core = tab.core;\n        this.reset();\n        let assembler = new OakJS.Assembler(\n            core.instructionSet,\n            OakJS.Endianness.little\n        );\n\n        let lines = OakJS.Line.arrayFromFile(val);\n\n        let passZero = assembler.assemble(lines, 0); // Assembler Pass 0. Returns Line array with errored lines, which are in line.invalidReason\n        if (passZero.length !== 0) {\n            for (let i in passZero) {\n                let line = passZero[i];\n                this.addConsoleMessage(\n                    MessageType.Error,\n                    <span>\n                        <b>Assembly error on line {line.number}:</b>{\" \"}\n                        {line.invalidReason}.\n                    </span>\n                );\n                return;\n            }\n        }\n        let pass = null;\n        let passCounter = 1;\n        do {\n            // Subsequent assembler passes. Typically one pass is needed, but when there's a lot of variance in ISA word sizes, another pass might be needed.\n            pass = assembler.assemble(lines, passCounter);\n            if (pass.length !== 0) {\n                for (let i in pass) {\n                    let line = pass[i];\n                    this.addConsoleMessage(\n                        MessageType.Error,\n                        <span>\n                            <b>Assembly error on line {line.number}:</b>{\" \"}\n                            {line.invalidReason}.\n                        </span>\n                    );\n                    return;\n                }\n            }\n            passCounter += 1;\n        } while (pass === null);\n\n        let machineCode = lines\n            .map((line) => line.machineCode)\n            .reduce((a, b) => a.concat(b), []); // Get machine code from lines\n        core.memset(0, machineCode); // memset\n\n        this.checkUpdatedTabs();\n\n        let error = false; //output.errorMessage===null;\n        if (!error) {\n            tab.machine_code = machineCode;\n            this.addConsoleMessage(\n                MessageType.Success,\n                <span>\n                    <b>Complete:</b> Assembly succeeded.\n                </span>\n            );\n        } else {\n            this.addConsoleMessage(\n                MessageType.Error,\n                <span>\n                    <b>Error:</b> Assembler failed.\n                </span>\n            );\n        }\n\n        this.props.updateTab(current_tab, tab);\n    };\n\n    handleSettingsChange = () => {\n        let current_tab = this.props.selectedtab;\n        let tab = this.props.tabs[current_tab];\n\n        if (!tab) return;\n\n        let file_name = this.props.project_settings.file_name;\n        let isa_type = this.props.project_settings.isa;\n        let memory_size = this.props.project_settings.memory_size;\n\n        tab.name = file_name;\n\n        let diff_isa = isa_type !== tab.instruction_set;\n        let diff_mem = memory_size !== tab.core.memorySize;\n\n        let new_isa_found = false;\n\n        if (diff_isa || diff_mem) {\n            let instruction_sets = OakJS.Core.factory.ISAs;\n            if (instruction_sets[isa_type]) {\n                new_isa_found = true;\n                tab.core = OakJS.Core.factory.getCore(\n                    isa_type,\n                    memory_size,\n                    this.virtual_os,\n                    []\n                );\n                tab.instruction_set = isa_type;\n                this.resetUI();\n            }\n\n            if (!new_isa_found) {\n                this.addConsoleMessage(\n                    MessageType.Error,\n                    <span>\n                        <b>Error: </b>Could not find ISA {isa_type}.\n                    </span>\n                );\n            }\n        }\n\n        this.props.updateTab(current_tab, tab);\n\n        if (new_isa_found) {\n            if (diff_isa)\n                this.addConsoleMessage(\n                    MessageType.Success,\n                    <span>\n                        <b>Complete: </b>Successfully changed ISA to {isa_type}.\n                    </span>\n                );\n\n            if (diff_mem)\n                this.addConsoleMessage(\n                    MessageType.Success,\n                    <span>\n                        <b>Complete: </b>Successfully changed memory size to{\" \"}\n                        {memory_size}.\n                    </span>\n                );\n        }\n    };\n\n    handleStartDragX = (event) => {\n        window.addEventListener(\"mousemove\", this.handleDragX);\n        window.addEventListener(\"mouseup\", this.handleStopDragX);\n    };\n\n    handleX = (event) => {\n        let x = event.pageX;\n        let w =\n            window.innerWidth ||\n            document.documentElement.clientWidth ||\n            document.body.clientWidth;\n        x = w - x;\n\n        if (x < 200) {\n            x = 200;\n        } else if (x > w - 200) {\n            x = w - 200;\n        }\n\n        this.setState({ panel_x: x });\n    };\n\n    handleX = (event) => {\n        let x = event.pageX;\n        let w =\n            window.innerWidth ||\n            document.documentElement.clientWidth ||\n            document.body.clientWidth;\n        x = w - x;\n\n        if (x < 150) {\n            x = 150;\n        } else if (x > w - 200) {\n            x = w - 200;\n        }\n\n        this.setState({ panel_x: x });\n    };\n\n    handleY = (event) => {\n        let y = event.pageY + 20;\n        let h =\n            window.innerHeight ||\n            document.documentElement.clientHeight ||\n            document.body.clientHeight;\n        y = h - y;\n\n        if (y < 50) {\n            y = 50;\n        } else if (y > h - 50) {\n            y = h - 50;\n        }\n\n        this.setState({ panel_y: y });\n    };\n\n    handleDragX = (event) => {\n        this.handleX(event);\n    };\n\n    handleStopDragX = (event) => {\n        this.handleX(event);\n        window.removeEventListener(\"mousemove\", this.handleDragX);\n        window.removeEventListener(\"mouseup\", this.handleStopDragX);\n    };\n\n    handleStartDragY = (event) => {\n        window.addEventListener(\"mousemove\", this.handleDragY);\n        window.addEventListener(\"mouseup\", this.handleStopDragY);\n    };\n\n    handleDragY = (event) => {\n        this.handleY(event);\n    };\n\n    handleStopDragY = (event) => {\n        this.handleY(event);\n        window.removeEventListener(\"mousemove\", this.handleDragY);\n        window.removeEventListener(\"mouseup\", this.handleStopDragY);\n    };\n\n    showSettings = () => {\n        this.props.setSettingsVisible(true);\n    };\n\n    showHelp = () => {\n        this.props.setHelpVisible(true);\n    };\n\n    showAbout = () => {\n        alert(1);\n        this.props.setAboutVisible(true);\n    };\n\n    render() {\n        let current_tab = this.props.selectedtab;\n        let tab = this.props.tabs[current_tab];\n\n        let has_tabs = this.props.tabs.length > 0;\n        let show_input = false;\n\n        if (tab) show_input = tab.console_input_type !== CONSOLE_INPUT_NONE;\n\n        return (\n            <React.Fragment>\n                <About />\n                <Help />\n                <Settings\n                    canhandleinput={!show_input}\n                    fn_new={this.addTabDefault}\n                    fn_load={this.handleLoadAsm}\n                    fn_save={this.handleDownloadAsm}\n                    fn_ass={this.uiAssemble}\n                    fn_sim={this.uiSimulate}\n                    fn_step={this.uiStepByStep}\n                />\n                <Navigation\n                    assemble={this.uiAssemble}\n                    simulate={this.uiSimulate}\n                    stepbystep={this.uiStepByStep}\n                    downloadRam={this.downloadRam}\n                    downloadBin={this.downloadBin}\n                    downloadBinH={this.downloadBinH}\n                    handleAddTabRiscv={this.addTabDefaultRISCV}\n                    handleAddTabMips={this.addTabDefaultMIPS}\n                    handleLoadAsm={this.handleLoadAsm}\n                    handleLoadBin={this.handleLoadBin}\n                    handleDownloadAsm={this.handleDownloadAsm}\n                />\n                {!has_tabs && (\n                    <div className=\"no_tabs\">\n                        <div>\n                            <h2>\n                                <Translate id=\"welcome.title\">\n                                    Welcome to Oak.js\n                                </Translate>\n                            </h2>\n                            <p>\n                                <Translate id=\"welcome.subtitle\">\n                                    Oak.js is an online javascript IDE,\n                                    Assembler, Disassembler, and Simulator for\n                                    assembly languages such as RISC-V and MIPS.\n                                </Translate>\n                            </p>\n                            <button\n                                className=\"button\"\n                                onClick={this.addTabDefault}\n                            >\n                                <Translate id=\"menus.add_tab\">\n                                    Add a Tab\n                                </Translate>\n                            </button>\n                            <button\n                                className=\"button\"\n                                onClick={this.handleLoadAsm}\n                            >\n                                <Translate id=\"menus.load_assembly\">\n                                    Load Assembly\n                                </Translate>\n                            </button>\n                            <button\n                                className=\"button\"\n                                onClick={this.handleLoadBin}\n                            >\n                                <Translate id=\"menus.load_binary\">\n                                    Load Binary\n                                </Translate>\n                            </button>\n                        </div>\n                    </div>\n                )}\n                {has_tabs && (\n                    <div\n                        className=\"grid\"\n                        style={{\n                            gridTemplateColumns: `auto ${this.state.panel_x}px`,\n                            gridTemplateRows: `auto calc(${this.state.panel_y}px)`,\n                        }}\n                    >\n                        <TextEditor\n                            is_disabled={show_input}\n                            addTab={this.addTabDefault}\n                        />\n                        <PanelContainer\n                            handleStartDrag={this.handleStartDragY}\n                            className=\"panel_bottom\"\n                        >\n                            <PanelConsole\n                                show_input={show_input}\n                                input={tab.console_input}\n                            />\n                            <PanelMachineCode />\n                            <PanelMemory />\n                            <PanelLog />\n                        </PanelContainer>\n                        <PanelContainer\n                            handleStartDrag={this.handleStartDragX}\n                            className=\"panel_side\"\n                        >\n                            <PanelSettings\n                                submitChanges={this.handleSettingsChange}\n                            />\n                            <PanelRegisters />\n                            <PanelConversion />\n                        </PanelContainer>\n                    </div>\n                )}\n                <input\n                    type=\"file\"\n                    onChange={this.handleUpload}\n                    ref={this.component_input}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nconst appStateToProps = (state) => {\n    return {\n        tabs: state.tabs,\n        selectedtab: state.selectedtab,\n        project_settings: state.project_settings,\n    };\n};\n\nconst appDispatchToProps = (dispatch, ownProps) => ({\n    addTab: (tab) => dispatch(addTab(tab)),\n    updateTab: (index, tab) => dispatch(updateTab(index, tab)),\n    selectTab: (id) => dispatch(selectTab(id)),\n    setProjectSettings: (n, s, i) => dispatch(setProjectSettings(n, s, i)),\n    setHelpVisible: (visible) => dispatch(setHelpVisible(visible)),\n    setAboutVisible: (visible) => dispatch(setAboutVisible(visible)),\n    setSettingsVisible: (visible) => dispatch(setSettingsVisible(visible)),\n});\n\nexport default withLocalize(connect(appStateToProps, appDispatchToProps)(App));\n","const tabReducer = (state = [], action) => {\n    switch (action.type) {\n        case \"ADD_TAB\":\n            return [...state, action.tab];\n        case \"UPDATE_TAB\": {\n            return state.map((t, index) => {\n                if (index === action.index) {\n                    return Object.assign({}, t, action.tab);\n                }\n\n                return t;\n            });\n        }\n        case \"DELETE_TAB\":\n            return [\n                ...state.slice(0, action.id),\n                ...state.slice(action.id + 1),\n            ];\n        default:\n            return state;\n    }\n};\n\nexport default tabReducer;\n","const selectedTabReducer = (state = 0, action) => {\n    switch (action.type) {\n        case \"SELECT_TAB\":\n            return action.id;\n        default:\n            return state;\n    }\n};\n\nexport default selectedTabReducer;\n","const globalSettingsReducer = (state = {}, action) => {\n    return state;\n};\n\nexport default globalSettingsReducer;\n","const projectSettingsReducer = (state = {}, action) => {\n    switch (action.type) {\n        case \"UPDATE_PROJECT_SETTINGS\":\n            return action.payload;\n        default:\n            return state;\n    }\n};\n\nexport default projectSettingsReducer;\n","const selectedTabReducer = (\n    state = {\n        settings: false,\n        help: false,\n    },\n    action\n) => {\n    switch (action.type) {\n        case \"SET_HELP_VISIBLE\":\n            return {\n                ...state,\n                help: action.state,\n            };\n        case \"SET_ABOUT_VISIBLE\":\n            return {\n                ...state,\n                about: action.state,\n            };\n        case \"SET_SETTINGS_VISIBLE\":\n            return {\n                ...state,\n                settings: action.state,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default selectedTabReducer;\n","import { combineReducers } from \"redux\";\nimport tabs from \"./tab\";\nimport selectedtab from \"./selectedtab\";\nimport global_settings from \"./globalsettings\";\nimport project_settings from \"./projectsettings\";\nimport panel_visibility from \"./setvisibility\";\nimport { localizeReducer } from \"react-localize-redux\";\n\nexport default combineReducers({\n    tabs,\n    selectedtab,\n    global_settings,\n    project_settings,\n    panel_visibility,\n    localize: localizeReducer,\n});\n","// React Imports\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// App Imports\nimport App from \"./app\";\n\n// Redux Store Imports\nimport allReducers from \"./reducers\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport { LocalizeProvider } from \"react-localize-redux\";\n\n// Create a store...\nconst store = createStore(\n    // ... with the list of all reducers\n    allReducers,\n    {},\n    // ...connext it to the dev tools\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\n// Render the app with an attached memory store to the element #root\nReactDOM.render(\n    <LocalizeProvider store={store}>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </LocalizeProvider>,\n\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}